<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Figures (Lines, 2D Shapes)</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="d70873e7-1dbc-492b-b10d-1afb6f06687a" /><meta name="Description" content="This topic gives an overview of figures. Figures in DigitalRune Graphics are drawings composed of 3D lines and 2D shapes." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="0a8eb9ca-74ae-4746-9289-93d909b07e22.htm" title="DigitalRune Graphics" tocid="0a8eb9ca-74ae-4746-9289-93d909b07e22">DigitalRune Graphics</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="7d5a0abe-8231-452c-895c-e6dbab83822b.htm" title="Graphics Programming" tocid="7d5a0abe-8231-452c-895c-e6dbab83822b">Graphics Programming</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="fda6c965-0105-4a5e-a0db-f8fa6ec4e73f.htm" title="Graphics Service" tocid="fda6c965-0105-4a5e-a0db-f8fa6ec4e73f">Graphics Service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="2e870374-8980-4fbc-9426-1d1a6e2d9766.htm" title="Graphics Screens" tocid="2e870374-8980-4fbc-9426-1d1a6e2d9766">Graphics Screens</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="4d8c922f-60cb-4b92-a22c-03c9e8816712.htm" title="Scene Management" tocid="4d8c922f-60cb-4b92-a22c-03c9e8816712">Scene Management</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6b3a13bc-37b4-4820-9f82-c2364a9ed2eb.htm" title="Rendering" tocid="6b3a13bc-37b4-4820-9f82-c2364a9ed2eb">Rendering</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ba1be841-af9c-41a4-8348-0b6bd92efdd9.htm" title="Effects and Effect Bindings" tocid="ba1be841-af9c-41a4-8348-0b6bd92efdd9">Effects and Effect Bindings</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="34a7f065-df4f-4f40-8b5c-5f0afee365db.htm" title="Materials and Material Instances" tocid="34a7f065-df4f-4f40-8b5c-5f0afee365db">Materials and Material Instances</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="cb08d0d8-8ea6-49fc-b318-b185dbb70608.htm" title="Models and Meshes" tocid="cb08d0d8-8ea6-49fc-b318-b185dbb70608">Models and Meshes</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="fda1f969-9b64-4851-873c-a59466ac69ba.htm" title="Cameras" tocid="fda1f969-9b64-4851-873c-a59466ac69ba">Cameras</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="e316a87e-0cdb-4c6b-bcb0-a2e66004c26f.htm" title="Lights" tocid="e316a87e-0cdb-4c6b-bcb0-a2e66004c26f">Lights</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="3f82c46b-efec-4416-807f-670ac1930117.htm" title="Shadows" tocid="3f82c46b-efec-4416-807f-670ac1930117">Shadows</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="630fb69e-a032-4125-bdc0-5484fbe2c86d.htm" title="Lens Flares" tocid="630fb69e-a032-4125-bdc0-5484fbe2c86d">Lens Flares</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="f782dc86-40e9-45c1-869a-4baf86e28ed9.htm" title="Decals" tocid="f782dc86-40e9-45c1-869a-4baf86e28ed9">Decals</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="4518dd2c-21ea-4cf8-8dec-8b3a32584743.htm" title="Billboards and Particles" tocid="4518dd2c-21ea-4cf8-8dec-8b3a32584743">Billboards and Particles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="d4d56ebf-a623-492c-bd37-b41a2979323e.htm" title="Sprites (Images and Text)" tocid="d4d56ebf-a623-492c-bd37-b41a2979323e">Sprites (Images and Text)</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="d70873e7-1dbc-492b-b10d-1afb6f06687a.htm" title="Figures (Lines, 2D Shapes)" tocid="d70873e7-1dbc-492b-b10d-1afb6f06687a">Figures (Lines, 2D Shapes)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="0bc6a222-64d5-4642-a2b6-241e9017c873.htm" title="Fog" tocid="0bc6a222-64d5-4642-a2b6-241e9017c873">Fog</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="975dcbca-5c87-4f33-a372-0cfe7f50cebe.htm" title="Sky" tocid="975dcbca-5c87-4f33-a372-0cfe7f50cebe">Sky</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="46f261f5-750c-4df5-99e2-b6a289f15098.htm" title="Terrain" tocid="46f261f5-750c-4df5-99e2-b6a289f15098">Terrain</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="5697f90f-2893-4ed5-ae66-da63afccdfc3.htm" title="Water" tocid="5697f90f-2893-4ed5-ae66-da63afccdfc3">Water</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="924e5123-9ed9-4db7-bd0c-2ec8589985ed.htm" title="Post-Processing" tocid="924e5123-9ed9-4db7-bd0c-2ec8589985ed">Post-Processing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="b7e96cd7-c737-4805-b5a9-98f1e8acd1d5.htm" title="Anti-Aliasing" tocid="b7e96cd7-c737-4805-b5a9-98f1e8acd1d5">Anti-Aliasing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="b320aebd-46a0-45d8-8edb-0c717152a56b.htm" title="Level of Detail (LOD)" tocid="b320aebd-46a0-45d8-8edb-0c717152a56b">Level of Detail (LOD)</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="cc20d61e-83cb-46c7-a2e2-0841a35043ba.htm" title="Occlusion Culling" tocid="cc20d61e-83cb-46c7-a2e2-0841a35043ba">Occlusion Culling</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7fbfaba5-af8d-4bf7-b5c3-6c084e1bfc54.htm" title="Windows Forms, WPF, UWP Interoperability" tocid="7fbfaba5-af8d-4bf7-b5c3-6c084e1bfc54">Windows Forms, WPF, UWP Interoperability</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="4e6f5dc1-8897-466f-88f2-b5c56d43a3c5.htm" title="Miscellaneous" tocid="4e6f5dc1-8897-466f-88f2-b5c56d43a3c5">Miscellaneous</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">Figures (Lines, 2D Shapes)</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
                This topic gives an overview of <em>figures</em>.
                Figures in DigitalRune Graphics are drawings composed of 3D lines and 2D shapes.
            </p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Definition">Defining figures</a></li><li class="outlineSectionEntry"><a href="#Example">Example</a></li><li class="outlineSectionEntry"><a href="#Renderer">FigureRenderer</a></li></ul></div><div class="collapsibleAreaRegion" id="Definition"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Defining figures</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
                    The class <a href="59079dd1-58ed-906c-de4a-64e7c7ef0f0a.htm">Figure</a>s
                    is the base class for a range of types.
                    <a href="dbcbf535-dec0-9483-bb94-e880994c87ac.htm">EllipseFigure</a>
                    and
                    <a href="a364076e-327a-b5fc-96a2-71cbfd5a3b41.htm">RectangleFigure</a>
                    can be used to create simple 2D shapes.
                    It is possible to transform and group figures using the
                    <a href="09600a6d-4ee6-f504-1fa4-e20faa8f21ef.htm">TransformedFigure</a>
                    and the
                    <a href="f14d2373-5e9a-3dd2-0f4d-6571aea3b702.htm">CompositeFigure</a>.
                </p><p><a href="16134bf8-2037-8e7f-51b9-163d08f1b095.htm">PathFigure2F</a>
                    and
                    <a href="55894965-853d-fa29-e863-ca8d70eb9983.htm">PathFigure3F</a>
                    can be used to define complex 2D and 3D figures. Both classes are composed of line
                    segments where each segment is described by an
                    <a href="c72dca63-7a96-6fe8-fbcd-4d26a851b0af.htm">ICurve<span id="LST640C0C5D_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST640C0C5D_0?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TParam, TPoint<span id="LST640C0C5D_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST640C0C5D_1?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.
                    DigitalRune Mathematics provides several curve classes in the namespace
                    <a href="227ba4a2-1912-ff42-37a9-329f380cad78.htm">DigitalRune.Mathematics.Interpolation</a>.
                    These classes can be used to create straight lines, splines or complex paths.
                    By default, all segments of a path figure get stroked. The
                    <a href="d7695e8d-e910-67c9-eb84-252873f2dec1.htm">StrokedSegment<span id="LST640C0C5D_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST640C0C5D_2?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>TParam, TPoint<span id="LST640C0C5D_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST640C0C5D_3?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                    decorator can be used to define whether a line segment that is stroked.
                    A <a href="16134bf8-2037-8e7f-51b9-163d08f1b095.htm">PathFigure2F</a>
                    can be filled, but <a href="55894965-853d-fa29-e863-ca8d70eb9983.htm">PathFigure3F</a>
                    is a pure line drawing that cannot be filled.
                </p><p>
                    When a renderer draws curved lines, it might convert them to a series of
                    line segments. The properties
                    <a href="a4652791-087e-535a-4bf7-4b996ad16ef2.htm">MaxNumberOfIterations</a>
                    and
                    <a href="0d0361ec-4da1-0ba9-01b0-4865d7708288.htm">Tolerance</a>
                    define how accurate such an approximation should be.
                </p><p>
                    Each figure has a
                    <a href="8305d696-165e-901f-b652-f2aed75812b4.htm">BoundingShape</a>
                    that can be used for frustum culling and a
                    <a href="80f45ee8-535d-3f7c-e235-3139e420cdc5.htm">HitShape</a>
                    that can be used for accurate hit testing.
                </p><p>
                    To add a figure to a scene a
                    <a href="95061be1-9b75-db4c-38ef-4693cffb9714.htm">FigureNode</a>
                    must be added. The
                    <a href="95061be1-9b75-db4c-38ef-4693cffb9714.htm">FigureNode</a>
                    references a
                    <a href="59079dd1-58ed-906c-de4a-64e7c7ef0f0a.htm">Figure</a>
                    and allows to define the appearance of the shapes. The <strong>Stroke</strong> properties
                    describe how the shape's outline is rendered. The stroke is rendered as an anti-aliased line
                    and can use a dash pattern. Closed shapes can be filled with a solid color, defined by the
                    <strong>Fill</strong> properties. (Some figures, like simple lines, do not have an
                    interior and cannot be filled.)
                </p><p>
                    Multiple <a href="95061be1-9b75-db4c-38ef-4693cffb9714.htm">FigureNode</a>s
                    can reference the same
                    <a href="59079dd1-58ed-906c-de4a-64e7c7ef0f0a.htm">Figure</a>.
                    This can be used to define a common figure (e.g. an arrow symbol) once,
                    and draw the figure several times in a scene with different appearances.
                </p><div class="mediaNear"><img alt="DigitalRune.Graphics (Figures)" src="../media/Graphics_Figures.png" /><div class="caption">Class Diagram: Figures</div></div></div><div class="collapsibleAreaRegion" id="Example"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    Figures can be used to render anti-aliased lines with dash pattern:
                </p><div class="mediaNear"><img alt="Lines" src="../media/Lines.jpg" /></div><p>
                    Figures can also be used to create various shapes:
                </p><div class="mediaNear"><img alt="Figures" src="../media/Figures.jpg" /></div><p>
                    The following example code creates a 2D drawing that resembles a flower
                    and adds it to a scene.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAACAAA_tab1" class="codeSnippetContainerTabSingle">Example (C#)</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Define single flower petal.</span>
<span class="highlight-keyword">var</span> petalPath = <span class="highlight-keyword">new</span> Path2F
{
  <span class="highlight-keyword">new</span> PathKey2F
  {
    Parameter = <span class="highlight-number">0</span>,
    Interpolation = SplineInterpolation.Bezier,
    Point = <span class="highlight-keyword">new</span> Vector2F(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>),
    TangentIn = <span class="highlight-keyword">new</span> Vector2F(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>),
    TangentOut = <span class="highlight-keyword">new</span> Vector2F(<span class="highlight-number">-0.2</span>f, <span class="highlight-number">0.2</span>f)
  },
  <span class="highlight-keyword">new</span> PathKey2F
  {
    Parameter = <span class="highlight-number">1</span>,
    Interpolation = SplineInterpolation.Bezier,
    Point = <span class="highlight-keyword">new</span> Vector2F(<span class="highlight-number">0</span>, <span class="highlight-number">1</span>),
    TangentIn = <span class="highlight-keyword">new</span> Vector2F(<span class="highlight-number">-0.3</span>f, <span class="highlight-number">1.1</span>f),
    TangentOut = <span class="highlight-keyword">new</span> Vector2F(<span class="highlight-number">0.3</span>f, <span class="highlight-number">1.1</span>f)
  },
  <span class="highlight-keyword">new</span> PathKey2F
  {
    Parameter = <span class="highlight-number">2</span>,
    Interpolation = SplineInterpolation.Bezier,
    Point = <span class="highlight-keyword">new</span> Vector2F(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>),
    TangentIn = <span class="highlight-keyword">new</span> Vector2F(<span class="highlight-number">0.2</span>f, <span class="highlight-number">0.2</span>f),
    TangentOut = <span class="highlight-keyword">new</span> Vector2F(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>)
  }
};

<span class="highlight-keyword">var</span> petal = <span class="highlight-keyword">new</span> PathFigure2F();
petal.Segments.Add(petalPath);

<span class="highlight-comment">// Duplicate and rotate flower petal several times.</span>
<span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> numberOfPetals = <span class="highlight-number">9</span>;
<span class="highlight-keyword">var</span> flower = <span class="highlight-keyword">new</span> CompositeFigure();
flower.Children.Add(petal);
<span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">1</span>; i &lt; numberOfPetals; i++)
{
  <span class="highlight-keyword">var</span> transformedPetal = <span class="highlight-keyword">new</span> TransformedFigure(petal)
  {
    Pose = <span class="highlight-keyword">new</span> Pose(Matrix33F.CreateRotationZ(i * ConstantsF.TwoPi / numberOfPetals))
  };
  flower.Children.Add(transformedPetal);
}

<span class="highlight-comment">// Add figure to the scene.</span>
<span class="highlight-keyword">var</span> flowerNode = <span class="highlight-keyword">new</span> FigureNode(flower)
{
  Name = <span class="highlight-literal">"Flower"</span>,
  StrokeThickness = <span class="highlight-number">2</span>,
  StrokeColor = <span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">1</span>, <span class="highlight-number">0.2</span>f, <span class="highlight-number">0.2</span>f),
  FillColor = <span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">1</span>, <span class="highlight-number">0.5</span>f, <span class="highlight-number">0.5</span>f),
  FillAlpha = <span class="highlight-number">1</span>,
  PoseLocal = <span class="highlight-keyword">new</span> Pose(<span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">3</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>)),
  ScaleLocal = <span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">0.5</span>f)
};
scene.Children.Add(flowerNode);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="Renderer"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />FigureRenderer</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
                    The <a href="6f1f4d05-9e3e-ed1c-e45a-db770df8bcc9.htm">FigureRenderer</a>
                    is a <a href="c022a3a4-2330-9b46-24ad-c8f3ae13f1f8.htm">SceneNodeRenderer</a>
                    that handles <a href="95061be1-9b75-db4c-38ef-4693cffb9714.htm">FigureNode</a>s.
                    The renderer can render filled shapes and stroked lines using anti-aliasing, different
                    thickness and dash patterns.
                </p><p>
                    Figures may be rendered on top of a scene (always visible) or as part of the current scene
                    (to hide figures occluded by geometry). This is defined by setting the appropriate
                    depth-stencil state. Alpha-blending can be used as well.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABABAAA_tab1" class="codeSnippetContainerTabSingle">Example (C#)</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Set desired depth-stencil and blend states.</span>
graphicsDevice.DepthStencilState = DepthStencilState.DepthRead;
graphicsDevice.BlendState = BlendState.AlphaBlend;

<span class="highlight-comment">// Render a list of figure nodes.</span>
figureRenderer.Render(sceneNodes, context);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABABAAA");</script><p>
                    Figures are usually rendered with alpha-blending and without writing to the depth buffer.
                    This means that the depth test can't be used for sorting figures, overlapping figures may
                    be rendered in the wrong order.
                    Most cases can be solved by choosing the right
                    <a href="ebdefaf3-ec50-9980-7d9d-899bd22c8653.htm">RenderOrder</a>
                    when calling the
                    <a href="4a2cb9a9-9991-42e2-ccc9-c2f22b415024.htm">Render</a>.
                    However, there is not yet a general solution that works in all cases.
                </p></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>