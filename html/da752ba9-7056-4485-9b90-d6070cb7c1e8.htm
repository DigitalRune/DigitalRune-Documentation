<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Step 6: Game object service</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="da752ba9-7056-4485-9b90-d6070cb7c1e8" /><meta name="Description" content="In this step we will add game logic to control the camera with keyboard and mouse." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d94d3673-de15-47f9-a122-70b4d97b5920.htm" title="General" tocid="d94d3673-de15-47f9-a122-70b4d97b5920">General</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="4d7ccf95-54e8-4b4c-950f-9420947b4e24.htm" title="Tutorials" tocid="4d7ccf95-54e8-4b4c-950f-9420947b4e24">Tutorials</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6ce9b230-eed2-419d-92df-3e3e4a03d27e.htm" title="Tutorial 01: Adding DigitalRune Engine to an XNA Game" tocid="6ce9b230-eed2-419d-92df-3e3e4a03d27e">Tutorial 01: Adding DigitalRune Engine to an XNA Game</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8befb151-f7b6-4884-936b-530458b13860.htm" title="Step 1: Setup" tocid="8befb151-f7b6-4884-936b-530458b13860">Step 1: Setup</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="25418622-e634-4741-8d17-efc9fb44fba7.htm" title="Step 2: Empty game" tocid="25418622-e634-4741-8d17-efc9fb44fba7">Step 2: Empty game</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="0c04e065-a5fb-4045-bc09-7cce47c63d4e.htm" title="Step 3: Input service" tocid="0c04e065-a5fb-4045-bc09-7cce47c63d4e">Step 3: Input service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="26ebc8f3-4778-4979-a217-1d85e2c5ae31.htm" title="Step 4: Graphics service" tocid="26ebc8f3-4778-4979-a217-1d85e2c5ae31">Step 4: Graphics service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="efe7ad45-ea74-4e57-810d-93bc3ef3a28f.htm" title="Step 5: Debug rendering" tocid="efe7ad45-ea74-4e57-810d-93bc3ef3a28f">Step 5: Debug rendering</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="da752ba9-7056-4485-9b90-d6070cb7c1e8.htm" title="Step 6: Game object service" tocid="da752ba9-7056-4485-9b90-d6070cb7c1e8">Step 6: Game object service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5.htm" title="Step 7: Model content" tocid="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5">Step 7: Model content</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="253857cc-d401-4788-ae6e-4ca12a94a21e.htm" title="Step 8: Rendering models" tocid="253857cc-d401-4788-ae6e-4ca12a94a21e">Step 8: Rendering models</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="cdc88d41-dcb6-4464-be17-46d29a15d25a.htm" title="Step 9: Animated Model" tocid="cdc88d41-dcb6-4464-be17-46d29a15d25a">Step 9: Animated Model</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="a1c6f3cc-8a48-4c68-9401-421d36f67eba.htm" title="Step 10: More debug rendering" tocid="a1c6f3cc-8a48-4c68-9401-421d36f67eba">Step 10: More debug rendering</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="dd394bdc-c9ec-442a-929d-7141f7b301ae.htm" title="Step 11: Physics" tocid="dd394bdc-c9ec-442a-929d-7141f7b301ae">Step 11: Physics</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="aa0a6f8f-d355-4188-9d4a-7041160411d1.htm" title="Step 12: Particles" tocid="aa0a6f8f-d355-4188-9d4a-7041160411d1">Step 12: Particles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="c060be3d-f85f-4551-838c-6969ab45b0b4.htm" title="Step 13: Sky box" tocid="c060be3d-f85f-4551-838c-6969ab45b0b4">Step 13: Sky box</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="68c9f201-aa9c-4b7f-bf96-a57893faddfe.htm" title="Step 14: Post-processing" tocid="68c9f201-aa9c-4b7f-bf96-a57893faddfe">Step 14: Post-processing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="b035aaae-87fb-48c6-86de-e30024ec9a89.htm" title="Step 15: Add DigitalRune Graphics content" tocid="b035aaae-87fb-48c6-86de-e30024ec9a89">Step 15: Add DigitalRune Graphics content</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="77f82858-2022-41f9-9325-9a4d97b5450d.htm" title="Step 16: GUI" tocid="77f82858-2022-41f9-9325-9a4d97b5450d">Step 16: GUI</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7f0f5338-019d-4ef1-a579-3d99df4e1aa2.htm" title="Step 17: Deferred lighting" tocid="7f0f5338-019d-4ef1-a579-3d99df4e1aa2">Step 17: Deferred lighting</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">Step 6: Game object service</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
                In this step we will add game logic to control the camera with keyboard and mouse.
            </p></div><div class="collapsibleAreaRegion" id="GameObject"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Add a game object to control the camera</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    Currently, the camera is static. To simplify debugging, I always try to add code
                    which moves the camera as soon as possible.
                    Code that controls objects of the game, like the camera, is called game logic. We
                    could add the code to <strong>MyGame</strong> or <strong>MyGameComponent</strong>,
                    but it is better to put it into a separate class. It is good to separate game logic
                    into separate classes to keep the code clean and to allow reusing the code in other
                    projects.
                    The DigitalRune Engine provides the base class <strong>DigitalRune.Game.GameObject</strong>.
                    This is the ideal place for game logic.
                </p><p>
                    First, let's remove the camera code from <em>MyGraphicsScreen.cs</em>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFADAAA_tab1" class="codeSnippetContainerTabSingle">MyGraphicsScreen.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">public</span> MyGraphicsScreen(IGraphicsService graphicsService)
  : <span class="highlight-keyword">base</span>(graphicsService)
{
    <span class="highlight-keyword">var</span> spriteFont = graphicsService.Content.Load&lt;SpriteFont&gt;(<span class="highlight-literal">"SpriteFont1"</span>);
    DebugRenderer = <span class="highlight-keyword">new</span> DebugRenderer(graphicsService, spriteFont);

    <span class="highlight-comment">// var projection = new PerspectiveProjection();                          // REMOVE</span>
    <span class="highlight-comment">// projection.SetFieldOfView(                                             // REMOVE</span>
    <span class="highlight-comment">//     ConstantsF.PiOver4,                                                // REMOVE</span>
    <span class="highlight-comment">//         graphicsService.GraphicsDevice.Viewport.AspectRatio,           // REMOVE</span>
    <span class="highlight-comment">//         0.1f,                                                          // REMOVE</span>
    <span class="highlight-comment">//         100);                                                          // REMOVE</span>
    <span class="highlight-comment">// var camera = new Camera(projection);                                   // REMOVE</span>
    <span class="highlight-comment">// CameraNode = new CameraNode(camera);                                   // REMOVE</span>
    <span class="highlight-comment">// CameraNode.PoseWorld = new Pose(new Vector3F(0, 1, 5));                // REMOVE</span>
}
…</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFADAAA");</script><p>
                    Let's add a new item <em>CameraObject.cs</em> to the project. Here
                    is the code of the <strong>CameraObject</strong>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADADAAA_tab1" class="codeSnippetContainerTabSingle">CameraObject.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> DigitalRune.Game;
<span class="highlight-keyword">using</span> DigitalRune.Game.Input;
<span class="highlight-keyword">using</span> DigitalRune.Geometry;
<span class="highlight-keyword">using</span> DigitalRune.Graphics;
<span class="highlight-keyword">using</span> DigitalRune.Graphics.SceneGraph;
<span class="highlight-keyword">using</span> DigitalRune.Mathematics;
<span class="highlight-keyword">using</span> DigitalRune.Mathematics.Algebra;
<span class="highlight-keyword">using</span> Microsoft.Practices.ServiceLocation;
<span class="highlight-keyword">using</span> Microsoft.Xna.Framework;
<span class="highlight-keyword">using</span> Microsoft.Xna.Framework.Input;
<span class="highlight-keyword">using</span> MathHelper = DigitalRune.Mathematics.MathHelper;

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CameraObject : GameObject
    {
        <span class="highlight-keyword">private</span> Game _game;
        <span class="highlight-keyword">private</span> IInputService _inputService;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">float</span> _currentYaw;
        <span class="highlight-keyword">private</span> <span class="highlight-keyword">float</span> _currentPitch;

        <span class="highlight-keyword">public</span> CameraNode CameraNode { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }

        <span class="highlight-keyword">public</span> CameraObject()
        {
            _game = ServiceLocator.Current.GetInstance&lt;Game&gt;();
            _inputService = ServiceLocator.Current.GetInstance&lt;IInputService&gt;();

            <span class="highlight-keyword">var</span> graphicsService = ServiceLocator.Current.GetInstance&lt;IGraphicsService&gt;();
            <span class="highlight-keyword">var</span> projection = <span class="highlight-keyword">new</span> PerspectiveProjection();
            projection.SetFieldOfView(
                ConstantsF.PiOver4,
                    graphicsService.GraphicsDevice.Viewport.AspectRatio,
                    <span class="highlight-number">0.1</span>f,
                    <span class="highlight-number">100</span>);
            <span class="highlight-keyword">var</span> camera = <span class="highlight-keyword">new</span> Camera(projection);
            CameraNode = <span class="highlight-keyword">new</span> CameraNode(camera);
            CameraNode.PoseWorld = <span class="highlight-keyword">new</span> Pose(<span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">3</span>));
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnLoad()
        {
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUnload()
        {
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUpdate(TimeSpan deltaTime)
        {
            _inputService.EnableMouseCentering = _game.IsActive;

            <span class="highlight-keyword">float</span> deltaTimeF = (<span class="highlight-keyword">float</span>)deltaTime.TotalSeconds;

            Vector2F mousePositionDelta = _inputService.MousePositionDelta;

            <span class="highlight-keyword">float</span> deltaYaw = -mousePositionDelta.X;
            _currentYaw += deltaYaw * deltaTimeF * <span class="highlight-number">0.1</span>f;

            <span class="highlight-keyword">float</span> deltaPitch = -mousePositionDelta.Y;
            _currentPitch += deltaPitch * deltaTimeF * <span class="highlight-number">0.1</span>f;

            <span class="highlight-comment">// Limit the pitch angle to +/- 90°.</span>
            _currentPitch = MathHelper.Clamp(_currentPitch, -ConstantsF.PiOver2, ConstantsF.PiOver2);

            <span class="highlight-comment">// Compute new orientation of the camera.</span>
            QuaternionF orientation = QuaternionF.CreateRotationY(_currentYaw) * QuaternionF.CreateRotationX(_currentPitch);

            Vector3F velocity = Vector3F.Zero;
            KeyboardState keyboardState = _inputService.KeyboardState;
            <span class="highlight-keyword">if</span> (keyboardState.IsKeyDown(Keys.W))
                velocity.Z--;
            <span class="highlight-keyword">if</span> (keyboardState.IsKeyDown(Keys.S))
                velocity.Z++;
            <span class="highlight-keyword">if</span> (keyboardState.IsKeyDown(Keys.A))
                velocity.X--;
            <span class="highlight-keyword">if</span> (keyboardState.IsKeyDown(Keys.D))
                velocity.X++;
            <span class="highlight-keyword">if</span> (keyboardState.IsKeyDown(Keys.R))  <span class="highlight-comment">// R … "raise"</span>
                velocity.Y++;
            <span class="highlight-keyword">if</span> (keyboardState.IsKeyDown(Keys.F))  <span class="highlight-comment">// F … "fall"</span>
                velocity.Y--;

            velocity = orientation.Rotate(velocity);
            Vector3F translation = velocity * deltaTimeF * <span class="highlight-number">5</span>;

            CameraNode.LastPoseWorld = CameraNode.PoseWorld;
            CameraNode.PoseWorld = <span class="highlight-keyword">new</span> Pose(
                CameraNode.PoseWorld.Position + translation,
                orientation);
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADADAAA");</script><p>
                    Here are few important notes about the code:
                </p><ul><li>
                        The <strong>CameraObject</strong> derives from <strong>GameObject</strong>.
                    </li><li>
                        The <strong>CameraObject</strong> overrides a few methods of the
                        <strong>GameObject</strong> base class:
                        <strong>OnLoad</strong>, <strong>OnUnload</strong>,
                        <strong>OnUpdate</strong>.
                    </li><li>
                        In <strong>OnUpdate</strong>, we enable <span class="term">mouse centering</span>:
                        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADCBADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADCBADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADCBADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADCBADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">_inputService.EnableMouseCentering = _game.IsActive;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADCBADAAA");</script>
                        XNA does not have a relative mouse mode. The mouse position is always
                        absolute and if the mouse cursor hits the screen border, it stops. This
                        is not suitable for typical first-person shooter controls. To create a
                        relative mouse mode, we have to reset the mouse position in each frame,
                        so that it can never reach the screen border. This is the purpose of
                        <strong>EnableMouseCentering</strong>.
                        Mouse centering should be automatically disabled when the game is not
                        active. That means, when another desktop application is active and the
                        XNA game is in the background, the game should not interfere with the
                        mouse movement.
                    </li><li>
                        In <strong>OnUpdate</strong>, the class reads the mouse input and
                        computes a new pose (= orientation + position) for the <strong>CameraNode</strong>.
                    </li><li>
                        The previous pose of the <strong>CameraNode</strong> is stored in
                        <strong>LastPoseWorld</strong>:
                        <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFABADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFABADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFABADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFABADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">CameraNode.LastPoseWorld = CameraNode.PoseWorld;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFABADAAA");</script>
                        This is necessary for some advanced effects, e.g. motion blur effects will
                        compare <strong>LastPoseWorld</strong> and the current
                        <strong>PoseWorld</strong>
                        to compute how much the scene must be blurred.
                    </li></ul><p>
                    Now, we need something that calls
                    <strong>OnLoad</strong>,
                    <strong>OnUnload</strong> and
                    <strong>OnUpdate</strong> methods of the game object. This is the game object service.
                </p></div><div class="collapsibleAreaRegion" id="GameObjectManager"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />
                Add the game object service
            </span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    Let's add the game object service to <em>Game1.cs</em>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAGACAAA_tab1" class="codeSnippetContainerTabSingle">Game1.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAGACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAGACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAGACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">using</span> DigitalRune.Game;                                                                 <span class="highlight-comment">// NEW</span>
…

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Game1 : Microsoft.Xna.Framework.Game
    {
        …
        <span class="highlight-keyword">private</span> GameObjectManager _gameObjectManager;                                   <span class="highlight-comment">// NEW</span>
        …

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Initialize()
        {
          _services = <span class="highlight-keyword">new</span> ServiceContainer();
          ServiceLocator.SetLocatorProvider(() =&gt; _services);

          _inputManager = <span class="highlight-keyword">new</span> InputManager(<span class="highlight-keyword">false</span>);
          _services.Register(<span class="highlight-keyword">typeof</span>(IInputService), <span class="highlight-keyword">null</span>, _inputManager);

          _graphicsManager = <span class="highlight-keyword">new</span> GraphicsManager(GraphicsDevice, Window, Content);
          _services.Register(<span class="highlight-keyword">typeof</span>(IGraphicsService), <span class="highlight-keyword">null</span>, _graphicsManager);

          _gameObjectManager = <span class="highlight-keyword">new</span> GameObjectManager();                                 <span class="highlight-comment">// NEW</span>
          _services.Register(<span class="highlight-keyword">typeof</span>(IGameObjectService), <span class="highlight-keyword">null</span>, _gameObjectManager);     <span class="highlight-comment">// NEW</span>

          Components.Add(<span class="highlight-keyword">new</span> MyGameComponent(<span class="highlight-keyword">this</span>));

          <span class="highlight-keyword">base</span>.Initialize();
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Update(GameTime gameTime)
        {
          _inputManager.Update(gameTime.ElapsedGameTime);

          <span class="highlight-keyword">base</span>.Update(gameTime);

          _gameObjectManager.Update(gameTime.ElapsedGameTime);                          <span class="highlight-comment">// NEW</span>
        }
        …</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAGACAAA");</script><p>
                    The service is registered in the service container as usual. It is updated in
                    <strong>Game1.Update</strong>. You might wonder why the input manager is
                    updated before
                    <strong>base.Update(gameTime)</strong> and the game object manager is
                    update last. The reason is:
                    <strong>base.Update(gameTime)</strong> updates the XNA game components,
                    like <strong>MyGameComponent</strong>. Since
                    <strong>MyGameComponent</strong> and the <strong>CameraObject</strong>
                    use the input service, the input manager should be updated first. As you will see
                    next, we use <strong>MyGameComponent</strong> to load the
                    <strong>CameraObject</strong>. Therefore, it makes sense to update the
                    XNA game components before the game objects.
                </p><p>
                    However, this update order is not set in stone. The DigitalRune Engine is modular
                    and gives you full control over the update order.
                </p><p>
                    To use the camera game object add the following code to <em>MyGameComponent.cs</em>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACACAAA_tab1" class="codeSnippetContainerTabSingle">MyGameComponent.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">using</span> DigitalRune.Game;                                                                         <span class="highlight-comment">// NEW</span>
…

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGameComponent : Microsoft.Xna.Framework.GameComponent
    {
        …
        <span class="highlight-keyword">public</span> MyGameComponent(Game game)
            : <span class="highlight-keyword">base</span>(game)
        {
            _inputService = ServiceLocator.Current.GetInstance&lt;IInputService&gt;();

            _graphicsService = ServiceLocator.Current.GetInstance&lt;IGraphicsService&gt;();
            
            _myGraphicsScreen = <span class="highlight-keyword">new</span> MyGraphicsScreen(_graphicsService);
            _graphicsService.Screens.Add(_myGraphicsScreen);

            <span class="highlight-keyword">var</span> gameObjectService = ServiceLocator.Current.GetInstance&lt;IGameObjectService&gt;();   <span class="highlight-comment">// NEW</span>
            <span class="highlight-keyword">var</span> cameraObject = <span class="highlight-keyword">new</span> CameraObject();                                              <span class="highlight-comment">// NEW</span>
            _myGraphicsScreen.CameraNode = cameraObject.CameraNode;                             <span class="highlight-comment">// NEW</span>
            gameObjectService.Objects.Add(cameraObject);                                        <span class="highlight-comment">// NEW</span>
            
            _myGraphicsScreen.DebugRenderer.DrawText(<span class="highlight-literal">"MyGame"</span>);
            _myGraphicsScreen.DebugRenderer.DrawAxes(Pose.Identity, <span class="highlight-number">1</span>, <span class="highlight-keyword">false</span>);
        }

        …</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACACAAA");</script><p>
                    This code creates the camera game object, tells the graphics screen about the
                    camera and adds the game object to the game object service. The game object manager
                    automatically calls <strong>GameObject.OnLoad/OnUnload</strong> when a
                    game object is added to or removed from the game object service. Each frame, when
                    <strong>GameObjectManager.Update</strong> is executed by the
                    <strong>Game</strong> class, the <strong>OnUpdate</strong> method
                    of the game objects is called, and the <strong>CameraObject</strong> will update the camera.
                </p><p>
                    Run the game. Now, you can move the camera using the keys W, A, S, D, R, F and the mouse.
                </p></div><div class="collapsibleAreaRegion" id="Next"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Next</span></div><div id="ID3RBSection" class="collapsibleSection"><p><a href="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5.htm">Step 7: Model content</a></p></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>