<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>IInputService Interface</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="IInputService interface" /><meta name="System.Keywords" content="DigitalRune.Game.Input.IInputService interface" /><meta name="System.Keywords" content="IInputService interface, about IInputService interface" /><meta name="Microsoft.Help.F1" content="DigitalRune.Game.Input.IInputService" /><meta name="Microsoft.Help.Id" content="T:DigitalRune.Game.Input.IInputService" /><meta name="Description" content="Manages user input from keyboard, mouse, Xbox 360 controllers and other devices." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="DigitalRune.Game.Input" /><meta name="file" content="ccc38e5b-8b21-b109-140c-2ce6c275070f" /><meta name="guid" content="ccc38e5b-8b21-b109-140c-2ce6c275070f" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d75eb659-6335-53f6-af7a-81814a21ab7f.htm" title="Class Library Reference" tocid="d75eb659-6335-53f6-af7a-81814a21ab7f">Class Library Reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="02bd96b5-c091-2df3-73d5-fbb8056b8e03.htm" title="DigitalRune.Game.Input" tocid="02bd96b5-c091-2df3-73d5-fbb8056b8e03">DigitalRune.Game.Input</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="ccc38e5b-8b21-b109-140c-2ce6c275070f.htm" title="IInputService Interface" tocid="ccc38e5b-8b21-b109-140c-2ce6c275070f">IInputService Interface</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="651c13d8-07c6-445b-bf9b-c4f2cb1c78c4.htm" title="IInputService Methods" tocid="651c13d8-07c6-445b-bf9b-c4f2cb1c78c4">IInputService Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="4ddbcdd4-c795-1ea0-d8e2-16f08e86d8f2.htm" title="IInputService Properties" tocid="4ddbcdd4-c795-1ea0-d8e2-16f08e86d8f2">IInputService Properties</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">IInputService Interface</td></tr></table><span class="introStyle"></span><div class="summary">
            Manages user input from keyboard, mouse, Xbox 360 controllers and other devices.
            </div><p> </p><strong>Namespace:</strong> <a href="02bd96b5-c091-2df3-73d5-fbb8056b8e03.htm">DigitalRune.Game.Input</a><br /><strong>Assembly:</strong> DigitalRune.Game.Input (in DigitalRune.Game.Input.dll) Version: 1.8.0.0 (1.8.0.14467)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cs','1','4');return false;">C#</a></div><div id="ID0EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','vb','2','4');return false;">VB</a></div><div id="ID0EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cpp','3','4');return false;">C++</a></div><div id="ID0EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EDCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="identifier">IInputService</span></pre></div><div id="ID0EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Interface</span> <span class="identifier">IInputService</span></pre></div><div id="ID0EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface class</span> <span class="identifier">IInputService</span></pre></div><div id="ID0EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">IInputService</span> =  <span class="keyword">interface</span> <span class="keyword">end</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDCA");</script></div><p>The <span class="selflink">IInputService</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID2RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="81d7da0a-817b-2311-8b2f-c1d1ced2336e.htm">GetGamePadState(PlayerIndex)</a></td><td><div class="summary">
            Gets the gamepad state of the given game controller. (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="12229f8f-328c-ec00-78d4-b075019e9aa0.htm">GetGamePadState(LogicalPlayerIndex)</a></td><td><div class="summary">
            Gets the gamepad state for the given player.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="81b26166-9ddc-b867-ea9d-914826a0bf58.htm">GetLogicalPlayer</a></td><td><div class="summary">
            Gets the game controller assigned to the specified player. (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="2b4a9a20-085c-df16-1daf-2e585a519314.htm">GetPreviousGamePadState(PlayerIndex)</a></td><td><div class="summary">
            Gets the gamepad state of the last frame of the given game controller. 
            (Only available in XNA Windows Phone builds.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="16381f44-054b-49b2-52f2-e933c5f44f6c.htm">GetPreviousGamePadState(LogicalPlayerIndex)</a></td><td><div class="summary">
            Gets the gamepad state of the last frame for the given player. 
            (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="4a21a3ba-c26d-3ab7-cdc2-e19c34e1f085.htm">IsDoubleClick(Keys)</a></td><td><div class="summary">
            Determines whether the specified key was double-clicked.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="921ccc01-50b9-ae1c-3762-691a66c29af1.htm">IsDoubleClick(MouseButtons)</a></td><td><div class="summary">
            Determines whether the specified button has been double-clicked.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="d31ac2d0-bf9f-b522-a169-27052a627657.htm">IsDoubleClick(Buttons, LogicalPlayerIndex)</a></td><td><div class="summary">
            Determines whether the specified button has been double-clicked by the given player.
            (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="4679f2d5-7f12-b200-b215-3f4de58fceec.htm">IsDoubleClick(Buttons, PlayerIndex)</a></td><td><div class="summary">
            Determines whether the specified button has been double-clicked on the given game 
            controller. (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="42d40324-fe00-5b1c-a886-260277494d95.htm">IsDown(Keys)</a></td><td><div class="summary">
            Determines whether the specified key is down.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="b03a208e-65c4-954c-6193-02dee5cae404.htm">IsDown(MouseButtons)</a></td><td><div class="summary">
            Determines whether the specified button is down.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="61b7f23a-a9b7-9222-ee7b-c2cb82c9b254.htm">IsDown(Buttons, LogicalPlayerIndex)</a></td><td><div class="summary">
            Determines whether the specified button is down for the given player. 
            (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="12bffadf-ddf1-7989-819c-3e1b66ceaf02.htm">IsDown(Buttons, PlayerIndex)</a></td><td><div class="summary">
            Determines whether the specified button is down on the given game controller. 
            (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="23d2acde-da56-6fe3-535c-3ca5a65439ac.htm">IsGamePadHandled(PlayerIndex)</a></td><td><div class="summary">
            Gets a value indicating whether the input of a given game controller has already been 
            handled. (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="1a7aaefe-b3d9-2177-ce37-434a0aac329c.htm">IsGamePadHandled(LogicalPlayerIndex)</a></td><td><div class="summary">
            Gets a value indicating whether gamepad input of a given player has already been handled.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="d57858da-0a52-ff04-bb9a-c3f1b3aeb187.htm">IsPressed(Keys, Boolean)</a></td><td><div class="summary">
            Determines whether the specified key was previously up and has been pressed.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="1623dcaa-1428-d5a4-03e8-fe52895d47c0.htm">IsPressed(MouseButtons, Boolean)</a></td><td><div class="summary">
            Determines whether the specified button was previously up and has been pressed.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="c9124155-a882-aee8-28f5-f41e95cb0cec.htm">IsPressed(Buttons, Boolean, LogicalPlayerIndex)</a></td><td><div class="summary">
            Determines whether the specified button has been pressed by the given player. 
            (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="25277d59-2c02-1ad6-b93e-667fe5c329c1.htm">IsPressed(Buttons, Boolean, PlayerIndex)</a></td><td><div class="summary">
            Determines whether the specified button has been pressed on the given game controller. 
            (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="a2915c8d-fc4f-27ce-c0ec-dd1f657c72c7.htm">IsReleased(Keys)</a></td><td><div class="summary">
            Determines whether the specified key was previously down and has been released.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="63295080-af28-63bf-67e8-e927e7b4bfb7.htm">IsReleased(MouseButtons)</a></td><td><div class="summary">
            Determines whether the specified button was previously down and has been released.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="b9896634-a737-7503-0e91-ec8c80554dc8.htm">IsReleased(Buttons, LogicalPlayerIndex)</a></td><td><div class="summary"> 
            Determines whether the specified button has been released by the given player.
            (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="75e8e70d-2b03-9c31-8e0f-526129e431d6.htm">IsReleased(Buttons, PlayerIndex)</a></td><td><div class="summary">
            Determines whether the specified button has been released on the given game controller.
            (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="a8306fed-e315-cdf8-4831-2b258854e899.htm">IsUp(Keys)</a></td><td><div class="summary">
            Determines whether the specified key is up.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="b082b997-7969-bfdc-13c1-96319ce96273.htm">IsUp(MouseButtons)</a></td><td><div class="summary">
            Determines whether the specified button is up.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="9e67105e-71e0-3aa3-c533-3f195603e46a.htm">IsUp(Buttons, LogicalPlayerIndex)</a></td><td><div class="summary">
            Determines whether the specified button is up for the given player. 
            (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="ede4d260-6bcb-4e8b-d54b-f8c9587d1b98.htm">IsUp(Buttons, PlayerIndex)</a></td><td><div class="summary">
            Determines whether the specified button is up on the given game controller. 
            (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="488c6cdb-8a07-183a-3b42-787f7b614e6e.htm">SetAllHandled</a></td><td><div class="summary">
            Sets all "IsHandled" flags to the given value.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="f2db95f0-6597-ef5c-4a66-970c94262887.htm">SetGamePadHandled(PlayerIndex, Boolean)</a></td><td><div class="summary">
            Sets the <strong>IsGamePadHandled</strong> flags of a given game controller. 
            (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="8a7a2ee8-cc4c-f8aa-4d99-512d8a240e1f.htm">SetGamePadHandled(LogicalPlayerIndex, Boolean)</a></td><td><div class="summary">
            Sets the <strong>IsGamePadHandled</strong> flags for the given player. (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="aaef81df-be8b-aade-a464-ec7b8205b1a5.htm">SetLogicalPlayer</a></td><td><div class="summary">
            Assigns a game controller to a player. (Not available in Silverlight.)
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID3RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="0fbf3ff7-70eb-d890-91dc-6efe39f95ec9.htm">AccelerometerValue</a></td><td><div class="summary">
            Gets the accelerometer value. 
            (Only available in XNA Windows Phone builds.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="bba3c6c6-a910-4f02-8922-2e0641c3b2ab.htm">Commands</a></td><td><div class="summary">
            Gets the input commands.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="997a4539-519e-40b2-ba5f-6f3f61252a7c.htm">EnableMouseCentering</a></td><td><div class="summary">
            Gets or sets a value indicating whether the mouse position is reset in each frame.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="d46f07c0-36e7-3928-ea13-0c513623a999.htm">Gestures</a></td><td><div class="summary">
            Gets the detected touch gestures. (Not available in Silverlight.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="73ec89a2-6ade-d96d-6997-a6ff28bb932f.htm">IsAccelerometerActive</a></td><td><div class="summary">
            Gets a value indicating whether an accelerometer is connected and can be used. 
            (Only available in XNA Windows Phone builds.)
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="62de7439-102b-2ee7-55b7-0ad3a736b1ae.htm">IsAccelerometerHandled</a></td><td><div class="summary">
            Gets or sets a value indicating whether accelerometer input has already been handled.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="401b310b-6f7a-e15f-2eed-ce32d171f88a.htm">IsKeyboardHandled</a></td><td><div class="summary">
            Gets or sets a value indicating whether keyboard input has already been handled.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="6cd01efe-8e5e-72dd-795a-d726a320d57e.htm">IsMouseOrTouchHandled</a></td><td><div class="summary">
            Gets or sets a value indicating whether mouse or touch input has already been handled.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="7404fb88-3964-28e8-f490-b6314eddd035.htm">KeyboardState</a></td><td><div class="summary">
            Gets the state of the current keyboard state.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="577d80af-f1f2-28c4-1a0a-43846473c0d0.htm">MaxNumberOfPlayers</a></td><td><div class="summary">
            Gets the max number of players (= max number of game controllers that can be connected).
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="88757d50-e98d-a82e-36d4-52765b9446c2.htm">ModifierKeys</a></td><td><div class="summary">
            Gets the pressed modifier keys.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="191ae406-1b5d-53f7-a9f9-4108164782e6.htm">MousePosition</a></td><td><div class="summary">
            Gets or sets the mouse position.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="f3b2b173-b60b-987f-7e6c-7159505e5b27.htm">MousePositionDelta</a></td><td><div class="summary">
            Gets or sets the mouse position change since the last frame.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="840621af-34cd-3390-2eb2-e1d360da0be8.htm">MousePositionDeltaRaw</a></td><td><div class="summary">
            Gets the raw mouse position change since the last frame.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="d4f35860-618e-07f7-ebf4-a6fe755cf2e8.htm">MousePositionRaw</a></td><td><div class="summary">
            Gets the raw mouse position.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="25565510-4392-028b-f741-a63ea0be86c7.htm">MouseState</a></td><td><div class="summary">
            Gets the state of the current mouse state.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="68724246-1213-dcea-baf0-5c434a757494.htm">MouseWheelDelta</a></td><td><div class="summary">
            Gets a value representing the rotation change of the mouse wheel.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="a2032608-2f51-575a-8fc1-7f9da2441aed.htm">PressedKeys</a></td><td><div class="summary">
            Gets the pressed keys.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="248a1310-6397-ed2c-188f-9e7190d50fef.htm">PreviousKeyboardState</a></td><td><div class="summary">
            Gets the keyboard state of the last frame.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="5d592ef9-4283-e677-8672-533b722e0d51.htm">PreviousMouseState</a></td><td><div class="summary">
            Gets the mouse state of the last frame.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="7dcddb80-f179-c89e-c782-3b968d45a41c.htm">Settings</a></td><td><div class="summary">
            Gets or sets the settings that define input handling, timing, etc.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="8b4b2400-3383-8d97-b808-b81776092f61.htm">TouchCollection</a></td><td><div class="summary">
            Gets the touch collection. (Not available in Silverlight.)
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
            Note: Touch, accelerometer and gamepad input is not supported in Silverlight.
            (But those devices are supported on the Windows Phone.)
            </p><p>
            The input manager is the central method that should be used to check for user input. It 
            contains many convenience methods that allow to detected key/button presses and double-clicks.
            </p><p>
            Typically, many game components can handle the input. But often input should only be processed
            by the foremost game component (e.g. the top-most window). For this, game components can set 
            the flags <a href="62de7439-102b-2ee7-55b7-0ad3a736b1ae.htm">IsAccelerometerHandled</a>, <a href="1a7aaefe-b3d9-2177-ce37-434a0aac329c.htm">IsGamePadHandled(LogicalPlayerIndex)</a>, 
            <a href="401b310b-6f7a-e15f-2eed-ce32d171f88a.htm">IsKeyboardHandled</a>, and <a href="6cd01efe-8e5e-72dd-795a-d726a320d57e.htm">IsMouseOrTouchHandled</a> to indicate that 
            input has already been processed and other game components should ignore the input. These 
            flags are reset by the input service in each frame, but otherwise the input service itself 
            does not read this flags. It is up to the game components to decide whether they want to
            consider these flags or not. (If, for example, <a href="6cd01efe-8e5e-72dd-795a-d726a320d57e.htm">IsMouseOrTouchHandled</a> is set,
            methods like <a href="b03a208e-65c4-954c-6193-02dee5cae404.htm">IsDown(MouseButtons)</a> still work normally.)
            </p><p><strong>Logical Players and Game Controllers: </strong>The <a href="http://msdn2.microsoft.com/en-us/library/bb198456" target="_blank">PlayerIndex</a> in XNA
            identifies a game controller. Beware that "Player One" may not be using the game controller
            that is assigned to <strong>PlayerIndex.One</strong>! A game needs to detect which player uses
            which game controller at runtime. (See example below.)
            </p><p>
            The <a href="19791639-1b96-eef1-c9bb-095b05f994cc.htm">LogicalPlayerIndex</a> identifies a player. <a href="aaef81df-be8b-aade-a464-ec7b8205b1a5.htm">SetLogicalPlayer(LogicalPlayerIndex, Nullable<span id="LSTF6CB7118_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF6CB7118_0?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>PlayerIndex<span id="LSTF6CB7118_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF6CB7118_1?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a> must
            be called to assign a game controller to a player. Gamepad input can be queried using the 
            <a href="http://msdn2.microsoft.com/en-us/library/bb198456" target="_blank">PlayerIndex</a> to get the input of a certain game controller or the 
            <a href="19791639-1b96-eef1-c9bb-095b05f994cc.htm">LogicalPlayerIndex</a> to get the input of a certain player.
            <strong>LogicalPlayerIndex.Any</strong> can be used to query the game controllers of all 
            players. Note that game controllers that are not associated with any player are ignored when
            <strong>LogicalPlayerIndex.Any</strong> is used.
            </p><p><strong>IMPORTANT: </strong>The methods that take the <a href="19791639-1b96-eef1-c9bb-095b05f994cc.htm">LogicalPlayerIndex</a> as a
            parameter return default values when no game controller is assigned to the specified player.
            Be sure to call 
            <a href="aaef81df-be8b-aade-a464-ec7b8205b1a5.htm">SetLogicalPlayer(LogicalPlayerIndex, Nullable<span id="LSTF6CB7118_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF6CB7118_2?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>PlayerIndex<span id="LSTF6CB7118_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF6CB7118_3?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>)</a> to assign game controllers to players.
            </p><p><strong>IsUp, IsDown and IsPressed: </strong>The input service defines simple methods that
            allow to check if a key or button is currently held down or not. This methods are called 
            <strong>IsDown</strong> and <strong>IsUp</strong>. The methods <strong>IsPressed</strong> and
            <strong>IsReleased</strong> check whether a key or button was pressed down or released exactly
            in this frame. That means, if a key is not held down, <strong>IsUp</strong> returns true and
            all other methods return false. Then when the key is pressed, <strong>IsDown
            </strong> is true and <strong>IsPressed</strong> is true. If the key is still held down in the
            next frame, <strong>IsDown</strong> is still true but <strong>IsPressed</strong> is false.
            </p><p><strong>Double-Clicks: </strong>The methods <strong>IsDoubleClick</strong> can be used to
            detect double-clicks. The two clicks must be within the 
            <a href="c8407ff4-b2fb-5f6c-89cf-83da8ccbd87d.htm">DoubleClickTime</a> to count as double-click. For GUI controls it is
            also necessary to check if both clicks were in the same region - but this is not checked by
            the input service and is left to the GUI system.
            </p><p><strong>Virtual Key/Button Presses: </strong>When a key or button is held down for longer than
            <a href="2ac89379-5c1e-95c0-031e-fe84742d8d07.htm">RepetitionDelay</a> the input service starts to create "IsPressed"
            events at a frequency defined by <a href="87c0d419-e672-1f92-0491-cedc9a4465d4.htm">RepetitionInterval</a> - this is
            convenient for text input in text box controls and text editors. The property 
            <a href="a2032608-2f51-575a-8fc1-7f9da2441aed.htm">PressedKeys</a> contains a list of all keys that where pressed down in the current
            frame - including the virtual presses created by keys/buttons that were held down for a long
            time. In the <strong>IsPressed</strong> methods the second parameter allows to specify if
            virtual key/button repetitions events should be included or not.
            </p><p><strong>Accelerometer: </strong>The accelerometer can only be used on the Windows Phone 7
            device. In the Windows Phone 7 emulator the arrow keys and the space key can be used to
            create accelerometer readings.
            </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID5RBSection" class="collapsibleSection">
            At runtime an application needs to figure out which game controller is used to control the 
            game. This is typically done by prompting the user to press Start or button A at the start 
            screen. Include the following code in the <strong>Update</strong> method of the game:
            <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADABA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADABA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADABA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">if</span> (_inputManager.GetLogicalPlayer(LogicalPlayerIndex.One) == <span class="highlight-keyword">null</span>)
{
  <span class="highlight-comment">// Wait until the user presses A or START on any connected gamepad.</span>
  <span class="highlight-keyword">for</span> (<span class="highlight-keyword">var</span> controller = PlayerIndex.One; controller &lt;= PlayerIndex.Four; controller++)
  {
    <span class="highlight-keyword">if</span> (_inputManager.IsDown(Buttons.A, controller) || _inputManager.IsDown(Buttons.Start, controller))
    {
      <span class="highlight-comment">// A or START was pressed. Assign the controller to the first "logical player".</span>
      _inputManager.SetLogicalPlayer(LogicalPlayerIndex.One, controller);
      <span class="highlight-keyword">break</span>;
    }
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADABA");</script>
            All subsequent methods can use <strong>LogicalPlayerIndex.One</strong> to query the input of 
            the player.
            </div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID6RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="02bd96b5-c091-2df3-73d5-fbb8056b8e03.htm">DigitalRune.Game.Input Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>