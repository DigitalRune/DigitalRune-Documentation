<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>FAQ</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="e32cab3b-cc7c-42ee-8ec9-23dd4467edd0" /><meta name="Description" content="Here is a collection of frequently asked questions, common problems and solutions." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="335dc86a-c68d-4d7b-8641-81dd80de5e76.htm" title="DigitalRune Geometry" tocid="335dc86a-c68d-4d7b-8641-81dd80de5e76">DigitalRune Geometry</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="1510119e-5c7c-4ebc-851d-684976c1fb29.htm" title="Overview" tocid="1510119e-5c7c-4ebc-851d-684976c1fb29">Overview</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7945ac67-dffc-4197-9fbf-58a9b68c0ea1.htm" title="Definitions and Conventions" tocid="7945ac67-dffc-4197-9fbf-58a9b68c0ea1">Definitions and Conventions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="d995ee69-0650-4993-babd-1cdb1fd8fd7a.htm" title="Pose (Position and Orientation)" tocid="d995ee69-0650-4993-babd-1cdb1fd8fd7a">Pose (Position and Orientation)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ed50b52b-a4d4-4192-bc72-0061085466d5.htm" title="Geometric Objects and Shapes" tocid="ed50b52b-a4d4-4192-bc72-0061085466d5">Geometric Objects and Shapes</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="629ec6f3-8533-4ef9-94d0-220ef375387c.htm" title="Collision Detection" tocid="629ec6f3-8533-4ef9-94d0-220ef375387c">Collision Detection</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="9df3b4b6-1218-43b8-be9e-319d97a5b9a0.htm" title="Multithreading" tocid="9df3b4b6-1218-43b8-be9e-319d97a5b9a0">Multithreading</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="4a3324b2-fc11-41bf-bb16-1e8ab644f1c4.htm" title="Resource Pooling" tocid="4a3324b2-fc11-41bf-bb16-1e8ab644f1c4">Resource Pooling</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7af0a749-83f9-437b-88fc-56f70c0c6dd2.htm" title="XNA Framework Support" tocid="7af0a749-83f9-437b-88fc-56f70c0c6dd2">XNA Framework Support</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="76e11a96-42a4-495c-b8f8-6164a67d05d5.htm" title="Articles" tocid="76e11a96-42a4-495c-b8f8-6164a67d05d5">Articles</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="e32cab3b-cc7c-42ee-8ec9-23dd4467edd0.htm" title="FAQ" tocid="e32cab3b-cc7c-42ee-8ec9-23dd4467edd0">FAQ</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="3cbb67a9-77ff-44cd-be2a-618e0a2d89df.htm" title="Class Diagrams" tocid="3cbb67a9-77ff-44cd-be2a-618e0a2d89df">Class Diagrams</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">FAQ</td></tr></table><span class="introStyle"></span><div class="introduction"><p>Here is a collection of frequently asked questions, common problems and solutions.</p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#CreatingShapes">How can I define collision shapes for 3D models?</a></li><li class="outlineSectionEntry"><a href="#AllRayHits">How can I get ALL ray hits of a ray and a triangle mesh?</a></li><li class="outlineSectionEntry"><a href="#RayMesh">How can I efficiently perform a lot of ray casts against a single mesh?</a></li><li class="outlineSectionEntry"><a href="#TriangleToDcelMesh">Cannot convert TriangleMesh to DcelMesh</a></li><li class="outlineSectionEntry"><a href="#ModelToTriangleMesh">How can I convert an XNA Model to a TriangleMesh?</a></li><li class="outlineSectionEntry"><a href="#WhichPartition">Which spatial partition should I use?</a></li><li class="outlineSectionEntry"><a href="#DynamicSpatialPartition">How can I manage dynamic objects in a spatial partition?</a></li></ul></div><div class="collapsibleAreaRegion" id="CreatingShapes"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How can I define collision shapes for 3D models?</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
                    We are working on an editor to simplify and automate this process. Without an editor you
                    can use one of following approaches.
                </p><ul><li>
                        The very lazy approach: Just use the triangle mesh. Of course, this is not so good for
                        performance and simulation stability (convex shapes behave better).
                    </li><li>
                        Convex Hulls: Compute simplified convex hulls for the meshes at runtime or preferably
                        in the XNA content pipeline.
                    </li><li>
                        Manually placing collision shapes in a 3d modeling tool of your choice. You can create a
                        separate model that defines only the collision shapes. Or create the collision shapes
                        in the same model and use a naming convention to identify collision shapes. Or use a
                        custom export script. Etc.
                    </li><li>
                        Automatic Approximate Convex Decomposition of meshes using the
                        <a href="22421ba8-78d8-e5d7-8d47-9fe9b6e222b7.htm">ConvexDecomposition</a>
                        class.
                    </li><li>
                        Creating bounding shapes using methods of the
                        <a href="a8ec189f-4272-52a6-1f82-4847245b09fb.htm">GeometryHelper</a>
                        (e.g.
                        <a href="9933fff1-c4f2-1f10-00e5-5a463cf3713c.htm">CreateBoundingShape</a>,
                        <a href="d98b11b5-bc2c-95c3-3070-bcee94993a5f.htm">ComputeBoundingBox</a>, etc.).
                    </li></ul><p>
                    The DigitalRune samples demonstrate several different ways to create shapes for models.
                </p></div><div class="collapsibleAreaRegion" id="AllRayHits"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How can I get ALL ray hits of a ray and a triangle mesh?</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    Usually, the collision detection reports only a single contact between a
                    <a href="df7958cc-e30b-4c55-34e4-b6b5ddf7eaa2.htm">RayShape</a>
                    and a
                    <a href="2701ba79-cac5-5865-eb8f-1da98af75b2b.htm">TriangleMeshShape</a>.
                    This is by design. If the ray hits several features (triangles) of a single object, only
                    the first hit is returned.
                    (Note: <a href="160ebbd3-52a3-a971-8ede-d6fe7e5ec2cb.htm">RayShape<span id="LSTF792B659_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>StopsAtFirstHit</a>
                    is only relevant if the ray hits several different objects.)
                </p><p>
                    If you want to find all hit triangles, check out
                    <a href="#RayMes">How can I efficiently perform a lot of ray casts against a single mesh?</a>.
                </p></div><div class="collapsibleAreaRegion" id="RayMesh"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How can I efficiently perform a lot of ray casts against a single mesh?</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    Use a
                    <a href="2701ba79-cac5-5865-eb8f-1da98af75b2b.htm">TriangleMeshShape</a>
                    with an
                    <a href="f4683187-36cf-0bfe-729a-35f5e86e72f3.htm">AabbTree<span id="LSTF792B659_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_1?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_2?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                    or a
                    <a href="aaaeb0fd-cd1b-2b7a-8fca-7772b7d1fe33.htm">CompressedAabbTree</a>
                    for the static mesh. (You have to experiment which tree type is faster. The
                    <a href="aaaeb0fd-cd1b-2b7a-8fca-7772b7d1fe33.htm">CompressedAabbTree</a>
                    can be slower than the
                    <a href="f4683187-36cf-0bfe-729a-35f5e86e72f3.htm">AabbTree<span id="LSTF792B659_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_3?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_4?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                    because it has to do a bit more computations, but it could also be faster because it uses
                    less memory and generates less cache misses.)
                </p><p>
                    Create a
                    <a href="2fe283ea-8bb7-af8a-8a6e-4c6d859142c6.htm">Ray</a>
                    in the local space of the mesh.
                    Call
                    <strong>TriangleMeshShape.Partition.GetOverlaps(Ray)</strong>
                    to find all triangles which potentially overlap the ray.
                    Use
                    <a href="d5392075-a834-1639-d86d-b41cc790f8b7.htm">GeometryHelper<span id="LSTF792B659_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_5?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>GetContact</a>
                    to test the returned triangles vs. ray.
                    The returned contacts are in the local space of the triangle mesh object. Don't forget to
                    convert them back to world space if necessary.
                </p></div><div class="collapsibleAreaRegion" id="TriangleToDcelMesh"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Cannot convert TriangleMesh to DcelMesh</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
                    The winding order is relevant for the DCEL mesh. The
                    <a href="093dcdb5-8d09-bd0a-ea32-09c8f2d5262e.htm">DcelMesh<span id="LSTF792B659_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_6?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>FromTriangleMesh</a>
                    method currently assumes that all triangles in the mesh are connected. Unconnected
                    submeshes are not allowed. Two triangles are connected if they share an edge and if the
                    winding order matches. - In other words, the triangle (A, B, C) is connected to the
                    triangle (C, B, D) but not to the triangle (B, C, D).
                </p></div><div class="collapsibleAreaRegion" id="ModelToTriangleMesh"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How can I convert an XNA Model to a TriangleMesh?</span></div><div id="ID5RBSection" class="collapsibleSection"><p>
                    You can use the method
                    <a href="fb8d5d64-bebf-2c84-1d99-0d53670addb8.htm">TriangleMesh<span id="LSTF792B659_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_7?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>FromModel</a>.
                    This method works very similar to this code snippet:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID4EAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID4EAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID4EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID4EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> TriangleMesh FromModel(Model model)
{
  <span class="highlight-keyword">var</span> triangleMesh = <span class="highlight-keyword">new</span> TriangleMesh();

  <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> modelMesh <span class="highlight-keyword">in</span> model.Meshes)
  {
    <span class="highlight-comment">// Get bone transformation.</span>
    Matrix transform = GetAbsoluteTransform(modelMesh.ParentBone);

    <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> modelMeshPart <span class="highlight-keyword">in</span> modelMesh.MeshParts)
    {
      <span class="highlight-comment">// Get vertex element info.</span>
      <span class="highlight-keyword">var</span> vertexDeclaration = modelMeshPart.VertexBuffer.VertexDeclaration;
      <span class="highlight-keyword">var</span> vertexElements = vertexDeclaration.GetVertexElements();

      <span class="highlight-comment">// Get the vertex positions.</span>
      <span class="highlight-keyword">var</span> positionElement = vertexElements.First(e =&gt; e.VertexElementUsage == VertexElementUsage.Position);
      <span class="highlight-keyword">if</span> (positionElement.VertexElementFormat != VertexElementFormat.Vector3)
        <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> NotSupportedException(<span class="highlight-literal">"For vertex positions only VertexElementFormat.Vector3 is supported."</span>);
      <span class="highlight-keyword">var</span> positions = <span class="highlight-keyword">new</span> Vector3[modelMeshPart.NumVertices];
      modelMeshPart.VertexBuffer.GetData(
        modelMeshPart.VertexOffset * vertexDeclaration.VertexStride + positionElement.Offset,
        positions,
        <span class="highlight-number">0</span>,
        modelMeshPart.NumVertices,
        vertexDeclaration.VertexStride);

      <span class="highlight-comment">// Apply bone transformation.</span>
      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; positions.Length; i++)
        positions[i] = Vector3.Transform(positions[i], transform);

      <span class="highlight-comment">// Get indices.</span>
      <span class="highlight-keyword">var</span> indexElementSize = (modelMeshPart.IndexBuffer.IndexElementSize == IndexElementSize.SixteenBits) ? <span class="highlight-number">2</span> : <span class="highlight-number">4</span>;
      <span class="highlight-keyword">if</span> (indexElementSize != <span class="highlight-number">2</span>)
        <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> NotSupportedException(<span class="highlight-literal">"Only 16 bit indices are supported."</span>);

      <span class="highlight-keyword">var</span> indices = <span class="highlight-keyword">new</span> <span class="highlight-keyword">short</span>[modelMeshPart.PrimitiveCount * <span class="highlight-number">3</span>];
      modelMeshPart.IndexBuffer.GetData(
        modelMeshPart.StartIndex * <span class="highlight-number">2</span>,
        indices,
        <span class="highlight-number">0</span>,
        modelMeshPart.PrimitiveCount * <span class="highlight-number">3</span>);

      <span class="highlight-comment">// Remember the number of vertices already in the mesh.</span>
      <span class="highlight-keyword">int</span> vertexCount = triangleMesh.Vertices.Count;

      <span class="highlight-comment">// Add the vertices of the current modelMeshPart.</span>
      <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> p <span class="highlight-keyword">in</span> positions)
        triangleMesh.Vertices.Add((Vector3F)p);

      <span class="highlight-comment">// Add indices to triangle mesh.</span>
      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; modelMeshPart.PrimitiveCount; i++)
      {
        <span class="highlight-comment">// The three indices of the next triangle.</span>
        <span class="highlight-comment">// We add 'vertexCount' because the triangleMesh already contains other mesh parts.</span>
        <span class="highlight-keyword">var</span> i0 = indices[i * <span class="highlight-number">3</span> + <span class="highlight-number">0</span>] + vertexCount;
        <span class="highlight-keyword">var</span> i1 = indices[i * <span class="highlight-number">3</span> + <span class="highlight-number">1</span>] + vertexCount;
        <span class="highlight-keyword">var</span> i2 = indices[i * <span class="highlight-number">3</span> + <span class="highlight-number">2</span>] + vertexCount;

        triangleMesh.Indices.Add(i0);
        triangleMesh.Indices.Add(i2);     <span class="highlight-comment">// DigitalRune Geometry uses other winding order!</span>
        triangleMesh.Indices.Add(i1);
      }
    }
  }

  <span class="highlight-keyword">return</span> triangleMesh;
}


<span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> Matrix GetAbsoluteTransform(ModelBone bone)
{
  <span class="highlight-keyword">if</span> (bone == <span class="highlight-keyword">null</span>)
    <span class="highlight-keyword">return</span> Matrix.Identity;
  <span class="highlight-keyword">return</span> bone.Transform * GetAbsoluteTransform(bone.Parent);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID4EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="WhichPartition"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Which spatial partition should I use?</span></div><div id="ID6RBSection" class="collapsibleSection"><p>
                    Our spatial partitions are used in several places:
                </p><ul><li><p><a href="97824f84-8d44-f735-6c6f-f357b946cf23.htm">CollisionDomain<span id="LSTF792B659_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_8?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>BroadPhase</a>:
                        </p><p>
                            In the broad phase the collision detection finds potential candidate pairs. This is
                            done using a spatial partitioning method with
                            <a href="3d6870f2-973c-d159-bf1f-a7102fc056e2.htm">EnableSelfOverlaps</a>
                            = true.
                        </p><p>
                            Recommended types are:
                        </p><ul><li><a href="98f7f71c-8b43-f5ce-390f-e7cc1df9a694.htm">SweepAndPruneSpace<span id="LSTF792B659_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_9?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_10?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                                (Default):
                                <ul class="noBullet"><li>
                                        ++ Very fast and efficient for computing self-overlaps.
                                    </li><li>
                                        - Insertion and removal of objects is slow. (Though this may be improved in future versions.)
                                    </li><li>
                                        - Slow when using a lot of large
                                        <a href="df7958cc-e30b-4c55-34e4-b6b5ddf7eaa2.htm">RayShape</a>s
                                        or
                                        ray queries (<a href="25e7706d-9a79-8fab-ff06-bfdd8cddf85d.htm">GetOverlaps</a>).
                                    </li><li /><li /></ul></li><li><a href="c3982186-96d8-a0ef-85aa-5a3518afc512.htm">DualPartition<span id="LSTF792B659_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_11?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_12?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>:
                                <ul class="noBullet"><li>
                                        + Fast for computing self-overlaps, but in general not as efficient as
                                        <a href="98f7f71c-8b43-f5ce-390f-e7cc1df9a694.htm">SweepAndPruneSpace<span id="LSTF792B659_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_13?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_14?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.
                                    </li><li>
                                        + Insertion and removal of objects is fast.
                                    </li><li>
                                        + Implements
                                        <a href="78268a24-f3a9-f4d6-34b3-83024823413b.htm">ISupportFrustumCulling<span id="LSTF792B659_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_15?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_16?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>,
                                        which can be used for manual frustum culling.
                                    </li><li>
                                        + Fast ray queries.
                                    </li></ul></li></ul></li><li><p>Compound Collision Shapes:</p><p>
                            The
                            <a href="467bd69b-e7ce-490d-fedd-a9495832769c.htm">CompositeShape</a>
                            and the
                            <a href="2701ba79-cac5-5865-eb8f-1da98af75b2b.htm">TriangleMeshShape</a>
                            are shapes that consist of several other objects. When the number of shapes exceeds a
                            certain threshold (needs to be found experimentally), a spatial partition needs to be
                            set to improve collision detection. Suitable types are:
                        </p><ul><li><a href="f4683187-36cf-0bfe-729a-35f5e86e72f3.htm">AabbTree<span id="LSTF792B659_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_17?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_18?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>:
                                <ul class="noBullet"><li>
                                        + Fast for static meshes.
                                    </li><li>
                                        -- Not suited for dynamic (deformable) shapes.
                                    </li></ul></li><li><a href="aaaeb0fd-cd1b-2b7a-8fca-7772b7d1fe33.htm">CompressedAabbTree</a>:
                                <ul class="noBullet"><li>
                                        ++ Minimal memory requirements.
                                    </li><li>
                                        + Fast for static meshes, more cache friendly than AabbTree.
                                    </li><li>
                                        - Less precision than AabbTree.
                                    </li><li>
                                        -- Not suited for dynamic (deformable) shapes.
                                    </li><li>
                                        -- Cannot be used with shapes of infinite size.
                                    </li></ul></li><li><a href="1f4f5b35-b8ba-3a4d-6008-70fea0e6c161.htm">DynamicAabbTree<span id="LSTF792B659_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_19?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_20?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>:
                                <ul class="noBullet"><li>
                                        ++ Fast for dynamic (deformable) shapes.
                                    </li><li>
                                        ++ Fast for ray queries and frustum culling.
                                    </li></ul></li><li><a href="cd77f290-976a-b115-8b36-5b33df44b62b.htm">AdaptiveAabbTree<span id="LSTF792B659_21"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_21?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_22"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_22?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>:
                                <ul class="noBullet"><li>
                                        ++ Fast for dynamic (deformable) shapes consisting of a large number of objects.
                                    </li></ul></li></ul></li></ul><p>
                    Recommendations:
                </p><p>
                    For the collision detection broad phase use the
                    <a href="98f7f71c-8b43-f5ce-390f-e7cc1df9a694.htm">SweepAndPruneSpace<span id="LSTF792B659_23"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_23?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_24"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_24?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.
                    Only if you make a lot of ray queries and/or use frustum culling use a
                    <a href="c3982186-96d8-a0ef-85aa-5a3518afc512.htm">DualPartition<span id="LSTF792B659_25"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_25?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_26"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_26?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.
                </p><ul><li>
                        Use the
                        <a href="aaaeb0fd-cd1b-2b7a-8fca-7772b7d1fe33.htm">CompressedAabbTree</a>
                        for static meshes.
                    </li><li>
                        Use the
                        <a href="1f4f5b35-b8ba-3a4d-6008-70fea0e6c161.htm">DynamicAabbTree<span id="LSTF792B659_27"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_27?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_28"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_28?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                        for dynamic meshes.
                    </li></ul><p>
                    Start using these partitions. Once you have a representative level running in your game,
                    you can test other partition types and see whether they perform better.
                </p><p>
                    Note: Our library is very flexible. You can, for example, use an
                    <a href="cd77f290-976a-b115-8b36-5b33df44b62b.htm">AdaptiveAabbTree<span id="LSTF792B659_29"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_29?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_30"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_30?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                    as the collision detection broad phase, or the
                    <a href="c3982186-96d8-a0ef-85aa-5a3518afc512.htm">DualPartition<span id="LSTF792B659_31"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_31?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_32"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_32?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                    for a triangle mesh. Though in a typical game these combinations will perform worse. For example:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID4EAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID4EAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID4EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID4EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// This is the default:</span>
_simulation.CollisionDomain.BroadPhase = <span class="highlight-keyword">new</span> SweepAndPruneSpace&lt;CollisionObject&gt;();

<span class="highlight-comment">// Here are other examples:</span>
_simulation.CollisionDomain.BroadPhase = <span class="highlight-keyword">new</span> DualPartition&lt;CollisionObject&gt;();
_simulation.CollisionDomain.BroadPhase = <span class="highlight-keyword">new</span> DynamicAabbTree&lt;CollisionObject&gt;
{ EnableMotionPrediction = <span class="highlight-keyword">true</span>, OptimizationPerFrame = <span class="highlight-number">0.01</span>f };
_simulation.CollisionDomain.BroadPhase = <span class="highlight-keyword">new</span> AdaptiveAabbTree&lt;CollisionObject&gt;();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID4EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="DynamicSpatialPartition"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How can I manage dynamic objects in a spatial partition?</span></div><div id="ID7RBSection" class="collapsibleSection"><p>
                    Use a
                    <a href="1f4f5b35-b8ba-3a4d-6008-70fea0e6c161.htm">DynamicAabbTree<span id="LSTF792B659_33"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_33?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTF792B659_34"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTF792B659_34?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>.
                    If the AABB of an item in tree is changed at runtime, you must invalidate the tree:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID4EADABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID4EADABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID4EADABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID4EADABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">tree.Invalidate(indexOfChangedAabb);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID4EADABAAA");</script><p>
                    In each frame call:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID4EABABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID4EABABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID4EABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID4EABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">tree.Update(<span class="highlight-keyword">false</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID4EABABAAA");</script><p>
                    This rebuilds or incrementally optimizes the tree when needed. (It does nothing if no
                    AABBs have changed and no objects were added or removed.) If you do not make this call,
                    then this will be done automatically in
                    <a href="25e7706d-9a79-8fab-ff06-bfdd8cddf85d.htm">GetOverlaps</a>.
                    But it is better to control manually when this happens.
                </p></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>