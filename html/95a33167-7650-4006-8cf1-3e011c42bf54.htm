<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>How To: Create a Start Value Effector</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="95a33167-7650-4006-8cf1-3e011c42bf54" /><meta name="Description" content="This section explains how to create a start value effector (an effector that initializes particle parameters for newly created particles)." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="5044112e-c86d-4d85-87d0-b567a0361c21.htm" title="DigitalRune Particles" tocid="5044112e-c86d-4d85-87d0-b567a0361c21">DigitalRune Particles</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="25e7a7a0-265e-4c12-9e41-be23852b39cf.htm" title="&quot;How To&quot; Articles" tocid="25e7a7a0-265e-4c12-9e41-be23852b39cf">"How To" Articles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="60bdbd87-fecb-42e2-bdf3-3966602bb9a5.htm" title="How To: Add DigitalRune Particles to a Project" tocid="60bdbd87-fecb-42e2-bdf3-3966602bb9a5">How To: Add DigitalRune Particles to a Project</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="2deefa98-6d2a-4ada-a51d-95a2625849df.htm" title="How To: Create a Simple Particle Effect" tocid="2deefa98-6d2a-4ada-a51d-95a2625849df">How To: Create a Simple Particle Effect</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="2e27afb1-6482-4f56-9497-ca903aef3c9f.htm" title="How To: Create a Particle Effector" tocid="2e27afb1-6482-4f56-9497-ca903aef3c9f">How To: Create a Particle Effector</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="5b005b7b-e103-4da2-8d18-cddce0a5bea7.htm" title="How To: Create a Particle Emitter" tocid="5b005b7b-e103-4da2-8d18-cddce0a5bea7">How To: Create a Particle Emitter</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="95a33167-7650-4006-8cf1-3e011c42bf54.htm" title="How To: Create a Start Value Effector" tocid="95a33167-7650-4006-8cf1-3e011c42bf54">How To: Create a Start Value Effector</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="f9e9b1f3-4850-437f-aa2b-a6b4c236f196.htm" title="How To: Clamp a Particle Parameter" tocid="f9e9b1f3-4850-437f-aa2b-a6b4c236f196">How To: Clamp a Particle Parameter</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">How To: Create a Start Value Effector</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
                This section explains how to create a <em>start value effector</em> (an effector that initializes
                particle parameters for newly created particles).
            </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />What is an start value effector?</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
                    Most particle systems have varying particle parameters. These are values (such as
                    "Position", "Size", etc.) that are stored per particle. When new particles are created,
                    someone must initialize the values of varying parameters. This is the job of the
                    <em>start value effector</em>.
                </p><p>
                    The other type of particle parameters are uniform parameters. Uniform parameters are
                    shared by the particle system and all particles. They are usually initialized when the
                    particle system is created or reset. Start value effectors can also be used to initialize
                    uniform parameters, but in most cases it is easier to set them directly.
                </p><p>
                    Start value effectors are derived from
                    <a href="98aac0ca-d8d4-a3c8-dca3-b0579f335f85.htm">ParticleEffector</a>.
                    Whenever new particles are emitted, a start value effector sets the initial values
                    of one or more varying particle parameters. This article shows how to implement a
                    start value effector that initializes a single configurable particle parameter.
                    (Please note: DigitalRune Particles contains a
                    <a href="787a3f3a-7492-3e51-7ae6-0bbc80b73852.htm">StartValueEffector<span id="LST6567D801_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6567D801_0?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST6567D801_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6567D801_1?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                    that provides the same functionality.)
                </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating a start value effector</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    First, we create a new class that inherits from
                    <a href="98aac0ca-d8d4-a3c8-dca3-b0579f335f85.htm">ParticleEffector</a>.
                    Particle effectors can be added to a particle system, and they are
                    called whenever the particle system is initialized or updated.
                    Here is the empty class and the namespaces that we will need:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EARACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EARACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EARACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EARACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> DigitalRune.Mathematics.Statistics;
<span class="highlight-keyword">using</span> DigitalRune.Particles;

<span class="highlight-keyword">namespace</span> MyNamespace
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyStartValueEffector&lt;T&gt; : ParticleEffector
  {
    <span class="highlight-comment">// TODO: Add code.</span>
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EARACAAA");</script><p>
                    The class is a generic where the type parameter <em>T</em>
                    is the type of the particle parameter. Particle parameters are identified by
                    their name - a string that must be unique within a particle system. Let's add
                    a property to the particle effector that lets the user set the particle parameter
                    that should be initialized:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAPACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAPACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAPACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAPACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[ParticleParameter(ParticleParameterUsage.Out)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Parameter { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAPACAAA");</script><p>
                    The
                    <a href="79a959a4-ae44-582a-4f3d-f87e28833e30.htm">ParticleParameterAttribute</a>
                    provides meta-information for particle editors and validation.
                </p><p>
                    How do we determine the start values for new particles? Usually each particle
                    should get a random value (e.g. a random position in sphere, a random color,
                    a random mass, etc.). <a href="2ac58586-0d4f-4625-bf4c-fc32591a5304.htm">DigitalRune Mathematics</a>
                    provides random value distributions (see class
                    <a href="1b5d21f0-13c7-5517-7388-8bcb199b63d9.htm">Distribution<span id="LST6567D801_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6567D801_2?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST6567D801_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6567D801_3?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                    and derived types). A <a href="1b5d21f0-13c7-5517-7388-8bcb199b63d9.htm">Distribution<span id="LST6567D801_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6567D801_4?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST6567D801_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6567D801_5?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                    returns random values within a defined range that follow a certain probability
                    distribution.
                </p><p>
                    Let's add a property to allow the user to set the
                    <a href="1b5d21f0-13c7-5517-7388-8bcb199b63d9.htm">Distribution<span id="LST6567D801_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6567D801_6?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST6567D801_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6567D801_7?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                    that should be used. As a fallback, in case the user does not want to use random values,
                    let's also add a property "DefaultValue". This value will be applied to all particles if
                    no random value distribution is specified.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EALACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EALACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EALACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EALACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> Distribution&lt;T&gt; Distribution { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

<span class="highlight-keyword">public</span> T DefaultValue { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EALACAAA");</script><p>
                    Particle effectors should be cloneable. The following two methods must be
                    overridden to support cloning:
                    <a href="3e0436a8-a377-0c63-f4b0-22ce7fe568bd.htm">CreateInstanceCore</a>
                    must return a new instance of the particle emitter and
                    <a href="b33385e0-f83d-16cd-2f03-d7e67be006a4.htm">CloneCore</a>
                    must copy all important properties:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAJACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAJACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAJACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAJACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> ParticleEffector CreateInstanceCore()
{
  <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> MyStartValueEffector&lt;T&gt;();
}

<span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> CloneCore(ParticleEffector source)
{
  <span class="highlight-keyword">base</span>.CloneCore(source);

  <span class="highlight-keyword">var</span> sourceTyped = (MyStartValueEffector&lt;T&gt;)source;
  Parameter = sourceTyped.Parameter;
  Distribution = sourceTyped.Distribution;
  DefaultValue = sourceTyped.DefaultValue;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAJACAAA");</script><p>
                    The base class <a href="98aac0ca-d8d4-a3c8-dca3-b0579f335f85.htm">ParticleEffector</a>
                    provides several virtual methods that can be overridden in derived classes.
                    These methods will be automatically called by the particle system to which
                    the effector is added. In
                    <a href="7543215c-6c1f-c910-3651-22bb21f8f99d.htm">OnRequeryParameters</a>
                    the particle effector can query the required particle parameters and cache
                    the references. This method is called before the particle system is updated
                    the first time, and then every time the particle parameters change and need
                    to be requeried:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAHACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAHACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAHACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAHACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> IParticleParameter&lt;T&gt; _parameter;

<span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnRequeryParameters()
{
  _parameter = ParticleSystem.Parameters.Get&lt;T&gt;(Parameter);      
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAHACAAA");</script><p><a href="6daf5d22-d32e-3de2-17f1-b1cde78c1d6b.htm">OnInitialize</a>
                    is called after
                    <a href="7543215c-6c1f-c910-3651-22bb21f8f99d.htm">OnRequeryParameters</a>
                    when the particle system is updated for the first time, and whenever
                    the particle system is reset. In this method the internal state of the particle
                    effector should be reset and uniform particle parameters should be set to
                    their start values.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAFACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAFACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnInitialize()
{
  <span class="highlight-keyword">if</span> (_parameter != <span class="highlight-keyword">null</span> &amp;&amp; _parameter.IsUniform)
  {
    <span class="highlight-comment">// Initialize uniform parameter.</span>
    <span class="highlight-keyword">var</span> distribution = Distribution;
    <span class="highlight-keyword">if</span> (distribution != <span class="highlight-keyword">null</span>)
      _parameter.DefaultValue = distribution.Next(ParticleSystem.Random);
    <span class="highlight-keyword">else</span>
      _parameter.DefaultValue = DefaultValue;
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFACAAA");</script><p><a href="97f514fa-1854-32d6-07eb-5d716a48f9ee.htm">OnUninitialize</a>
                    is called when an effector is removed from a particle system. In this method
                    all resources and references to external objects should be released.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EADACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EADACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUninitialize()
{
  _parameter = <span class="highlight-keyword">null</span>;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADACAAA");</script><p>
                    The base class
                    <a href="98aac0ca-d8d4-a3c8-dca3-b0579f335f85.htm">ParticleEffector</a>
                    also provides a virtual method that is called whenever new particles were
                    added to the system: <a href="502dd2c6-7519-d415-09b5-6653a7162609.htm">OnInitializeParticles</a>.
                    In this method the start values of varying particle parameters should be set.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EABACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnInitializeParticles(<span class="highlight-keyword">int</span> startIndex, <span class="highlight-keyword">int</span> count, <span class="highlight-keyword">object</span> emitter)
{
  <span class="highlight-keyword">if</span> (_parameter == <span class="highlight-keyword">null</span>)
    <span class="highlight-keyword">return</span>;

  T[] values = _parameter.Values;
  <span class="highlight-keyword">if</span> (values == <span class="highlight-keyword">null</span>)
  {
    <span class="highlight-comment">// Parameter is uniform. Uniform parameters are handled in OnInitialize().</span>
    <span class="highlight-keyword">return</span>;
  }

  <span class="highlight-comment">// Parameter is a varying parameter.</span>
  <span class="highlight-keyword">var</span> distribution = Distribution;
  <span class="highlight-keyword">if</span> (distribution != <span class="highlight-keyword">null</span>)
  {
    <span class="highlight-keyword">var</span> random = ParticleSystem.Random;
    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = startIndex; i &lt; startIndex + count; i++)
      values[i] = distribution.Next(random);
  }
  <span class="highlight-keyword">else</span>
  {
    <span class="highlight-keyword">var</span> startValue = DefaultValue;
    <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = startIndex; i &lt; startIndex + count; i++)
      values[i] = startValue;
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABACAAA");</script><p>
                    The code above is all that is needed for a start value effector. It is important to note
                    that the effector can be used to initialize both, uniform and varying, particle parameters.
                    Uniform particle parameters are initialized in
                    <a href="6daf5d22-d32e-3de2-17f1-b1cde78c1d6b.htm">OnInitialize</a>
                    whenever the particle system is reset. Varying particle parameters are
                    initialized in
                    <a href="502dd2c6-7519-d415-09b5-6653a7162609.htm">OnInitializeParticles</a>
                    whenever new particles are created.
                </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />The final start value effector code</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
                    Here is the full source code of the start value effector.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> DigitalRune.Mathematics.Statistics;
<span class="highlight-keyword">using</span> DigitalRune.Particles;


<span class="highlight-keyword">namespace</span> MyNamespace
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyStartValueEffector&lt;T&gt; : ParticleEffector
  {
    <span class="highlight-keyword">private</span> IParticleParameter&lt;T&gt; _parameter;


    [ParticleParameter(ParticleParameterUsage.Out)]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> Parameter { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    <span class="highlight-keyword">public</span> Distribution&lt;T&gt; Distribution { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    <span class="highlight-keyword">public</span> T DefaultValue { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }


    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> ParticleEffector CreateInstanceCore()
    {
      <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> MyStartValueEffector&lt;T&gt;();
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> CloneCore(ParticleEffector source)
    {
      <span class="highlight-keyword">base</span>.CloneCore(source);

      <span class="highlight-keyword">var</span> sourceTyped = (MyStartValueEffector&lt;T&gt;)source;
      Parameter = sourceTyped.Parameter;
      Distribution = sourceTyped.Distribution;
      DefaultValue = sourceTyped.DefaultValue;
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnRequeryParameters()
    {
      _parameter = ParticleSystem.Parameters.Get&lt;T&gt;(Parameter);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnInitialize()
    {
      <span class="highlight-keyword">if</span> (_parameter != <span class="highlight-keyword">null</span> &amp;&amp; _parameter.Values == <span class="highlight-keyword">null</span>)
      {
        <span class="highlight-comment">// Initialize uniform parameter.</span>
        <span class="highlight-keyword">var</span> distribution = Distribution;
        <span class="highlight-keyword">if</span> (distribution != <span class="highlight-keyword">null</span>)
          _parameter.DefaultValue = distribution.Next(ParticleSystem.Random);
        <span class="highlight-keyword">else</span>
          _parameter.DefaultValue = DefaultValue;
      }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUninitialize()
    {
      _parameter = <span class="highlight-keyword">null</span>;
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnInitializeParticles(<span class="highlight-keyword">int</span> startIndex, <span class="highlight-keyword">int</span> count, <span class="highlight-keyword">object</span> emitter)
    {
      <span class="highlight-keyword">if</span> (_parameter == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">return</span>;

      T[] values = _parameter.Values;
      <span class="highlight-keyword">if</span> (values == <span class="highlight-keyword">null</span>)
      {
        <span class="highlight-comment">// Parameter is a uniform. Uniform parameters are handled in OnInitialize().</span>
        <span class="highlight-keyword">return</span>;
      }

      <span class="highlight-comment">// Parameter is a varying parameter.</span>
      <span class="highlight-keyword">var</span> distribution = Distribution;
      <span class="highlight-keyword">if</span> (distribution != <span class="highlight-keyword">null</span>)
      {
        <span class="highlight-keyword">var</span> random = ParticleSystem.Random;
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = startIndex; i &lt; startIndex + count; i++)
          values[i] = distribution.Next(random);
      }
      <span class="highlight-keyword">else</span>
      {
        <span class="highlight-keyword">var</span> startValue = DefaultValue;
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = startIndex; i &lt; startIndex + count; i++)
          values[i] = startValue;
      }
    }
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABAAA");</script></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>