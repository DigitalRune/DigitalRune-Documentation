<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>How To: Create a Particle Effector</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="2e27afb1-6482-4f56-9497-ca903aef3c9f" /><meta name="Description" content="This article shows how to implement a particle effector that modifies particle parameters using linear interpolation. (Please note: DigitalRune Particles contains a T:DigitalRune.Particles.Effectors.SingleLerpEffector that provides the same functionality.)" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="5044112e-c86d-4d85-87d0-b567a0361c21.htm" title="DigitalRune Particles" tocid="5044112e-c86d-4d85-87d0-b567a0361c21">DigitalRune Particles</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="25e7a7a0-265e-4c12-9e41-be23852b39cf.htm" title="&quot;How To&quot; Articles" tocid="25e7a7a0-265e-4c12-9e41-be23852b39cf">"How To" Articles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="60bdbd87-fecb-42e2-bdf3-3966602bb9a5.htm" title="How To: Add DigitalRune Particles to a Project" tocid="60bdbd87-fecb-42e2-bdf3-3966602bb9a5">How To: Add DigitalRune Particles to a Project</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="2deefa98-6d2a-4ada-a51d-95a2625849df.htm" title="How To: Create a Simple Particle Effect" tocid="2deefa98-6d2a-4ada-a51d-95a2625849df">How To: Create a Simple Particle Effect</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="2e27afb1-6482-4f56-9497-ca903aef3c9f.htm" title="How To: Create a Particle Effector" tocid="2e27afb1-6482-4f56-9497-ca903aef3c9f">How To: Create a Particle Effector</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="5b005b7b-e103-4da2-8d18-cddce0a5bea7.htm" title="How To: Create a Particle Emitter" tocid="5b005b7b-e103-4da2-8d18-cddce0a5bea7">How To: Create a Particle Emitter</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="95a33167-7650-4006-8cf1-3e011c42bf54.htm" title="How To: Create a Start Value Effector" tocid="95a33167-7650-4006-8cf1-3e011c42bf54">How To: Create a Start Value Effector</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="f9e9b1f3-4850-437f-aa2b-a6b4c236f196.htm" title="How To: Clamp a Particle Parameter" tocid="f9e9b1f3-4850-437f-aa2b-a6b4c236f196">How To: Clamp a Particle Parameter</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">How To: Create a Particle Effector</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
                This article shows how to implement a particle effector that modifies
                particle parameters using linear interpolation. (Please note: DigitalRune Particles
                contains a <a href="48e5c79f-f5c2-193e-c4e4-8537ae442c18.htm">SingleLerpEffector</a>
                that provides the same functionality.)
            </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating a custom particle effector</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    First, we create a new class that inherits from
                    <a href="98aac0ca-d8d4-a3c8-dca3-b0579f335f85.htm">ParticleEffector</a>.
                    Particle effectors can be added to a particle system, and they are
                    called whenever the particle system is initialized or updated.
                    Here is the empty class and the namespaces that we will need:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EASACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EASACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EASACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EASACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> DigitalRune.Particles;

<span class="highlight-keyword">namespace</span> MyNamespace
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyLerpEffector : ParticleEffector
  {
    <span class="highlight-comment">// TODO: Add code.</span>
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EASACAAA");</script><p>
                    The particle effector in this example should perform a linear interpolation (LERP)
                    between a start and an end value depending on an interpolation factor.
                    The start values, end values, and interpolation factors are read from particle
                    parameters. The interpolation results are written to another particle parameter.
                </p><p>
                    Particle parameters are identified by their name - a string that must be
                    unique within a particle system. Let's add properties to the particle effector
                    that let the user configure the particle parameters to use:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAPACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAPACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAPACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAPACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">[ParticleParameter(ParticleParameterUsage.In)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> StartParameter { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

[ParticleParameter(ParticleParameterUsage.In)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> EndParameter { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

[ParticleParameter(ParticleParameterUsage.In)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> FactorParameter { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

[ParticleParameter(ParticleParameterUsage.Out)]
<span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> ValueParameter { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAPACAAA");</script><p>
                    The
                    <a href="79a959a4-ae44-582a-4f3d-f87e28833e30.htm">ParticleParameterAttribute</a>
                    provides meta-information for particle editors and validation. The attributes indicate
                    which parameters are used as input and which are used as output.
                </p><p>
                    Particle effectors should be cloneable. The following two methods must be
                    overridden to support cloning:
                    <a href="3e0436a8-a377-0c63-f4b0-22ce7fe568bd.htm">CreateInstanceCore</a>
                    must return a new instance of the particle effector and
                    <a href="b33385e0-f83d-16cd-2f03-d7e67be006a4.htm">CloneCore</a>
                    must copy all important properties:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAMACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAMACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAMACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAMACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> ParticleEffector CreateInstanceCore()
{
  <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> MyLerpEffector();
}

<span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> CloneCore(ParticleEffector source)
{
  <span class="highlight-keyword">base</span>.CloneCore(source);

  <span class="highlight-keyword">var</span> sourceTyped = (MyLerpEffector)source;
  ValueParameter = sourceTyped.ValueParameter;
  StartParameter = sourceTyped.StartParameter;
  EndParameter = sourceTyped.EndParameter;
  FactorParameter = sourceTyped.FactorParameter;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAMACAAA");</script><p>
                    The base class
                    <a href="98aac0ca-d8d4-a3c8-dca3-b0579f335f85.htm">ParticleEffector</a>
                    provides several virtual methods, which are automatically called by the
                    particle system. Derived classes can override these methods to change
                    particle parameters, manipulate the particle system, etc.
                </p><p>
                    The particle effector can query the required parameters and cache the
                    references in
                    <a href="7543215c-6c1f-c910-3651-22bb21f8f99d.htm">OnRequeryParameters</a>.
                    This method is called when the particle system is updated for the first
                    time, and then every time the particle parameters change and need
                    to be requeried.
                    <a href="97f514fa-1854-32d6-07eb-5d716a48f9ee.htm">OnUninitialize</a>
                    is called when the particle effector is removed from a particle system. In this method
                    all resources and references to external objects should be released.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAJACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAJACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAJACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAJACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">private</span> IParticleParameter&lt;<span class="highlight-keyword">float</span>&gt; _startParameter;
<span class="highlight-keyword">private</span> IParticleParameter&lt;<span class="highlight-keyword">float</span>&gt; _endParameter;
<span class="highlight-keyword">private</span> IParticleParameter&lt;<span class="highlight-keyword">float</span>&gt; _valueParameter;
<span class="highlight-keyword">private</span> IParticleParameter&lt;<span class="highlight-keyword">float</span>&gt; _factorParameter;          

<span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnRequeryParameters()
{
  _valueParameter = ParticleSystem.Parameters.Get&lt;<span class="highlight-keyword">float</span>&gt;(ValueParameter);
  _startParameter = ParticleSystem.Parameters.Get&lt;<span class="highlight-keyword">float</span>&gt;(StartParameter);
  _endParameter = ParticleSystem.Parameters.Get&lt;<span class="highlight-keyword">float</span>&gt;(EndParameter);
  _factorParameter = ParticleSystem.Parameters.Get&lt;<span class="highlight-keyword">float</span>&gt;(FactorParameter);
}

<span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUninitialize()
{
  _valueParameter = <span class="highlight-keyword">null</span>;
  _startParameter = <span class="highlight-keyword">null</span>;
  _endParameter = <span class="highlight-keyword">null</span>;
  _factorParameter = <span class="highlight-keyword">null</span>;
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAJACAAA");</script><p>
                    The following virtual methods are called whenever the particle system is updated
                    (usually once per frame):
                    <a href="6615422d-63d4-4e82-f79a-d18a41a601b1.htm">OnBeginUpdate</a>,
                    <a href="d234dc37-131d-9e53-ffb0-97bf3d6d7766.htm">OnUpdateParticles</a> and
                    <a href="4b8dbe8f-ce36-9e7d-0d9e-63601520ea12.htm">OnEndUpdate</a>.
                </p><p><a href="6615422d-63d4-4e82-f79a-d18a41a601b1.htm">OnBeginUpdate</a>
                    is called whenever the particle system starts its update. The method can be used to
                    update any uniform particle parameters. In our example, the output parameter can be uniform:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAGACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAGACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAGACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAGACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnBeginUpdate(TimeSpan deltaTime)
{
  <span class="highlight-keyword">if</span> (_valueParameter == <span class="highlight-keyword">null</span> || _startParameter == <span class="highlight-keyword">null</span> || _endParameter == <span class="highlight-keyword">null</span> || _factorParameter == <span class="highlight-keyword">null</span>)
    <span class="highlight-keyword">return</span>;

  <span class="highlight-keyword">if</span> (_valueParameter.IsUniform)
  {
    <span class="highlight-comment">// Value is a uniform parameter.</span>
    <span class="highlight-keyword">var</span> f = _factorParameter.DefaultValue;
    _valueParameter.DefaultValue = (<span class="highlight-number">1</span> - f) * _startParameter.DefaultValue + f * _endParameter.DefaultValue;
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAGACAAA");</script><p>
                    Please note that the method above aborts if any of the required particle parameters is missing.
                </p><p>
                    Varying parameters are particle parameters that store one value per particle.
                    These types of parameters need to be updated in
                    <a href="d234dc37-131d-9e53-ffb0-97bf3d6d7766.htm">OnUpdateParticles</a>.
                    The method arguments identify the range of particles that needs to be updated.
                    In our example the output parameter can be a varying parameter, so this
                    case needs to be handled here:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUpdateParticles(TimeSpan deltaTime, <span class="highlight-keyword">int</span> startIndex, <span class="highlight-keyword">int</span> count)
{
  <span class="highlight-keyword">if</span> (_valueParameter == <span class="highlight-keyword">null</span> || _startParameter == <span class="highlight-keyword">null</span> || _endParameter == <span class="highlight-keyword">null</span> || _factorParameter == <span class="highlight-keyword">null</span>)
    <span class="highlight-keyword">return</span>;

  <span class="highlight-keyword">float</span>[] values = _valueParameter.Values;
  <span class="highlight-keyword">if</span> (values == <span class="highlight-keyword">null</span>)
  {
    <span class="highlight-comment">// Value is a uniform parameter. Uniform parameters are handled in OnBeginUpdate().</span>
    <span class="highlight-keyword">return</span>;
  }

  <span class="highlight-comment">// Value is a varying parameter.</span>
  <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = startIndex; i &lt; startIndex + count; i++)
  {
    <span class="highlight-keyword">float</span> f = _factorParameter.GetValue(i);
    values[i] = (<span class="highlight-number">1</span> - f) * _startParameter.GetValue(i) + f * _endParameter.GetValue(i);
  }      
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADACAAA");</script><p>
                    Please note, that this method aborts if any of the required particle parameters
                    is missing. It uses the extension method
                    <a href="6161fff8-384f-5525-5473-fe14ee7bab2d.htm">ParticleHelper<span id="LSTA1B6F4E5_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA1B6F4E5_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>GetValue<span id="LSTA1B6F4E5_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA1B6F4E5_1?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTA1B6F4E5_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA1B6F4E5_2?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(IParticleParameter<span id="LSTA1B6F4E5_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA1B6F4E5_3?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LSTA1B6F4E5_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA1B6F4E5_4?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>, Int32)</a>
                    to read the particle parameter values because the input parameters can be
                    either uniform or varying parameters.
                </p><p>
                    The code above is all that is needed for our LERP effector. It is important to note
                    that the particle effector can be used to update both, uniform and varying, particle parameters.
                    Uniform particle parameters are updated in
                    <a href="6615422d-63d4-4e82-f79a-d18a41a601b1.htm">OnBeginUpdate</a>.
                    Varying particle parameters are updated in
                    <a href="d234dc37-131d-9e53-ffb0-97bf3d6d7766.htm">OnUpdateParticles</a>.
                </p><p>
                    To make the particle effector faster, the code in
                    <a href="d234dc37-131d-9e53-ffb0-97bf3d6d7766.htm">OnUpdateParticles</a>
                    can be extended to use different code paths depending on the particle parameter
                    types (uniform vs. varying) for the most common usages. This additional optimization
                    is implemented in the code below.
                </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />The final particle effector code</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    Here is the full source code of the LERP effector (including optimizations).
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> DigitalRune.Particles;


<span class="highlight-keyword">namespace</span> MyNamespace
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyLerpEffector : ParticleEffector
  {
    <span class="highlight-keyword">private</span> IParticleParameter&lt;<span class="highlight-keyword">float</span>&gt; _startParameter;
    <span class="highlight-keyword">private</span> IParticleParameter&lt;<span class="highlight-keyword">float</span>&gt; _endParameter;
    <span class="highlight-keyword">private</span> IParticleParameter&lt;<span class="highlight-keyword">float</span>&gt; _valueParameter;
    <span class="highlight-keyword">private</span> IParticleParameter&lt;<span class="highlight-keyword">float</span>&gt; _factorParameter;


    [ParticleParameter(ParticleParameterUsage.In)]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> StartParameter { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    [ParticleParameter(ParticleParameterUsage.In)]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> EndParameter { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    [ParticleParameter(ParticleParameterUsage.In)]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> FactorParameter { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

    [ParticleParameter(ParticleParameterUsage.Out)]
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> ValueParameter { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }


    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> ParticleEffector CreateInstanceCore()
    {
      <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> MyLerpEffector();
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> CloneCore(ParticleEffector source)
    {
      <span class="highlight-keyword">base</span>.CloneCore(source);

      <span class="highlight-keyword">var</span> sourceTyped = (MyLerpEffector)source;
      ValueParameter = sourceTyped.ValueParameter;
      StartParameter = sourceTyped.StartParameter;
      EndParameter = sourceTyped.EndParameter;
      FactorParameter = sourceTyped.FactorParameter;
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnRequeryParameters()
    {
      _valueParameter = ParticleSystem.Parameters.Get&lt;<span class="highlight-keyword">float</span>&gt;(ValueParameter);
      _startParameter = ParticleSystem.Parameters.Get&lt;<span class="highlight-keyword">float</span>&gt;(StartParameter);
      _endParameter = ParticleSystem.Parameters.Get&lt;<span class="highlight-keyword">float</span>&gt;(EndParameter);
      _factorParameter = ParticleSystem.Parameters.Get&lt;<span class="highlight-keyword">float</span>&gt;(FactorParameter);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUninitialize()
    {
      _valueParameter = <span class="highlight-keyword">null</span>;
      _startParameter = <span class="highlight-keyword">null</span>;
      _endParameter = <span class="highlight-keyword">null</span>;
      _factorParameter = <span class="highlight-keyword">null</span>;
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnBeginUpdate(TimeSpan deltaTime)
    {
      <span class="highlight-keyword">if</span> (_valueParameter == <span class="highlight-keyword">null</span> || _startParameter == <span class="highlight-keyword">null</span> || _endParameter == <span class="highlight-keyword">null</span> || _factorParameter == <span class="highlight-keyword">null</span>)
      {
        <span class="highlight-keyword">return</span>;
      }

      <span class="highlight-keyword">if</span> (_valueParameter.IsUniform)
      {
        <span class="highlight-comment">// Value is a uniform parameter.</span>
        <span class="highlight-keyword">var</span> f = _factorParameter.DefaultValue;
        _valueParameter.DefaultValue = (<span class="highlight-number">1</span> - f) * _startParameter.DefaultValue + f * _endParameter.DefaultValue;
      }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUpdateParticles(TimeSpan deltaTime, <span class="highlight-keyword">int</span> startIndex, <span class="highlight-keyword">int</span> count)
    {
      <span class="highlight-keyword">if</span> (_valueParameter == <span class="highlight-keyword">null</span> || _startParameter == <span class="highlight-keyword">null</span> || _endParameter == <span class="highlight-keyword">null</span> || _factorParameter == <span class="highlight-keyword">null</span>)
      {
        <span class="highlight-keyword">return</span>;
      }

      <span class="highlight-keyword">float</span>[] values = _valueParameter.Values;
      <span class="highlight-keyword">if</span> (values == <span class="highlight-keyword">null</span>)
      {
        <span class="highlight-comment">// Value is a uniform parameter. Uniform parameters are handled in OnBeginUpdate().</span>
        <span class="highlight-keyword">return</span>;
      }

      <span class="highlight-comment">// Value is a varying parameter.</span>

      <span class="highlight-keyword">float</span>[] starts = _startParameter.Values;
      <span class="highlight-keyword">float</span>[] ends = _endParameter.Values;
      <span class="highlight-keyword">float</span>[] factors = _factorParameter.Values;

      <span class="highlight-keyword">if</span> (starts != <span class="highlight-keyword">null</span> &amp;&amp; ends != <span class="highlight-keyword">null</span> &amp;&amp; factors != <span class="highlight-keyword">null</span>)
      {
        <span class="highlight-comment">// Optimized case: Start, End, and Factor are varying parameters.</span>
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = startIndex; i &lt; startIndex + count; i++)
        {
          <span class="highlight-keyword">float</span> f = factors[i];
          values[i] = (<span class="highlight-number">1</span> - f) * starts[i] + f * ends[i];
        }        
      }
      <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (starts == <span class="highlight-keyword">null</span> &amp;&amp; ends == <span class="highlight-keyword">null</span> &amp;&amp; factors != <span class="highlight-keyword">null</span>)
      {
        <span class="highlight-comment">// Optimized case: Start and End are uniform parameters, Factor is varying parameter.</span>
        <span class="highlight-keyword">float</span> startValue = _startParameter.DefaultValue;
        <span class="highlight-keyword">float</span> endValue = _endParameter.DefaultValue;
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = startIndex; i &lt; startIndex + count; i++)
        {
          <span class="highlight-keyword">float</span> f = factors[i];
          values[i] = (<span class="highlight-number">1</span> - f) * startValue + f * endValue;
        }        
      }
      <span class="highlight-keyword">else</span>
      {
        <span class="highlight-comment">// General case:</span>
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = startIndex; i &lt; startIndex + count; i++)
        {
          <span class="highlight-keyword">float</span> f = _factorParameter.GetValue(i);
          values[i] = (<span class="highlight-number">1</span> - f) * _startParameter.GetValue(i) + f * _endParameter.GetValue(i);
        }      
      }      
    }
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABAAA");</script></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>