<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Purge Your XNA Game Class</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="36504333-0933-40d6-bc90-f7c840fcc1f8" /><meta name="Description" content="This article discusses how you can use the Service Provider pattern to create a simple, clean Game class in XNA. Please note, the example code uses an obsolete service provider implementation." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d82e6561-0857-4f31-bd2a-6678c311dca4.htm" title="Articles" tocid="d82e6561-0857-4f31-bd2a-6678c311dca4">Articles</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="2a9138d6-d003-4df7-9793-1c3a018aa652.htm" title="Service Provider Pattern" tocid="2a9138d6-d003-4df7-9793-1c3a018aa652">Service Provider Pattern</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="619b1341-c6a1-4c59-b33d-cc1f799402dc.htm" title="The Service Provider Pattern for Games" tocid="619b1341-c6a1-4c59-b33d-cc1f799402dc">The Service Provider Pattern for Games</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="9b4a54b5-1c1a-481b-961b-492e9ee6b5fa.htm" title="Service Provider Implementation" tocid="9b4a54b5-1c1a-481b-961b-492e9ee6b5fa">Service Provider Implementation</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="36504333-0933-40d6-bc90-f7c840fcc1f8.htm" title="Purge Your XNA Game Class" tocid="36504333-0933-40d6-bc90-f7c840fcc1f8">Purge Your XNA Game Class</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">Purge Your XNA Game Class</td></tr></table><span class="introStyle"></span><div class="introduction"><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Caution note" /> Caution</th></tr><tr><td><p>
                    This article discusses how you can use the Service Provider pattern to create a simple, clean
                    Game class in XNA. Please note, the example code uses an obsolete service provider
                    implementation. Have a look a the DigitalRune <a href="dde51686-4f07-4c54-95d4-756ec929cb57.htm">Samples</a> to see
                    the most recent implementation.
                </p></td></tr></table></div><p>
                In all XNA games you have to create your own Game class that derives from the Game base class.
                Here is a pattern in which we use the service provider pattern to create a clear structure
                for our game class.
            </p><p>
                In many XNA games and samples the Game class does a lot of stuff and is maybe the most
                complex class of the application. This makes the source code difficult to understand and
                hard to re-use. We suggest two things to improve this:
            </p><ul><li>
                    Use separate managers for the game’s sub-systems (e.g. graphics, physics, UI, …) and
                    make these sub-systems accessible using the service provider pattern.
                </li><li>
                    Separate game-specific game logic and drawing from the Game class.
                </li></ul><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Example">Example</a></li><li class="outlineSectionEntry"><a href="#Conclusion">Conclusion</a></li></ul></div><div class="collapsibleAreaRegion" id="Example"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    Here is an example for a Game which uses several sub-systems (input, graphics, physics, GUI,
                    game objects for game logic).
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAIACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAIACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAIACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAIACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGame : Game {
  <span class="highlight-keyword">private</span> GraphicsManager _graphicsManager;
  <span class="highlight-keyword">private</span> PhysicsManager _physicsManager;
  <span class="highlight-keyword">private</span> UIManager _uiManager;
  <span class="highlight-keyword">private</span> InputManager _inputManager;
  <span class="highlight-keyword">private</span> GameObjectManager _gameObjectManager;

  <span class="highlight-keyword">public</span> MyGame() {
    _graphicsManager = <span class="highlight-keyword">new</span> GraphicsManager(<span class="highlight-keyword">this</span>)
    {
      PreferredBackBufferWidth = <span class="highlight-number">854</span>,
      PreferredBackBufferHeight = <span class="highlight-number">480</span>,
      SynchronizeWithVerticalRetrace = <span class="highlight-keyword">false</span>
    };
    Content.RootDirectory = <span class="highlight-literal">"Content"</span>;
    IsMouseVisible = <span class="highlight-keyword">true</span>;
    IsFixedTimeStep = <span class="highlight-keyword">true</span>;
  }

  <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Initialize() {
    <span class="highlight-comment">// ----- Initialize Services.</span>
    ServiceManager.GlobalServices = Services;

    Services.AddService(<span class="highlight-keyword">typeof</span>(IGraphicsService), _graphicsManager);

    _physicsManager = <span class="highlight-keyword">new</span> PhysicsManager();
    Services.AddService(<span class="highlight-keyword">typeof</span>(IPhysicsService), _physicsManager);

    _inputManager = <span class="highlight-keyword">new</span> InputManager(<span class="highlight-keyword">false</span>);
    Services.AddService(<span class="highlight-keyword">typeof</span>(IInputService), _inputManager);

    _uiManager = <span class="highlight-keyword">new</span> UIManager(<span class="highlight-keyword">this</span>, _inputManager);
    Services.AddService(<span class="highlight-keyword">typeof</span>(IUIService), _uiManager);

    _gameObjectManager = <span class="highlight-keyword">new</span> GameObjectManager();
    Services.AddService(<span class="highlight-keyword">typeof</span>(IGameObjectService), _gameObjectManager);

    <span class="highlight-comment">// ----- Add GameComponents</span>
    Components.Add(<span class="highlight-keyword">new</span> MyGameComponent(<span class="highlight-keyword">this</span>));

    <span class="highlight-keyword">base</span>.Initialize();
  }

  <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Update(GameTime gameTime) {
    <span class="highlight-keyword">float</span> deltaTime = (<span class="highlight-keyword">float</span>)gameTime.ElapsedGameTime.TotalSeconds;
    _inputManager.Update(deltaTime);
    <span class="highlight-keyword">base</span>.Update(gameTime);
    _uiManager.Update(deltaTime);
    _gameObjectManager.Update(deltaTime);
    _physicsManager.Update(deltaTime);
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAIACAAA");</script><p>
                    This is it. The private fields define the sub-systems:
                </p><ul><li>
                        GraphicsManager is derived from the XNA GraphicsDeviceManager class.
                    </li><li>
                        PhysicsManager takes care of the physics simulation.
                    </li><li>
                        UIManager manages UI controls (windows, text boxes, buttons, etc.)
                    </li><li>
                        InputManager manages input devices (keyboard, mouse, detecting key/button presses
                        and double clicks, key/button repetition, etc.)
                    </li><li>
                        GameObjectManager manages game objects (the player camera, the 3D boxes, etc.)
                    </li></ul><p>
                    The constructor is similar to most other XNA samples.
                </p><p>
                    The Initialize() method does following things:
                </p><ul><li>
                            Store the service provider in a global variable (ServiceManager.GlobalServices).
                    </li><li>
                        Create the managers and register their services.
                    </li><li>
                        Add one or more GameComponents that defines the game logic and rendering of the game.
                    </li></ul><p>
                    The Update method updates the sub-systems.
                </p><p>
                    A few important takeaways:
                </p><ul><li>
                        The Game class does not define any new public properties or methods.
                    </li><li>
                        It clearly defines which services will be available.
                    </li><li>
                            It clearly tells in which order the services are updated in each frame -
                            which is very important, especially if you use a physics simulation or if you want to
                            parallelize this game loop later on.
                    </li><li>
                        All the custom game logic and drawing is separated into a game component.
                    </li><li>
                            The game does not even override the Draw method! MyGameComponent is a
                            DrawableGameComponent and is responsible for the drawing code.
                    </li></ul></div><div class="collapsibleAreaRegion" id="Conclusion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Conclusion</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    Use the service-manager pattern to structure your subsystems. Separate custom game
                    logic and custom rendering from the main game class. This is one possible design that we
                    have used recently and it has helped to make our code easier to read and to maintain.
                </p></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>