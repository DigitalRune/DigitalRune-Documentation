<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>How To: Compute Contacts between Objects</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="20035425-d861-43db-91c2-a4b4d30cbc16" /><meta name="Description" content="This topic will demonstrate how to use a collision domain to compute contacts between several objects." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="335dc86a-c68d-4d7b-8641-81dd80de5e76.htm" title="DigitalRune Geometry" tocid="335dc86a-c68d-4d7b-8641-81dd80de5e76">DigitalRune Geometry</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="76e11a96-42a4-495c-b8f8-6164a67d05d5.htm" title="Articles" tocid="76e11a96-42a4-495c-b8f8-6164a67d05d5">Articles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="833445f6-4042-40e7-a489-0b6ed790428c.htm" title="How To: Add DigitalRune Geometry to a Project" tocid="833445f6-4042-40e7-a489-0b6ed790428c">How To: Add DigitalRune Geometry to a Project</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="9a927200-8841-4c76-94bc-29c5633c5d38.htm" title="How To: Compute World and View Matrix using Pose" tocid="9a927200-8841-4c76-94bc-29c5633c5d38">How To: Compute World and View Matrix using Pose</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="23a00744-a02d-4830-9104-5b978cf74882.htm" title="How To: Compute the Minimal Distance of Objects" tocid="23a00744-a02d-4830-9104-5b978cf74882">How To: Compute the Minimal Distance of Objects</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="20035425-d861-43db-91c2-a4b4d30cbc16.htm" title="How To: Compute Contacts between Objects" tocid="20035425-d861-43db-91c2-a4b4d30cbc16">How To: Compute Contacts between Objects</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7fc08da6-fe1c-4cfe-ad65-743d08b2b0ba.htm" title="How To: Create a Mesh of a Convex Hull" tocid="7fc08da6-fe1c-4cfe-ad65-743d08b2b0ba">How To: Create a Mesh of a Convex Hull</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="6268b551-b34f-47a4-9513-d7ba700f08fe.htm" title="How To: Load a 3D Collision Model Using the XNA Content Pipeline" tocid="6268b551-b34f-47a4-9513-d7ba700f08fe">How To: Load a 3D Collision Model Using the XNA Content Pipeline</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="138fc8fe-c536-40e0-af6b-0fb7e8eb9623.htm" title="Continuous Collision Detection (Background Information)" tocid="138fc8fe-c536-40e0-af6b-0fb7e8eb9623">Continuous Collision Detection (Background Information)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ab8276b7-a27e-43f3-8c23-4b7be065ff91.htm" title="External Articles" tocid="ab8276b7-a27e-43f3-8c23-4b7be065ff91">External Articles</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">How To: Compute Contacts between Objects</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
                This topic will demonstrate how to use a collision domain to compute contacts
                between several objects.
            </p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Namespaces">Add DigitalRune namespaces</a></li><li class="outlineSectionEntry"><a href="#Domain">Create a collision domain and collision objects</a></li><li class="outlineSectionEntry"><a href="#Contacts">Compute contacts</a></li></ul></div><div class="collapsibleAreaRegion" id="Namespaces"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Add DigitalRune namespaces</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    The following example will use data types from DigitalRune Geometry and
                    Mathematics. The following namespaces must be imported at the beginning of
                    the source code file:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> DigitalRune.Geometry;
<span class="highlight-keyword">using</span> DigitalRune.Geometry.Collisions;
<span class="highlight-keyword">using</span> DigitalRune.Geometry.Shapes;
<span class="highlight-keyword">using</span> DigitalRune.Mathematics.Algebra;
<span class="highlight-keyword">using</span> DigitalRune.Mathematics.Statistics;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="Domain"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Create a collision domain and collision objects</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    A collision domain manages a group of collision objects. It is not necessary
                    to use a collision domain to compute contacts between objects.
                    <a href="1b4e4fee-5941-cbca-9522-315d04018645.htm">CollisionDetection</a>
                    can compute this as well. But it is strongly recommended to use a collision
                    domain because it is much faster. The domain can optimize the contact computation
                    because all relevant objects must be registered in the domain beforehand
                    and the domain can re-use old contact information. A collision domain is
                    created with
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">CollisionDomain domain = <span class="highlight-keyword">new</span> CollisionDomain();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADACAAA");</script><p>
                    Most games will use one collision domain for all collision objects.
                </p><p>
                    Next, we add a couple of box-shaped collision objects with random positions
                    and random orientations.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; <span class="highlight-number">100</span>; i++)
{
  <span class="highlight-comment">// Define position/orientation and shape.</span>
  GeometricObject geometricObject = <span class="highlight-keyword">new</span> GeometricObject()
  {
    Shape = <span class="highlight-keyword">new</span> BoxShape(<span class="highlight-number">1</span>, <span class="highlight-number">2</span>, <span class="highlight-number">3</span>),
    Pose = <span class="highlight-keyword">new</span> Pose(RandomHelper.Random.NextVector3F(<span class="highlight-number">-20</span>, <span class="highlight-number">20</span>),
    RandomHelper.Random.NextQuaternionF())),
  };

  <span class="highlight-comment">// Create collision object.</span>
  CollisionObject collisionObject = <span class="highlight-keyword">new</span> CollisionObject(geometricObject);

  <span class="highlight-comment">// Add collision object to collision domain.</span>
  domain.CollisionObjects.Add(collisionObject);
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAACAAA");</script></div><div class="collapsibleAreaRegion" id="Contacts"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Compute contacts</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
                    The collision domains computes all contacts by calling
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAGABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAGABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAGABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAGABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">domain.Update(<span class="highlight-number">1.0</span>f / <span class="highlight-number">60.0</span>f);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAGABAAA");</script><p>
                    The method argument is the size of the time step, which is 1/60 s (60 Hz)
                    for most games. This method is usually called once per frame. After this call
                    the collision domain contains up-to-date contact information for all collision
                    objects. Following code enumerates all pairs of touching objects:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAEABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAEABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAEABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">foreach</span> (ContactSet contactSet <span class="highlight-keyword">in</span> domain.ContactSets)
{
  <span class="highlight-comment">// Get touching object pair.</span>
  CollisionObject objectA = contactSet.ObjectA;
  CollisionObject objectB = contactSet.ObjectB;

  <span class="highlight-comment">// Handle contact of the objects, for example:</span>
  <span class="highlight-comment">// - play a sound,</span>
  <span class="highlight-comment">// - reduce "health" of objects,</span>
  <span class="highlight-comment">// - move objects,</span>
  <span class="highlight-comment">// - ...</span>
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEABAAA");</script><p>
                    The contact set also contains contacts that describe the contact details, including
                    penetration depth, normal vector, contact position, age of the contact, etc.
                </p><p>
                    If you are only interested in the contact of a specific object or a specific
                    object pair, you can call:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Check if object 21 touches any other object.</span>
<span class="highlight-keyword">bool</span> object21HasContact = domain.HasContact(domain.CollisionObjects[<span class="highlight-number">21</span>]);

<span class="highlight-comment">// Check if object 10 touches object 20.</span>
<span class="highlight-keyword">bool</span> object10And20HaveContact = domain.HaveContact(domain.CollisionObjects[<span class="highlight-number">10</span>], domain.CollisionObjects[<span class="highlight-number">20</span>]);

<span class="highlight-comment">// Get all contact sets for object 73.</span>
<span class="highlight-comment">// (Each contact set describes the contacts between a pair of collision objects.)</span>
IEnumerable&lt;ContactSet&gt; contactsWithObject73 = domain.GetContacts(domain.CollisionObjects[<span class="highlight-number">73</span>]);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABABAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
                        In a typical main loop of a game the following steps will usually be performed:
                    </p><ol><li><p>
                                Get the contacts of the objects from the collision domain.
                            </p></li><li><p>
                                Change the poses of the collision objects according to the contact information.
                                For example, let objects stop or bounce if they hit a wall.
                            </p></li><li><p>
                                Update the collision domain to compute new contacts.
                            </p></li></ol></td></tr></table></div></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>