<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Real-Time Motion Capture Using Kinect and XNA</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="6a6f8d44-7bbe-4c61-844f-8397b4ad6dd8" /><meta name="Description" content="This article discusses how the DigitalRune Engine can help to use the Microsoft Kinect for Windows sensor for real-time motion capture." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d82e6561-0857-4f31-bd2a-6678c311dca4.htm" title="Articles" tocid="d82e6561-0857-4f31-bd2a-6678c311dca4">Articles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="38879706-9d39-4f03-838f-26b7f14b9878.htm" title="3D Math Conventions" tocid="38879706-9d39-4f03-838f-26b7f14b9878">3D Math Conventions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="a1ed955a-5ac6-411c-a098-14f34845b1bf.htm" title="Multithreading in the DigitalRune Engine" tocid="a1ed955a-5ac6-411c-a098-14f34845b1bf">Multithreading in the DigitalRune Engine</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="2a9138d6-d003-4df7-9793-1c3a018aa652.htm" title="Service Provider Pattern" tocid="2a9138d6-d003-4df7-9793-1c3a018aa652">Service Provider Pattern</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="6a6f8d44-7bbe-4c61-844f-8397b4ad6dd8.htm" title="Real-Time Motion Capture Using Kinect and XNA" tocid="6a6f8d44-7bbe-4c61-844f-8397b4ad6dd8">Real-Time Motion Capture Using Kinect and XNA</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="793ea828-8894-4b61-b623-9f3617e3e1a8.htm" title="External Articles" tocid="793ea828-8894-4b61-b623-9f3617e3e1a8">External Articles</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">Real-Time Motion Capture Using Kinect and XNA</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
                This article discusses how the DigitalRune Engine can help to use the
                Microsoft Kinect for Windows sensor for real-time motion capture.
            </p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Sample">Sample</a></li><li class="outlineSectionEntry"><a href="#SkeletonMapping">The skeleton mapping approach</a></li><li class="outlineSectionEntry"><a href="#Marionette">The marionette ragdoll approach</a></li><li class="outlineSectionEntry"><a href="#Comparison">Comparison</a></li></ul></div><div class="collapsibleAreaRegion" id="Sample"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Sample</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
                    The <a href="dde51686-4f07-4c54-95d4-756ec929cb57.htm">Samples</a> contain a project
                    which shows how to use the Kinect sensor to control a 3D model. Here is a video of this
                    sample:
                </p><ul class="noBullet"><li><p><a href="https://www.youtube.com/watch?v=_-AbIHcuSgI" target="_blank">Video: Real-Time Motion Capture with Kinect and XNA</a></p></li></ul></div><div class="collapsibleAreaRegion" id="SkeletonMapping"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />The skeleton mapping approach</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    The sample project demonstrates 2 different methods to animate 3D models using Kinect in
                    real-time:
                    The first approach uses <a href="e988b18d-0b1a-481d-89e6-3d40afa5ab5d.htm">Skeleton Mapping</a>
                    to animate the XNA Dude model and a Space Marine model. There are three different skeletons
                    involved: The Kinect player skeleton, the Dude skeleton and the Space Marine skeleton.
                    All three skeletons are different, i.e. have different bone names and a different number of
                    bones. DigitalRune Animation contains a
                    <a href="a7831d7c-7e10-fe62-0ee8-de79b94907c7.htm">SkeletonMapper</a>
                    which can be used to transfer an animation from one skeleton to another skeleton with a different
                    structure.
                </p><p>
                    Setting up the bone mapping for a model is not very difficult. This is the setup for the Dude model
                    for (Kinect v2):
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAEADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAEADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAEADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAEADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">_skeletonMapperA = <span class="highlight-keyword">new</span> SkeletonMapper(_kinectWrapper.SkeletonPoseA, _meshNodeA.SkeletonPose);
<span class="highlight-keyword">var</span> ks = _kinectWrapper.SkeletonPoseA.Skeleton;
<span class="highlight-keyword">var</span> ms = _meshNodeA.SkeletonPose.Skeleton;

_skeletonMapperA.BoneMappers.Add(<span class="highlight-keyword">new</span> DirectBoneMapper(ks.GetIndex(<span class="highlight-literal">"HipCenter"</span>), ms.GetIndex(<span class="highlight-literal">"Root"</span>))
{
  MapTranslations = <span class="highlight-keyword">true</span>,
  ScaleAToB = <span class="highlight-number">1</span>f,           <span class="highlight-comment">// TODO: Make this scale factor configurable.</span>
});

_skeletonMapperA.BoneMappers.Add(<span class="highlight-keyword">new</span> UpperBackBoneMapper(
  ks.GetIndex(<span class="highlight-literal">"Spine"</span>), ks.GetIndex(<span class="highlight-literal">"ShoulderCenter"</span>), ks.GetIndex(<span class="highlight-literal">"ShoulderLeft"</span>), ks.GetIndex(<span class="highlight-literal">"ShoulderRight"</span>),
  ms.GetIndex(<span class="highlight-literal">"Spine"</span>), ms.GetIndex(<span class="highlight-literal">"Neck"</span>), ms.GetIndex(<span class="highlight-literal">"R_UpperArm"</span>), ms.GetIndex(<span class="highlight-literal">"L_UpperArm"</span>)));

_skeletonMapperA.BoneMappers.Add(<span class="highlight-keyword">new</span> ChainBoneMapper(ks.GetIndex(<span class="highlight-literal">"ShoulderLeft"</span>), ks.GetIndex(<span class="highlight-literal">"ElbowLeft"</span>), ms.GetIndex(<span class="highlight-literal">"R_UpperArm"</span>), ms.GetIndex(<span class="highlight-literal">"R_Forearm"</span>)));
_skeletonMapperA.BoneMappers.Add(<span class="highlight-keyword">new</span> ChainBoneMapper(ks.GetIndex(<span class="highlight-literal">"ShoulderRight"</span>), ks.GetIndex(<span class="highlight-literal">"ElbowRight"</span>), ms.GetIndex(<span class="highlight-literal">"L_UpperArm"</span>), ms.GetIndex(<span class="highlight-literal">"L_Forearm"</span>)));
_skeletonMapperA.BoneMappers.Add(<span class="highlight-keyword">new</span> ChainBoneMapper(ks.GetIndex(<span class="highlight-literal">"ElbowLeft"</span>), ks.GetIndex(<span class="highlight-literal">"WristLeft"</span>), ms.GetIndex(<span class="highlight-literal">"R_Forearm"</span>), ms.GetIndex(<span class="highlight-literal">"R_Hand"</span>)));
_skeletonMapperA.BoneMappers.Add(<span class="highlight-keyword">new</span> ChainBoneMapper(ks.GetIndex(<span class="highlight-literal">"ElbowRight"</span>), ks.GetIndex(<span class="highlight-literal">"WristRight"</span>), ms.GetIndex(<span class="highlight-literal">"L_Forearm"</span>), ms.GetIndex(<span class="highlight-literal">"L_Hand"</span>)));
_skeletonMapperA.BoneMappers.Add(<span class="highlight-keyword">new</span> ChainBoneMapper(ks.GetIndex(<span class="highlight-literal">"HipLeft"</span>), ks.GetIndex(<span class="highlight-literal">"KneeLeft"</span>), ms.GetIndex(<span class="highlight-literal">"R_Thigh"</span>), ms.GetIndex(<span class="highlight-literal">"R_Knee"</span>)));
_skeletonMapperA.BoneMappers.Add(<span class="highlight-keyword">new</span> ChainBoneMapper(ks.GetIndex(<span class="highlight-literal">"HipRight"</span>), ks.GetIndex(<span class="highlight-literal">"KneeRight"</span>), ms.GetIndex(<span class="highlight-literal">"L_Thigh1"</span>), ms.GetIndex(<span class="highlight-literal">"L_Knee2"</span>)));
_skeletonMapperA.BoneMappers.Add(<span class="highlight-keyword">new</span> ChainBoneMapper(ks.GetIndex(<span class="highlight-literal">"KneeLeft"</span>), ks.GetIndex(<span class="highlight-literal">"AnkleLeft"</span>), ms.GetIndex(<span class="highlight-literal">"R_Knee"</span>), ms.GetIndex(<span class="highlight-literal">"R_Ankle"</span>)));
_skeletonMapperA.BoneMappers.Add(<span class="highlight-keyword">new</span> ChainBoneMapper(ks.GetIndex(<span class="highlight-literal">"KneeRight"</span>), ks.GetIndex(<span class="highlight-literal">"AnkleRight"</span>), ms.GetIndex(<span class="highlight-literal">"L_Knee2"</span>), ms.GetIndex(<span class="highlight-literal">"L_Ankle1"</span>)));
_skeletonMapperA.BoneMappers.Add(<span class="highlight-keyword">new</span> ChainBoneMapper(ks.GetIndex(<span class="highlight-literal">"ShoulderCenter"</span>), ks.GetIndex(<span class="highlight-literal">"Head"</span>), ms.GetIndex(<span class="highlight-literal">"Neck"</span>), ms.GetIndex(<span class="highlight-literal">"Head"</span>)));</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAEADAAA");</script><p>
                    The setup for the Space Marine model looks similar – only the bone names are different.
                    The sample source code, contains additional comments and explanations.
                </p><p>
                    In each frame the
                    <a href="a7831d7c-7e10-fe62-0ee8-de79b94907c7.htm">SkeletonMapper</a>
                    is called to transfer the current pose of the Kinect player skeleton to the skeleton of the 3D model:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EABADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EABADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EABADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EABADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">_skeletonMapperA.MapAToB();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EABADAAA");</script><p>
                    Kinect sensor input is not perfect and might cause jittering. Jittering can be reduced by
                    applying a low-pass filter to the bone orientations.
                </p></div><div class="collapsibleAreaRegion" id="Marionette"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />The marionette ragdoll approach</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
                    The second method uses a completely different approach:
                    A physics ragdoll is created for the Dude, which is used to animate the model. Certain
                    joints of the Kinect player skeleton are used as target positions (e.g. hands, elbows,
                    head, knees, etc.). The ragdoll is attached to the target positions using weak ball joint
                    constraints. – This is like a marionette: The ragdoll is the puppet and the ball joints are
                    strings that pull on the marionette.
                </p><p>
                    This approach is more complex: A suitable ragdoll needs to be created for each 3D model.
                    It can be difficult to make this approach stable. A lot of parameter tuning is required.
                </p></div><div class="collapsibleAreaRegion" id="Comparison"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Comparison</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
                    The skeleton mapping approach is a lot simpler and in most cases yields better results.
                    But the direct mapping does not prevent unrealistic poses, for example, when the Kinect
                    reports wrong data and the 3D model ends up in an unrealistic, twisted pose.
                </p><p>
                    The marionette approach is difficult to use, but has the advantage of configurable joint
                    limits: The ragdoll can be set up with proper limits to prevent unrealistic rotations.
                    In addition, the ragdoll can interact with other objects. It can push other bodies – and
                    it can itself be pushed by other objects.
                </p><p>
                    In practice the skeleton mapping approach will satisfy most needs.
                </p></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>