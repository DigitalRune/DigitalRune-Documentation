<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Step 8: Rendering models</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="253857cc-d401-4788-ae6e-4ca12a94a21e" /><meta name="Description" content="In this step we will render the previously added model." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d94d3673-de15-47f9-a122-70b4d97b5920.htm" title="General" tocid="d94d3673-de15-47f9-a122-70b4d97b5920">General</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="4d7ccf95-54e8-4b4c-950f-9420947b4e24.htm" title="Tutorials" tocid="4d7ccf95-54e8-4b4c-950f-9420947b4e24">Tutorials</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6ce9b230-eed2-419d-92df-3e3e4a03d27e.htm" title="Tutorial 01: Adding DigitalRune Engine to an XNA Game" tocid="6ce9b230-eed2-419d-92df-3e3e4a03d27e">Tutorial 01: Adding DigitalRune Engine to an XNA Game</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8befb151-f7b6-4884-936b-530458b13860.htm" title="Step 1: Setup" tocid="8befb151-f7b6-4884-936b-530458b13860">Step 1: Setup</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="25418622-e634-4741-8d17-efc9fb44fba7.htm" title="Step 2: Empty game" tocid="25418622-e634-4741-8d17-efc9fb44fba7">Step 2: Empty game</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="0c04e065-a5fb-4045-bc09-7cce47c63d4e.htm" title="Step 3: Input service" tocid="0c04e065-a5fb-4045-bc09-7cce47c63d4e">Step 3: Input service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="26ebc8f3-4778-4979-a217-1d85e2c5ae31.htm" title="Step 4: Graphics service" tocid="26ebc8f3-4778-4979-a217-1d85e2c5ae31">Step 4: Graphics service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="efe7ad45-ea74-4e57-810d-93bc3ef3a28f.htm" title="Step 5: Debug rendering" tocid="efe7ad45-ea74-4e57-810d-93bc3ef3a28f">Step 5: Debug rendering</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="da752ba9-7056-4485-9b90-d6070cb7c1e8.htm" title="Step 6: Game object service" tocid="da752ba9-7056-4485-9b90-d6070cb7c1e8">Step 6: Game object service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5.htm" title="Step 7: Model content" tocid="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5">Step 7: Model content</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="253857cc-d401-4788-ae6e-4ca12a94a21e.htm" title="Step 8: Rendering models" tocid="253857cc-d401-4788-ae6e-4ca12a94a21e">Step 8: Rendering models</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="cdc88d41-dcb6-4464-be17-46d29a15d25a.htm" title="Step 9: Animated Model" tocid="cdc88d41-dcb6-4464-be17-46d29a15d25a">Step 9: Animated Model</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="a1c6f3cc-8a48-4c68-9401-421d36f67eba.htm" title="Step 10: More debug rendering" tocid="a1c6f3cc-8a48-4c68-9401-421d36f67eba">Step 10: More debug rendering</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="dd394bdc-c9ec-442a-929d-7141f7b301ae.htm" title="Step 11: Physics" tocid="dd394bdc-c9ec-442a-929d-7141f7b301ae">Step 11: Physics</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="aa0a6f8f-d355-4188-9d4a-7041160411d1.htm" title="Step 12: Particles" tocid="aa0a6f8f-d355-4188-9d4a-7041160411d1">Step 12: Particles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="c060be3d-f85f-4551-838c-6969ab45b0b4.htm" title="Step 13: Sky box" tocid="c060be3d-f85f-4551-838c-6969ab45b0b4">Step 13: Sky box</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="68c9f201-aa9c-4b7f-bf96-a57893faddfe.htm" title="Step 14: Post-processing" tocid="68c9f201-aa9c-4b7f-bf96-a57893faddfe">Step 14: Post-processing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="b035aaae-87fb-48c6-86de-e30024ec9a89.htm" title="Step 15: Add DigitalRune Graphics content" tocid="b035aaae-87fb-48c6-86de-e30024ec9a89">Step 15: Add DigitalRune Graphics content</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="77f82858-2022-41f9-9325-9a4d97b5450d.htm" title="Step 16: GUI" tocid="77f82858-2022-41f9-9325-9a4d97b5450d">Step 16: GUI</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7f0f5338-019d-4ef1-a579-3d99df4e1aa2.htm" title="Step 17: Deferred lighting" tocid="7f0f5338-019d-4ef1-a579-3d99df4e1aa2">Step 17: Deferred lighting</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">Step 8: Rendering models</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
                In this step we will render the previously added model.
            </p></div><div class="collapsibleAreaRegion" id="Scene"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />
                Add a scene and mesh rendering to the graphics screen
            </span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    Before we load the models, we need some code which can render these graphics objects.
                </p><p>
                    Add following code to <em>MyGraphicsScreen.cs</em>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACAEAAA_tab1" class="codeSnippetContainerTabSingle">MyGraphicsScreen.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGraphicsScreen : GraphicsScreen
    {
        <span class="highlight-keyword">private</span> MeshRenderer _meshRenderer;                                             <span class="highlight-comment">// NEW</span>

        <span class="highlight-keyword">public</span> DebugRenderer DebugRenderer { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }
        <span class="highlight-keyword">public</span> CameraNode CameraNode { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
        <span class="highlight-keyword">public</span> Scene Scene { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }                                        <span class="highlight-comment">// NEW</span>

        <span class="highlight-keyword">public</span> MyGraphicsScreen(IGraphicsService graphicsService)
            : <span class="highlight-keyword">base</span>(graphicsService)
        {
            _meshRenderer = <span class="highlight-keyword">new</span> MeshRenderer();                                         <span class="highlight-comment">// NEW</span>

            <span class="highlight-keyword">var</span> spriteFont = graphicsService.Content.Load&lt;SpriteFont&gt;(<span class="highlight-literal">"SpriteFont1"</span>);
            DebugRenderer = <span class="highlight-keyword">new</span> DebugRenderer(graphicsService, spriteFont);

            Scene = <span class="highlight-keyword">new</span> Scene();                                                        <span class="highlight-comment">// NEW</span>
        }
        
        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUpdate(TimeSpan deltaTime)
        {
            Scene.Update(deltaTime);                                                    <span class="highlight-comment">// NEW</span>
        }
        
        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnRender(RenderContext context)
        {
            <span class="highlight-keyword">var</span> graphicsDevice = GraphicsService.GraphicsDevice;
            graphicsDevice.Clear(Color.CornflowerBlue);

            context.CameraNode = CameraNode;
            context.Scene = Scene;                                                      <span class="highlight-comment">// NEW</span>

            <span class="highlight-comment">// Frustum Culling: Get all the scene nodes that intersect camera frustum.  // NEW</span>
            <span class="highlight-keyword">var</span> query = Scene.Query&lt;CameraFrustumQuery&gt;(context.CameraNode, context);   <span class="highlight-comment">// NEW</span>

            <span class="highlight-comment">// Render opaque meshes.                                                    // NEW</span>
            graphicsDevice.DepthStencilState = DepthStencilState.Default;               <span class="highlight-comment">// NEW</span>
            graphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;      <span class="highlight-comment">// NEW</span>
            graphicsDevice.BlendState = BlendState.Opaque;                              <span class="highlight-comment">// NEW</span>
            graphicsDevice.SamplerStates[<span class="highlight-number">0</span>] = SamplerState.AnisotropicWrap;             <span class="highlight-comment">// NEW</span>
            context.RenderPass = <span class="highlight-literal">"Default"</span>;                                             <span class="highlight-comment">// NEW</span>
            _meshRenderer.Render(query.SceneNodes, context);                            <span class="highlight-comment">// NEW</span>
            context.RenderPass = <span class="highlight-keyword">null</span>;                                                  <span class="highlight-comment">// NEW</span>

            DebugRenderer.Render(context);

            context.Scene = <span class="highlight-keyword">null</span>;                                                       <span class="highlight-comment">// NEW</span>
            context.CameraNode = <span class="highlight-keyword">null</span>;
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAEAAA");</script><p>
                    We have added a <strong>MeshRenderer</strong> and a <strong>Scene</strong>.
                    A <strong>Scene</strong> manages <strong>SceneNodes</strong> in a
                    structure called a <span class="term">scene graph</span>. The scene is updated once per
                    frame in <strong>MyGraphicsScreen.OnUpdate</strong>.
                </p><p>
                    In <strong>OnRender</strong> we add the scene to the render context. Then
                    we use the scene to perform a scene query. In this case, we ask the scene for all
                    scene nodes which are visible from the current camera.
                    Then we set render states for normal opaque drawing and use the mesh renderer to
                    render all scene nodes, which were returend by the scene query.
                </p></div><div class="collapsibleAreaRegion" id="Model"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Load model and add it to the scene</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    Let's load a model in our game component and add it to the scene using a new game
                    object <em>GroundObject.cs</em>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EANADAAA_tab1" class="codeSnippetContainerTabSingle">GroundObject.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EANADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EANADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EANADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> DigitalRune.Game;
<span class="highlight-keyword">using</span> DigitalRune.Graphics.SceneGraph;
<span class="highlight-keyword">using</span> DigitalRune.Mathematics.Algebra;
<span class="highlight-keyword">using</span> Microsoft.Practices.ServiceLocation;
<span class="highlight-keyword">using</span> Microsoft.Xna.Framework;

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> GroundObject : GameObject
    {
        <span class="highlight-keyword">private</span> ModelNode _modelNode;

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnLoad()
        {
            <span class="highlight-keyword">var</span> game = ServiceLocator.Current.GetInstance&lt;Game&gt;();
            <span class="highlight-keyword">var</span> scene = ServiceLocator.Current.GetInstance&lt;IScene&gt;();

            _modelNode = game.Content.Load&lt;ModelNode&gt;(<span class="highlight-literal">"Ground/Ground"</span>).Clone();
            _modelNode.ScaleLocal = <span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">0.5</span>f);
            scene.Children.Add(_modelNode);
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUnload()
        {
            _modelNode.Parent.Children.Remove(_modelNode);
            _modelNode.Dispose(<span class="highlight-keyword">false</span>);
            _modelNode = <span class="highlight-keyword">null</span>;
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUpdate(TimeSpan deltaTime)
        {
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EANADAAA");</script><p>
                    The model is loaded in <strong>OnLoad</strong>.
                </p><p>
                    The <strong>ModelNode</strong> is a scene node. This node has one or more
                    children which are <strong>MeshNodes</strong>. And <strong>MeshNodes</strong>
                    are scene nodes which can be rendered by the <strong>MeshRenderer</strong>
                    in the graphics screen.
                </p><p>
                    When the <strong>ModelNode</strong> is loaded, it is immediately cloned:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAJADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAJADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAJADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAJADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">_modelNode = game.Content.Load&lt;ModelNode&gt;(<span class="highlight-literal">"Ground/Ground"</span>).Clone();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAJADAAA");</script><p>
                    This is done because <strong>game.Content.Load</strong> will always return
                    the same shared <strong>ModelNode</strong> instance. That means, everyone
                    who loads the model gets the same shared instance. Since we change some properties
                    of the model, like the scale, we create our own clone of the model before we modify it.
                </p><p>
                    In <strong>OnUnload</strong> we remove the model node from its parent node
                    (which is the scene) and dispose our clone of the model.
                </p><p>
                    In <em>MyGameComponent.cs</em> we add the new <strong>GroundObject</strong>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFADAAA_tab1" class="codeSnippetContainerTabSingle">MyGameComponent.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">using</span> DigitalRune.Graphics.SceneGraph;
<span class="highlight-keyword">using</span> DigitalRune.ServiceLocation;
…

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGameComponent : Microsoft.Xna.Framework.GameComponent
    {
        …
        <span class="highlight-keyword">public</span> MyGameComponent(Game game)
            : <span class="highlight-keyword">base</span>(game)
        {
            _inputService = ServiceLocator.Current.GetInstance&lt;IInputService&gt;();

            _graphicsService = ServiceLocator.Current.GetInstance&lt;IGraphicsService&gt;();
            
            _myGraphicsScreen = <span class="highlight-keyword">new</span> MyGraphicsScreen(_graphicsService);
            _graphicsService.Screens.Add(_myGraphicsScreen);
            ((ServiceContainer)ServiceLocator.Current).Register(<span class="highlight-keyword">typeof</span>(IScene), <span class="highlight-keyword">null</span>, _myGraphicsScreen.Scene);   <span class="highlight-comment">// NEW</span>

            <span class="highlight-keyword">var</span> gameObjectService = ServiceLocator.Current.GetInstance&lt;IGameObjectService&gt;();
            <span class="highlight-keyword">var</span> cameraObject = <span class="highlight-keyword">new</span> CameraObject();
            _myGraphicsScreen.CameraNode = cameraObject.CameraNode;
            gameObjectService.Objects.Add(cameraObject);

            gameObjectService.Objects.Add(<span class="highlight-keyword">new</span> GroundObject());                                                    <span class="highlight-comment">// NEW</span>

            _myGraphicsScreen.DebugRenderer.DrawText(<span class="highlight-literal">"MyGame"</span>);
            _myGraphicsScreen.DebugRenderer.DrawAxes(Pose.Identity, <span class="highlight-number">1</span>, <span class="highlight-keyword">false</span>);
        }
        …</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFADAAA");</script><p>
                    This code also adds the scene to the service container.
                </p><p>
                    Run the game and…
                </p><div class="mediaNear"><img alt="Tutorial-01-14" src="../media/Tutorial-01-14.png" /></div><p>
                    …the ground is there but black!?
                </p><p>
                    The model is rendered in black because it is actually dark in the scene. We have
                    not specified any lights yet.
                </p></div><div class="collapsibleAreaRegion" id="Lights"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Add lights</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
                    The material of a model is only visible if a light shines onto it. Let's add a
                    <em>LightObject.cs</em>, which adds some lights to the scene:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAEACAAA_tab1" class="codeSnippetContainerTabSingle">LightObject.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAEACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAEACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> DigitalRune.Game;
<span class="highlight-keyword">using</span> DigitalRune.Geometry;
<span class="highlight-keyword">using</span> DigitalRune.Graphics;
<span class="highlight-keyword">using</span> DigitalRune.Graphics.SceneGraph;
<span class="highlight-keyword">using</span> DigitalRune.Mathematics.Algebra;
<span class="highlight-keyword">using</span> Microsoft.Practices.ServiceLocation;

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> LightsObject : GameObject
    {
        <span class="highlight-keyword">private</span> LightNode _ambientLightNode;
        <span class="highlight-keyword">private</span> LightNode _sunlightNode;

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnLoad()
        {
            <span class="highlight-keyword">var</span> scene = ServiceLocator.Current.GetInstance&lt;IScene&gt;();

            <span class="highlight-keyword">var</span> ambientLight = <span class="highlight-keyword">new</span> AmbientLight
            {
                Color = <span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">0.45</span>f, <span class="highlight-number">0.45</span>f, <span class="highlight-number">0.5</span>f),
                HdrScale = <span class="highlight-number">0.1</span>f,
                HemisphericAttenuation = <span class="highlight-number">0.8</span>f,
            };
            _ambientLightNode = <span class="highlight-keyword">new</span> LightNode(ambientLight);
            scene.Children.Add(_ambientLightNode);

            <span class="highlight-keyword">var</span> sunlight = <span class="highlight-keyword">new</span> DirectionalLight
            {
                Color = <span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">1</span>, <span class="highlight-number">0.9607844</span>f, <span class="highlight-number">0.9078432</span>f),
                HdrScale = <span class="highlight-number">0.4</span>f,
            };
            _sunlightNode = <span class="highlight-keyword">new</span> LightNode(sunlight)
            {
                PoseWorld = <span class="highlight-keyword">new</span> Pose(QuaternionF.CreateRotationY(<span class="highlight-number">-1.4</span>f) * QuaternionF.CreateRotationX(<span class="highlight-number">-0.6</span>f)),
                Shadow = <span class="highlight-keyword">new</span> CascadedShadow
                {
                    PreferredSize = <span class="highlight-number">1024</span>,
                    Prefer16Bit = <span class="highlight-keyword">true</span>,
                }
            };
            scene.Children.Add(_sunlightNode);
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUnload()
        {
            _ambientLightNode.Parent.Children.Remove(_ambientLightNode);
            _ambientLightNode.Dispose(<span class="highlight-keyword">false</span>);
            _ambientLightNode = <span class="highlight-keyword">null</span>;

            _sunlightNode.Parent.Children.Remove(_sunlightNode);
            _sunlightNode.Dispose(<span class="highlight-keyword">false</span>);
            _sunlightNode = <span class="highlight-keyword">null</span>;
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUpdate(TimeSpan deltaTime)
        {
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEACAAA");</script><p>
                    In <em>MyGameComponent.cs</em>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACACAAA_tab1" class="codeSnippetContainerTabSingle">MyGameComponent.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">    …
    <span class="highlight-keyword">public</span> MyGameComponent(Game game)
        : <span class="highlight-keyword">base</span>(game)
    {
        …
        gameObjectService.Objects.Add(<span class="highlight-keyword">new</span> GroundObject());
        gameObjectService.Objects.Add(<span class="highlight-keyword">new</span> LightsObject());                    <span class="highlight-comment">// NEW</span>

        _myGraphicsScreen.DebugRenderer.DrawText(<span class="highlight-literal">"MyGame"</span>);
        _myGraphicsScreen.DebugRenderer.DrawAxes(Pose.Identity, <span class="highlight-number">1</span>, <span class="highlight-keyword">false</span>);
    }
    …</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACACAAA");</script><p>
                    If the light shines onto a mesh, we can see its material:
                </p><div class="mediaNear"><img alt="Tutorial-01-15" src="../media/Tutorial-01-15.jpg" /></div></div><div class="collapsibleAreaRegion" id="Next"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Next</span></div><div id="ID4RBSection" class="collapsibleSection"><p><a href="cdc88d41-dcb6-4464-be17-46d29a15d25a.htm">Step 9: Animated Model</a></p></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>