<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Step 3: Input service</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="0c04e065-a5fb-4045-bc09-7cce47c63d4e" /><meta name="Description" content="Let's add the DigitalRune input service to the game and use it to exit the game when ESC is pressed." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d94d3673-de15-47f9-a122-70b4d97b5920.htm" title="General" tocid="d94d3673-de15-47f9-a122-70b4d97b5920">General</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="4d7ccf95-54e8-4b4c-950f-9420947b4e24.htm" title="Tutorials" tocid="4d7ccf95-54e8-4b4c-950f-9420947b4e24">Tutorials</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6ce9b230-eed2-419d-92df-3e3e4a03d27e.htm" title="Tutorial 01: Adding DigitalRune Engine to an XNA Game" tocid="6ce9b230-eed2-419d-92df-3e3e4a03d27e">Tutorial 01: Adding DigitalRune Engine to an XNA Game</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8befb151-f7b6-4884-936b-530458b13860.htm" title="Step 1: Setup" tocid="8befb151-f7b6-4884-936b-530458b13860">Step 1: Setup</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="25418622-e634-4741-8d17-efc9fb44fba7.htm" title="Step 2: Empty game" tocid="25418622-e634-4741-8d17-efc9fb44fba7">Step 2: Empty game</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="0c04e065-a5fb-4045-bc09-7cce47c63d4e.htm" title="Step 3: Input service" tocid="0c04e065-a5fb-4045-bc09-7cce47c63d4e">Step 3: Input service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="26ebc8f3-4778-4979-a217-1d85e2c5ae31.htm" title="Step 4: Graphics service" tocid="26ebc8f3-4778-4979-a217-1d85e2c5ae31">Step 4: Graphics service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="efe7ad45-ea74-4e57-810d-93bc3ef3a28f.htm" title="Step 5: Debug rendering" tocid="efe7ad45-ea74-4e57-810d-93bc3ef3a28f">Step 5: Debug rendering</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="da752ba9-7056-4485-9b90-d6070cb7c1e8.htm" title="Step 6: Game object service" tocid="da752ba9-7056-4485-9b90-d6070cb7c1e8">Step 6: Game object service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5.htm" title="Step 7: Model content" tocid="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5">Step 7: Model content</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="253857cc-d401-4788-ae6e-4ca12a94a21e.htm" title="Step 8: Rendering models" tocid="253857cc-d401-4788-ae6e-4ca12a94a21e">Step 8: Rendering models</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="cdc88d41-dcb6-4464-be17-46d29a15d25a.htm" title="Step 9: Animated Model" tocid="cdc88d41-dcb6-4464-be17-46d29a15d25a">Step 9: Animated Model</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="a1c6f3cc-8a48-4c68-9401-421d36f67eba.htm" title="Step 10: More debug rendering" tocid="a1c6f3cc-8a48-4c68-9401-421d36f67eba">Step 10: More debug rendering</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="dd394bdc-c9ec-442a-929d-7141f7b301ae.htm" title="Step 11: Physics" tocid="dd394bdc-c9ec-442a-929d-7141f7b301ae">Step 11: Physics</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="aa0a6f8f-d355-4188-9d4a-7041160411d1.htm" title="Step 12: Particles" tocid="aa0a6f8f-d355-4188-9d4a-7041160411d1">Step 12: Particles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="c060be3d-f85f-4551-838c-6969ab45b0b4.htm" title="Step 13: Sky box" tocid="c060be3d-f85f-4551-838c-6969ab45b0b4">Step 13: Sky box</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="68c9f201-aa9c-4b7f-bf96-a57893faddfe.htm" title="Step 14: Post-processing" tocid="68c9f201-aa9c-4b7f-bf96-a57893faddfe">Step 14: Post-processing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="b035aaae-87fb-48c6-86de-e30024ec9a89.htm" title="Step 15: Add DigitalRune Graphics content" tocid="b035aaae-87fb-48c6-86de-e30024ec9a89">Step 15: Add DigitalRune Graphics content</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="77f82858-2022-41f9-9325-9a4d97b5450d.htm" title="Step 16: GUI" tocid="77f82858-2022-41f9-9325-9a4d97b5450d">Step 16: GUI</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7f0f5338-019d-4ef1-a579-3d99df4e1aa2.htm" title="Step 17: Deferred lighting" tocid="7f0f5338-019d-4ef1-a579-3d99df4e1aa2">Step 17: Deferred lighting</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">Step 3: Input service</td></tr></table><span class="introStyle"></span><div class="collapsibleAreaRegion" id="InputService"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Add the input service</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    Let's add the DigitalRune input service to the game and use it to exit the game when ESC is pressed.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACAEAAA_tab1" class="codeSnippetContainerTabSingle">Game1.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">using</span> DigitalRune.Game.Input;                                   <span class="highlight-comment">// NEW</span>
…

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Game1 : Microsoft.Xna.Framework.Game
    {
        …
        <span class="highlight-keyword">public</span> InputManager _inputManager;                      <span class="highlight-comment">// NEW</span>
        …

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Initialize()
        {
            _inputManager = <span class="highlight-keyword">new</span> InputManager(<span class="highlight-keyword">false</span>);            <span class="highlight-comment">// NEW</span>

            <span class="highlight-keyword">base</span>.Initialize();
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Update(GameTime gameTime)
        {
            _inputManager.Update(gameTime.ElapsedGameTime);     <span class="highlight-comment">// NEW</span>

            <span class="highlight-keyword">if</span> (_inputManager.IsDown(Keys.Escape))              <span class="highlight-comment">// NEW</span>
                Exit();                                         <span class="highlight-comment">// NEW</span>

            <span class="highlight-keyword">base</span>.Update(gameTime);
        }
        …</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAEAAA");</script><p>
                    Here you can see a common pattern: A service/manager is created in
                    <strong>Game.Initialize</strong>.
                    It is updated in <strong>Game.Update</strong>. Most services/managers
                    in the DigitalRune Engine are used like this.
                </p><p>
                    If you run the game, you should be able to exit by pressing ESC on the keyboard.
                </p></div><div class="collapsibleAreaRegion" id="MyGameComponent"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Add a game component</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    Personally, I prefer to keep my <strong>Game</strong> class clean and
                    move have any game-specific update logic and input handling (like handling the
                    ESC key) in a separate class.
                </p><p>
                    Let's add an item <em>MyGameComponent.cs</em> to the project and
                    move the input handling into this class:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFADAAA_tab1" class="codeSnippetContainerTabSingle">MyGameComponent.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> Microsoft.Xna.Framework;
<span class="highlight-keyword">using</span> Microsoft.Xna.Framework.Input;

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGameComponent : Microsoft.Xna.Framework.GameComponent
    {
        <span class="highlight-keyword">public</span> MyGameComponent(Game game)
            : <span class="highlight-keyword">base</span>(game)
        {
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Update(GameTime gameTime)
        {
            <span class="highlight-keyword">if</span> (((Game1)Game)._inputManager.IsDown(Keys.Escape))
                Game.Exit();

            <span class="highlight-keyword">base</span>.Update(gameTime);
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFADAAA");</script><p>
                    In <em>Game1.cs</em> we create an instance of this game
                    component. The input handling is removed.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADADAAA_tab1" class="codeSnippetContainerTabSingle">Game1.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Game1 : Microsoft.Xna.Framework.Game
{
    …

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Initialize()
    {
        _inputManager = <span class="highlight-keyword">new</span> InputManager(<span class="highlight-keyword">false</span>);

        Components.Add(<span class="highlight-keyword">new</span> MyGameComponent(<span class="highlight-keyword">this</span>));          <span class="highlight-comment">// NEW</span>

        <span class="highlight-keyword">base</span>.Initialize();
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Update(GameTime gameTime)
    {
        _inputManager.Update(gameTime.ElapsedGameTime);
        
        <span class="highlight-comment">//// Allows the game to exit                        // REMOVE</span>
        <span class="highlight-comment">//if (_inputManager.IsDown(Keys.Escape))            // REMOVE</span>
        <span class="highlight-comment">//  Exit();                                         // REMOVE</span>
        
        <span class="highlight-keyword">base</span>.Update(gameTime);
    }
    …</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADADAAA");</script><p>
                    The <strong>Game</strong> class is now cleaner. However, the game
                    component uses following code to access the input manager:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">if</span> (((Game1)Game)._inputManager.IsDown(Keys.Escape))</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABADAAA");</script><p>
                    That means, every class in the game that wants to use the input service must
                    have a reference to the <strong>Game</strong> instance. This is fine for
                    small project. However, in more complex projects we want to <em>decouple</em> classes.
                    This makes the whole code more reusable and maintainable. A design pattern that
                    can be used for this is the <span class="term">service provider pattern</span>.
                </p></div><div class="collapsibleAreaRegion" id="ServiceContainer"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Add a service container</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
                    Let's use the service provider pattern in our game using the
                    <a href="fac79e7c-47fb-e5e6-9f47-485010679f34.htm">DigitalRune.ServiceLocation<span id="LSTB71EEEA4_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTB71EEEA4_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ServiceContainer</a>
                    class.
                </p><p>
                    Add following in <em>Game1.cs</em>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFACAAA_tab1" class="codeSnippetContainerTabSingle">Game1.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">using</span> DigitalRune.ServiceLocation;                                                  <span class="highlight-comment">// NEW</span>
<span class="highlight-keyword">using</span> Microsoft.Practices.ServiceLocation;                                          <span class="highlight-comment">// NEW</span>
…

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Game1 : Microsoft.Xna.Framework.Game
    {
        …
        <span class="highlight-keyword">private</span> ServiceContainer _services;                                         <span class="highlight-comment">// NEW</span>
        <span class="highlight-keyword">private</span> InputManager _inputManager;                                         <span class="highlight-comment">// NEW: private instead of public</span>
        …

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Initialize()
        {
            _services = <span class="highlight-keyword">new</span> ServiceContainer();                                     <span class="highlight-comment">// NEW</span>
            ServiceLocator.SetLocatorProvider(() =&gt; _services);                     <span class="highlight-comment">// NEW</span>

            _services.Register(<span class="highlight-keyword">typeof</span>(Microsoft.Xna.Framework.Game), <span class="highlight-keyword">null</span>, <span class="highlight-keyword">this</span>);   <span class="highlight-comment">// NEW</span>
            _services.Register(<span class="highlight-keyword">typeof</span>(Game1), <span class="highlight-keyword">null</span>, <span class="highlight-keyword">this</span>);                          <span class="highlight-comment">// NEW</span>

            _inputManager = <span class="highlight-keyword">new</span> InputManager(<span class="highlight-keyword">false</span>);
            _services.Register(<span class="highlight-keyword">typeof</span>(IInputService), <span class="highlight-keyword">null</span>, _inputManager);         <span class="highlight-comment">// NEW</span>

            Components.Add(<span class="highlight-keyword">new</span> MyGameComponent(<span class="highlight-keyword">this</span>));

            <span class="highlight-keyword">base</span>.Initialize();
        }
        …
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFACAAA");</script><p>
                    This code creates a <strong>ServiceContainer</strong> instance and uses
                    the <strong>ServiceLocator</strong> to make it globally available.
                    The input service is registered in the service container. The field
                    <strong>Game1._inputManager</strong> doesn't have to be public any more.
                    We also register the <strong>Game</strong> instance itself in the service container.
                </p><p>
                    From now on <strong>MyGameComponent</strong> and any other code in your
                    game can access the input service like this:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACACAAA_tab1" class="codeSnippetContainerTabSingle">MyGameComponent.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> DigitalRune.Game.Input;                                                     <span class="highlight-comment">// NEW</span>
<span class="highlight-keyword">using</span> Microsoft.Practices.ServiceLocation;                                        <span class="highlight-comment">// NEW</span>
<span class="highlight-keyword">using</span> Microsoft.Xna.Framework;
<span class="highlight-keyword">using</span> Microsoft.Xna.Framework.Input;

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGameComponent : Microsoft.Xna.Framework.GameComponent
    {
        <span class="highlight-keyword">private</span> IInputService _inputService;                                      <span class="highlight-comment">// NEW</span>

        <span class="highlight-keyword">public</span> MyGameComponent(Game game)
            : <span class="highlight-keyword">base</span>(game)
        {
            _inputService = ServiceLocator.Current.GetInstance&lt;IInputService&gt;();  <span class="highlight-comment">// NEW</span>
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Update(GameTime gameTime)
        {
            <span class="highlight-comment">//if (((Game1)Game)._inputManager.IsDown(Keys.Escape))                // REMOVE</span>
            <span class="highlight-keyword">if</span> (_inputService.IsDown(Keys.Escape))                                <span class="highlight-comment">// NEW</span>
                Game.Exit();

            <span class="highlight-keyword">base</span>.Update(gameTime);
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACACAAA");</script><p>
                    Another pattern that is used througout the DigitalRune libraries: The manager
                    class, e.g. <strong>InputManager</strong>, implements an interface, e.g.
                    <strong>IInputService</strong>. The <strong>Game</strong> class
                    creates and uses the manager instances. Only the interfaces are registered in the
                    service container. The rest of the game code uses only the interface
                    <strong>IInputService</strong>. This interface contains everything that is
                    needed by other game components.
                </p><p>
                    The service provider pattern is very helpful – however, it is completely optional.
                    You do not need to use it. All DigitalRune libraries will work fine without a
                    service provider.
                </p></div><div class="collapsibleAreaRegion" id="Next"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Next</span></div><div id="ID4RBSection" class="collapsibleSection"><p><a href="26ebc8f3-4778-4979-a217-1d85e2c5ae31.htm">Step 4: Graphics service</a></p></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>