<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Hierarchical Profiler</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="066b3b04-8a74-4f6e-a727-2b6966d62e45" /><meta name="Description" content="In this article, we talk about the second profiler, which is a &quot;hierarchical profiler&quot;. It was inspired by an article in the book Real-Time Hierarchical Profiling (Game Programming Gems 3)." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="dc44c3a5-8545-4253-9da1-62258a00607c.htm" title="DigitalRune Base Library" tocid="dc44c3a5-8545-4253-9da1-62258a00607c">DigitalRune Base Library</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6736e3bc-383c-4d80-a828-c83fea5c3461.htm" title="Performance Profiling" tocid="6736e3bc-383c-4d80-a828-c83fea5c3461">Performance Profiling</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ae51011c-e8a5-4381-b6de-c38102bdfbde.htm" title="Simple Profiler" tocid="ae51011c-e8a5-4381-b6de-c38102bdfbde">Simple Profiler</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="066b3b04-8a74-4f6e-a727-2b6966d62e45.htm" title="Hierarchical Profiler" tocid="066b3b04-8a74-4f6e-a727-2b6966d62e45">Hierarchical Profiler</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">Hierarchical Profiler</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
        In this article, we talk about the second profiler, which is a "hierarchical profiler". It
        was inspired by an article in the book 
        <em>Real-Time Hierarchical Profiling (Game Programming Gems 3)</em>.
      </p><p>
        This class has slightly different goals than the
        <a href="ae51011c-e8a5-4381-b6de-c38102bdfbde.htm">Simple Profiler</a>. The main goal is to measure the
        timing of nested method calls. This is extremely helpful in many applications – in particular
        if you need to optimize your game loop. An important difference between the simple profiler
        and the hierarchical profiler is that the hierarchical profiler does not work across multiple
        threads. That’s why we still need the simple profiler. The simple profiler can be used to
        collect values and to profile code in multi-threaded scenarios.
      </p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Overview">Overview</a></li><li class="outlineSectionEntry"><a href="#Example">Example</a></li></ul></div><div class="collapsibleAreaRegion" id="Overview"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Overview</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
          The
          <a href="893761eb-142b-efbf-bd73-3d00ddecc271.htm">HierarchicalProfiler</a>
          class can be found in the namespace
          <strong>DigitalRune.Diagnostics</strong>. Here is a class diagram of the relevant classes.
        </p><div class="mediaNear"><img alt="Digital Rune.Diagnostics Hierarchical" src="../media/DigitalRune.Diagnostics_Hierarchical.png" /></div><p>
          Unlike the
          <a href="ae51011c-e8a5-4381-b6de-c38102bdfbde.htm">Profiler</a>
          class, the 
          <a href="893761eb-142b-efbf-bd73-3d00ddecc271.htm">HierarchicalProfiler</a>
          is not a static class. You need to create a new instance
          of the 
          <a href="893761eb-142b-efbf-bd73-3d00ddecc271.htm">HierarchicalProfiler</a>, 
          and this instance must not be shared across threads.
        </p><p>
          Time is measured with
          <a href="ef4255cb-2e4d-d9e9-a5f5-87442a17a458.htm">Start</a>
          and
          <a href="9631f8c7-d2ae-331c-bd6a-7723e37b90e3.htm">Stop</a>.
          This profiler allows nested time measurement – even for recursive calls! If
          <span class="code">Start("Foo")</span>
          is called twice, without calling
          <a href="9631f8c7-d2ae-331c-bd6a-7723e37b90e3.htm">Stop</a>.
        the profiler treats this as a recursive method call. If
        <span class="code">Start("Foo0")</span> and then
        <span class="code">Start("Foo1")</span> is called, the profiler assumes that Foo1 is a method called by Foo0. Thus,
        it builds a tree of profiler data. The root of the tree is
        <a href="45c8817a-6cc2-c406-bee9-769828d80382.htm">Root</a>.
          Each node in the tree is a
          <a href="73022063-17ac-bef2-2f06-91642076faf0.htm">HierarchicalProfilerNode</a>
          and has other child nodes.
        </p><p>
          The method
          <a href="67d992d3-e7b0-2dbd-d229-70283f223a58.htm">NewFrame</a>
          must be called when a new frame of the game starts (= at the beginning of the game’s main
          loop, or at beginning of Game.Update in XNA).
          I guess it gets clearer with an example…
        </p></div><div class="collapsibleAreaRegion" id="Example"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          The following example "simulates" a game. Methods called Update and Draw are called in
          a loop. The Update method calls other methods to compute Physics and AI.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAFABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAFABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAFABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAFABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// The compilation symbol "DIGITALRUNE_PROFILE" must </span>
<span class="highlight-comment">// be defined to activate profiling.</span>
<span class="highlight-preprocessor">#define</span> DIGITALRUNE_PROFILE

<span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.Threading;
<span class="highlight-keyword">using</span> DigitalRune.Diagnostics;

<span class="highlight-keyword">namespace</span> ProfilingTest 
{
  <span class="highlight-keyword">class</span> Program 
  {
    <span class="highlight-comment">// The profiler instance.</span>
    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> HierarchicalProfiler _profiler = <span class="highlight-keyword">new</span> HierarchicalProfiler(<span class="highlight-literal">"MyProfiler"</span>);

    <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args) 
    {
      <span class="highlight-comment">// Start profiling.</span>
      _profiler.Reset();

      <span class="highlight-comment">// This represents the main-loop of a game.</span>
      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; <span class="highlight-number">10</span>; i++) 
      {
        <span class="highlight-comment">// NewFrame() must be called when a new frame of the game begins.</span>
        _profiler.NewFrame();

        Update();
        Draw();
      }

      <span class="highlight-comment">// Write the profiler data to the console. We start at the root node and include </span>
      <span class="highlight-comment">// up to 5 child levels.</span>
      Console.WriteLine(_profiler.Dump(_profiler.Root, <span class="highlight-number">5</span>));
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Update() 
    {
      _profiler.Start(<span class="highlight-literal">"Update"</span>);

      Physics();
      AI();
      AI();
      AI();
      Thread.Sleep(<span class="highlight-number">1</span>);

      _profiler.Stop();
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Physics() 
    {
      _profiler.Start(<span class="highlight-literal">"Physics"</span>);

      Thread.Sleep(<span class="highlight-number">6</span>);

      _profiler.Stop();
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> AI() 
    {  
      _profiler.Start(<span class="highlight-literal">"AI"</span>);

      Thread.Sleep(<span class="highlight-number">3</span>);

      _profiler.Stop();
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Draw() 
    {
      _profiler.Start(<span class="highlight-literal">"Draw"</span>);

      Thread.Sleep(<span class="highlight-number">4</span>);

      _profiler.Stop();
    }
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAFABAAA");</script><p>
          Here is the console output:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EADABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">MyProfiler.Root 20 frames 20.286ms/frame 405.721ms total
  Update 79.8% 16.198ms/frame 1 calls/frame (15.99ms/16.198ms/18ms)
    Physics 29.6% 6.003ms/frame 1 calls/frame (5.367ms/6.003ms/6.356ms)
    AI 45.1% 9.145ms/frame 3 calls/frame (2.389ms/3.048ms/5.107ms)
    Other 5.2% 20.977ms 1.049ms/frame
  Draw 19.6% 3.979ms/frame 1 calls/frame (3.514ms/3.979ms/4.683ms)
  Other 1.2% 4.919ms 245.97µs/frame</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADABAAA");</script><p>
          The dump uses a compacted format. The percentage values show the time of a node relative 
          to the root of the dump. The values in round brackets are 
          Minimum/Average/Maximum times. 'Other' represents the time of a node that was not measured 
          by a child node. (If you don’t like the output format, you can traverse the tree manually, 
          starting at the Root node, and collect the data that is relevant in your particular case.)
        </p><p>
          The output tells us a few things:
        </p><ul><li>
              The main loop of the game was executed 20 times. The average frame time is ~20ms. If we 
              target a 60 fps game (= 16.6 ms/frame), we need to do some optimization.
          </li><li>
              79.9% of the whole game time is spent in Update(). Drawing accounts for 19.6% of the game time.
          </li><li>
              AI uses 45.1% of the whole game time and is called 3 times per frame.
          </li><li>
              ...
          </li></ul></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>