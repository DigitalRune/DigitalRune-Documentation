<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Step 5: Debug rendering</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="efe7ad45-ea74-4e57-810d-93bc3ef3a28f" /><meta name="Description" content="To output text in an XNA game, we need a sprite font. Let's add one:" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d94d3673-de15-47f9-a122-70b4d97b5920.htm" title="General" tocid="d94d3673-de15-47f9-a122-70b4d97b5920">General</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="4d7ccf95-54e8-4b4c-950f-9420947b4e24.htm" title="Tutorials" tocid="4d7ccf95-54e8-4b4c-950f-9420947b4e24">Tutorials</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6ce9b230-eed2-419d-92df-3e3e4a03d27e.htm" title="Tutorial 01: Adding DigitalRune Engine to an XNA Game" tocid="6ce9b230-eed2-419d-92df-3e3e4a03d27e">Tutorial 01: Adding DigitalRune Engine to an XNA Game</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8befb151-f7b6-4884-936b-530458b13860.htm" title="Step 1: Setup" tocid="8befb151-f7b6-4884-936b-530458b13860">Step 1: Setup</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="25418622-e634-4741-8d17-efc9fb44fba7.htm" title="Step 2: Empty game" tocid="25418622-e634-4741-8d17-efc9fb44fba7">Step 2: Empty game</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="0c04e065-a5fb-4045-bc09-7cce47c63d4e.htm" title="Step 3: Input service" tocid="0c04e065-a5fb-4045-bc09-7cce47c63d4e">Step 3: Input service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="26ebc8f3-4778-4979-a217-1d85e2c5ae31.htm" title="Step 4: Graphics service" tocid="26ebc8f3-4778-4979-a217-1d85e2c5ae31">Step 4: Graphics service</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="efe7ad45-ea74-4e57-810d-93bc3ef3a28f.htm" title="Step 5: Debug rendering" tocid="efe7ad45-ea74-4e57-810d-93bc3ef3a28f">Step 5: Debug rendering</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="da752ba9-7056-4485-9b90-d6070cb7c1e8.htm" title="Step 6: Game object service" tocid="da752ba9-7056-4485-9b90-d6070cb7c1e8">Step 6: Game object service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5.htm" title="Step 7: Model content" tocid="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5">Step 7: Model content</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="253857cc-d401-4788-ae6e-4ca12a94a21e.htm" title="Step 8: Rendering models" tocid="253857cc-d401-4788-ae6e-4ca12a94a21e">Step 8: Rendering models</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="cdc88d41-dcb6-4464-be17-46d29a15d25a.htm" title="Step 9: Animated Model" tocid="cdc88d41-dcb6-4464-be17-46d29a15d25a">Step 9: Animated Model</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="a1c6f3cc-8a48-4c68-9401-421d36f67eba.htm" title="Step 10: More debug rendering" tocid="a1c6f3cc-8a48-4c68-9401-421d36f67eba">Step 10: More debug rendering</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="dd394bdc-c9ec-442a-929d-7141f7b301ae.htm" title="Step 11: Physics" tocid="dd394bdc-c9ec-442a-929d-7141f7b301ae">Step 11: Physics</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="aa0a6f8f-d355-4188-9d4a-7041160411d1.htm" title="Step 12: Particles" tocid="aa0a6f8f-d355-4188-9d4a-7041160411d1">Step 12: Particles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="c060be3d-f85f-4551-838c-6969ab45b0b4.htm" title="Step 13: Sky box" tocid="c060be3d-f85f-4551-838c-6969ab45b0b4">Step 13: Sky box</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="68c9f201-aa9c-4b7f-bf96-a57893faddfe.htm" title="Step 14: Post-processing" tocid="68c9f201-aa9c-4b7f-bf96-a57893faddfe">Step 14: Post-processing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="b035aaae-87fb-48c6-86de-e30024ec9a89.htm" title="Step 15: Add DigitalRune Graphics content" tocid="b035aaae-87fb-48c6-86de-e30024ec9a89">Step 15: Add DigitalRune Graphics content</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="77f82858-2022-41f9-9325-9a4d97b5450d.htm" title="Step 16: GUI" tocid="77f82858-2022-41f9-9325-9a4d97b5450d">Step 16: GUI</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7f0f5338-019d-4ef1-a579-3d99df4e1aa2.htm" title="Step 17: Deferred lighting" tocid="7f0f5338-019d-4ef1-a579-3d99df4e1aa2">Step 17: Deferred lighting</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">Step 5: Debug rendering</td></tr></table><span class="introStyle"></span><div class="collapsibleAreaRegion" id="SpriteFont"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Add a sprite font</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
                    To output text in an XNA game, we need a sprite font. Let's add one:
                </p><ol><li>
                        In the VS Solution Explorer right-click <em>MyGameContent</em>.
                    </li><li>
                        Select <span class="ui">Add | New Item…</span></li><li>
                        Select the <em>Sprite Font</em> template.
                    </li><li>
                        Leave the default name (<em>SpriteFont1.spritefont</em>).
                    </li><li>
                        And press <span class="ui">Add</span>.
                    </li></ol></div><div class="collapsibleAreaRegion" id="DebugRenderer"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Add a debug renderer</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    Modify <em>MyGraphicsScreen.cs</em> and add a <strong>DebugRenderer</strong>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAMACAAA_tab1" class="codeSnippetContainerTabSingle">MyGraphicsScreen.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAMACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAMACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAMACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> DigitalRune.Graphics;
<span class="highlight-keyword">using</span> DigitalRune.Graphics.Rendering;                                                   <span class="highlight-comment">// NEW</span>
<span class="highlight-keyword">using</span> Microsoft.Xna.Framework;
<span class="highlight-keyword">using</span> Microsoft.Xna.Framework.Graphics;                                                 <span class="highlight-comment">// NEW</span>

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGraphicsScreen : GraphicsScreen
    {
        <span class="highlight-keyword">public</span> DebugRenderer DebugRenderer { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }                        <span class="highlight-comment">// NEW</span>
        
        <span class="highlight-keyword">public</span> MyGraphicsScreen(IGraphicsService graphicsService)
            : <span class="highlight-keyword">base</span>(graphicsService)
        {
            <span class="highlight-keyword">var</span> spriteFont = graphicsService.Content.Load&lt;SpriteFont&gt;(<span class="highlight-literal">"SpriteFont1"</span>);   <span class="highlight-comment">// NEW</span>
            DebugRenderer = <span class="highlight-keyword">new</span> DebugRenderer(graphicsService, spriteFont);             <span class="highlight-comment">// NEW</span>
        }
        
        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUpdate(TimeSpan deltaTime)
        {
        }
        
        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnRender(RenderContext context)
        {
            <span class="highlight-keyword">var</span> graphicsDevice = GraphicsService.GraphicsDevice;
            graphicsDevice.Clear(Color.CornflowerBlue);

            DebugRenderer.Render(context);                                              <span class="highlight-comment">// NEW</span>
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAMACAAA");</script><p>
                    Draw some debug text in <em>MyGameComponent.cs</em>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAKACAAA_tab1" class="codeSnippetContainerTabSingle">MyGameComponent.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAKACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAKACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAKACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">… 
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGameComponent : Microsoft.Xna.Framework.GameComponent
{
    …

    <span class="highlight-keyword">public</span> MyGameComponent(Game game)
        : <span class="highlight-keyword">base</span>(game)
    {
        _inputService = ServiceLocator.Current.GetInstance&lt;IInputService&gt;();

        _graphicsService = ServiceLocator.Current.GetInstance&lt;IGraphicsService&gt;();
        
        _myGraphicsScreen = <span class="highlight-keyword">new</span> MyGraphicsScreen(_graphicsService);
        _graphicsService.Screens.Add(_myGraphicsScreen);
        
        _myGraphicsScreen.DebugRenderer.DrawText(<span class="highlight-literal">"MyGame"</span>);                             <span class="highlight-comment">// NEW</span>
    }
    …</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAKACAAA");</script><p>
                    Now, the game looks like this:
                </p><div class="mediaNear"><img alt="Tutorial-01-05" src="../media/Tutorial-01-05.png" /></div><p>
                    Next, we use the <strong>DebugRenderer</strong> to render a few arrows
                    at the world origin. Add the following lines in <em>MyGameComponent.cs</em>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAGACAAA_tab1" class="codeSnippetContainerTabSingle">MyGameComponent.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAGACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAGACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAGACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">using</span> DigitalRune.Geometry;                                                     <span class="highlight-comment">// NEW</span>
…

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGameComponent : Microsoft.Xna.Framework.GameComponent
    {
        …

        <span class="highlight-keyword">public</span> MyGameComponent(Game game)
            : <span class="highlight-keyword">base</span>(game)
        {
            …
            _myGraphicsScreen.DebugRenderer.DrawText(<span class="highlight-literal">"MyGame"</span>);
            _myGraphicsScreen.DebugRenderer.DrawAxes(Pose.Identity, <span class="highlight-number">1</span>, <span class="highlight-keyword">false</span>);  <span class="highlight-comment">// NEW</span>
        }
        …</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAGACAAA");</script><p>
                    If you try to run the project, you will get an exception. The
                    <strong>DebugRenderer</strong> lets you know that it cannot render 3D
                    graphics without a camera. The camera is necessary to define the viewpoint of
                    the player.
                </p><p>
                    Let's add a camera in <em>MyGraphicsScreen.cs</em>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EADACAAA_tab1" class="codeSnippetContainerTabSingle">MyGraphicsScreen.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EADACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EADACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EADACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> DigitalRune.Geometry;
<span class="highlight-keyword">using</span> DigitalRune.Graphics;
<span class="highlight-keyword">using</span> DigitalRune.Graphics.Rendering;
<span class="highlight-keyword">using</span> DigitalRune.Graphics.SceneGraph;                                                  <span class="highlight-comment">// NEW</span>
<span class="highlight-keyword">using</span> DigitalRune.Mathematics;                                                          <span class="highlight-comment">// NEW</span>
<span class="highlight-keyword">using</span> DigitalRune.Mathematics.Algebra;                                                  <span class="highlight-comment">// NEW</span>
<span class="highlight-keyword">using</span> Microsoft.Xna.Framework;
<span class="highlight-keyword">using</span> Microsoft.Xna.Framework.Graphics;

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGraphicsScreen : GraphicsScreen
    {
        <span class="highlight-keyword">public</span> DebugRenderer DebugRenderer { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }
        <span class="highlight-keyword">public</span> CameraNode CameraNode { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }                                      <span class="highlight-comment">// NEW</span>

        <span class="highlight-keyword">public</span> MyGraphicsScreen(IGraphicsService graphicsService)
            : <span class="highlight-keyword">base</span>(graphicsService)
        {
            <span class="highlight-keyword">var</span> spriteFont = graphicsService.Content.Load&lt;SpriteFont&gt;(<span class="highlight-literal">"SpriteFont1"</span>);
            DebugRenderer = <span class="highlight-keyword">new</span> DebugRenderer(graphicsService, spriteFont);

            <span class="highlight-keyword">var</span> projection = <span class="highlight-keyword">new</span> PerspectiveProjection();                               <span class="highlight-comment">// NEW</span>
            projection.SetFieldOfView(                                                  <span class="highlight-comment">// NEW</span>
                ConstantsF.PiOver4,                                                     <span class="highlight-comment">// NEW</span>
                    graphicsService.GraphicsDevice.Viewport.AspectRatio,                <span class="highlight-comment">// NEW</span>
                    <span class="highlight-number">0.1</span>f,                                                               <span class="highlight-comment">// NEW</span>
                    <span class="highlight-number">100</span>);                                                               <span class="highlight-comment">// NEW</span>
            <span class="highlight-keyword">var</span> camera = <span class="highlight-keyword">new</span> Camera(projection);                                        <span class="highlight-comment">// NEW</span>
            CameraNode = <span class="highlight-keyword">new</span> CameraNode(camera);                                        <span class="highlight-comment">// NEW</span>
            CameraNode.PoseWorld = <span class="highlight-keyword">new</span> Pose(<span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">3</span>));                     <span class="highlight-comment">// NEW</span>
        }

        …

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnRender(RenderContext context)
        {
            <span class="highlight-keyword">var</span> graphicsDevice = GraphicsService.GraphicsDevice;
            graphicsDevice.Clear(Color.CornflowerBlue);

            context.CameraNode = CameraNode;                                            <span class="highlight-comment">// NEW</span>

            DebugRenderer.Render(context);

            context.CameraNode = <span class="highlight-keyword">null</span>;                                                  <span class="highlight-comment">// NEW</span>
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EADACAAA");</script><p>
                    The camera is positioned at (0, 1, 5). Per default it looks forward (which is
                    the -z direction in XNA and DigitalRune). To let the renderer know which camera
                    it should use, we have to set this information in the
                    <strong>RenderContext</strong> in <strong>MyGraphicsScreen.OnRender</strong>.
                </p><p>
                    Our current game:
                </p><div class="mediaNear"><img alt="Tutorial-01-06" src="../media/Tutorial-01-06.png" /></div></div><div class="collapsibleAreaRegion" id="Next"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Next</span></div><div id="ID3RBSection" class="collapsibleSection"><p><a href="da752ba9-7056-4485-9b90-d6070cb7c1e8.htm">Step 6: Game object service</a></p></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>