<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Graphics Screens</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="2e870374-8980-4fbc-9426-1d1a6e2d9766" /><meta name="Description" content="A graphics screen is a layer in a 3D application. Multiple layers can be stacked on one another, for example:" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="0a8eb9ca-74ae-4746-9289-93d909b07e22.htm" title="DigitalRune Graphics" tocid="0a8eb9ca-74ae-4746-9289-93d909b07e22">DigitalRune Graphics</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="7d5a0abe-8231-452c-895c-e6dbab83822b.htm" title="Graphics Programming" tocid="7d5a0abe-8231-452c-895c-e6dbab83822b">Graphics Programming</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="fda6c965-0105-4a5e-a0db-f8fa6ec4e73f.htm" title="Graphics Service" tocid="fda6c965-0105-4a5e-a0db-f8fa6ec4e73f">Graphics Service</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="2e870374-8980-4fbc-9426-1d1a6e2d9766.htm" title="Graphics Screens" tocid="2e870374-8980-4fbc-9426-1d1a6e2d9766">Graphics Screens</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="4d8c922f-60cb-4b92-a22c-03c9e8816712.htm" title="Scene Management" tocid="4d8c922f-60cb-4b92-a22c-03c9e8816712">Scene Management</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6b3a13bc-37b4-4820-9f82-c2364a9ed2eb.htm" title="Rendering" tocid="6b3a13bc-37b4-4820-9f82-c2364a9ed2eb">Rendering</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="ba1be841-af9c-41a4-8348-0b6bd92efdd9.htm" title="Effects and Effect Bindings" tocid="ba1be841-af9c-41a4-8348-0b6bd92efdd9">Effects and Effect Bindings</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="34a7f065-df4f-4f40-8b5c-5f0afee365db.htm" title="Materials and Material Instances" tocid="34a7f065-df4f-4f40-8b5c-5f0afee365db">Materials and Material Instances</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="cb08d0d8-8ea6-49fc-b318-b185dbb70608.htm" title="Models and Meshes" tocid="cb08d0d8-8ea6-49fc-b318-b185dbb70608">Models and Meshes</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="fda1f969-9b64-4851-873c-a59466ac69ba.htm" title="Cameras" tocid="fda1f969-9b64-4851-873c-a59466ac69ba">Cameras</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="e316a87e-0cdb-4c6b-bcb0-a2e66004c26f.htm" title="Lights" tocid="e316a87e-0cdb-4c6b-bcb0-a2e66004c26f">Lights</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="3f82c46b-efec-4416-807f-670ac1930117.htm" title="Shadows" tocid="3f82c46b-efec-4416-807f-670ac1930117">Shadows</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="630fb69e-a032-4125-bdc0-5484fbe2c86d.htm" title="Lens Flares" tocid="630fb69e-a032-4125-bdc0-5484fbe2c86d">Lens Flares</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="f782dc86-40e9-45c1-869a-4baf86e28ed9.htm" title="Decals" tocid="f782dc86-40e9-45c1-869a-4baf86e28ed9">Decals</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="4518dd2c-21ea-4cf8-8dec-8b3a32584743.htm" title="Billboards and Particles" tocid="4518dd2c-21ea-4cf8-8dec-8b3a32584743">Billboards and Particles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="d4d56ebf-a623-492c-bd37-b41a2979323e.htm" title="Sprites (Images and Text)" tocid="d4d56ebf-a623-492c-bd37-b41a2979323e">Sprites (Images and Text)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="d70873e7-1dbc-492b-b10d-1afb6f06687a.htm" title="Figures (Lines, 2D Shapes)" tocid="d70873e7-1dbc-492b-b10d-1afb6f06687a">Figures (Lines, 2D Shapes)</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="0bc6a222-64d5-4642-a2b6-241e9017c873.htm" title="Fog" tocid="0bc6a222-64d5-4642-a2b6-241e9017c873">Fog</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="975dcbca-5c87-4f33-a372-0cfe7f50cebe.htm" title="Sky" tocid="975dcbca-5c87-4f33-a372-0cfe7f50cebe">Sky</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="46f261f5-750c-4df5-99e2-b6a289f15098.htm" title="Terrain" tocid="46f261f5-750c-4df5-99e2-b6a289f15098">Terrain</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="5697f90f-2893-4ed5-ae66-da63afccdfc3.htm" title="Water" tocid="5697f90f-2893-4ed5-ae66-da63afccdfc3">Water</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="924e5123-9ed9-4db7-bd0c-2ec8589985ed.htm" title="Post-Processing" tocid="924e5123-9ed9-4db7-bd0c-2ec8589985ed">Post-Processing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="b7e96cd7-c737-4805-b5a9-98f1e8acd1d5.htm" title="Anti-Aliasing" tocid="b7e96cd7-c737-4805-b5a9-98f1e8acd1d5">Anti-Aliasing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="b320aebd-46a0-45d8-8edb-0c717152a56b.htm" title="Level of Detail (LOD)" tocid="b320aebd-46a0-45d8-8edb-0c717152a56b">Level of Detail (LOD)</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="cc20d61e-83cb-46c7-a2e2-0841a35043ba.htm" title="Occlusion Culling" tocid="cc20d61e-83cb-46c7-a2e2-0841a35043ba">Occlusion Culling</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7fbfaba5-af8d-4bf7-b5c3-6c084e1bfc54.htm" title="Windows Forms, WPF, UWP Interoperability" tocid="7fbfaba5-af8d-4bf7-b5c3-6c084e1bfc54">Windows Forms, WPF, UWP Interoperability</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="4e6f5dc1-8897-466f-88f2-b5c56d43a3c5.htm" title="Miscellaneous" tocid="4e6f5dc1-8897-466f-88f2-b5c56d43a3c5">Miscellaneous</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">Graphics Screens</td></tr></table><span class="introStyle"></span><div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Intro">What are graphics screens?</a></li><li class="outlineSectionEntry"><a href="#GraphicsScreen">GraphicsScreen</a></li><li class="outlineSectionEntry"><a href="#DelegateGraphicsScreen">DelegateGraphicsScreen</a></li></ul></div><div class="collapsibleAreaRegion" id="Intro"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />What are graphics screens?</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    A <span class="term">graphics screen</span> is a layer in a 3D application. Multiple layers can
                    be stacked on one another, for example:
                </p><ul><li>
                        The first (back) screen renders the 3D world.
                    </li><li>
                        In front of this screen is second screen that renders the HUD.
                    </li><li>
                        In front of these screens is a third screen that renders a 2D GUI, such as an "Options Dialog".
                    </li></ul><p>
                    Different types of applications may consist of a different number and different types of
                    layers. Simple applications may only have a single layer that handles all graphics.
                </p><p>
                    The <span class="term">graphics screen</span> is a concept used to separate rendering code into
                    different classes. The abstract base class <a href="e4cfb891-0b3f-fa9d-4da1-da4936f1adcc.htm">GraphicsScreen</a>
                    provides the base functionality, but does not implement rendering. The rendering code needs
                    to be added in derived classes. Each derived graphics screen implements its own rendering
                    pipeline. That means, a screen that renders the 3D world can use a different rendering pipeline
                    than a screen that draws the HUD, or the GUI, or debug output. Each graphics screen can use
                    its own type of scene management.
                </p><p>
                    Graphics screens needs to be added to the graphics service (see collection
                    <a href="c677cd0e-2c14-a26e-a58b-26e635f6d3ec.htm">IGraphicsService<span id="LST714E4FE5_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST714E4FE5_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Screens</a>).
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Example:</span>
GraphicsService.Screens.Add(worldGraphicsScreen); <span class="highlight-comment">// 3D world</span>
GraphicsService.Screens.Add(hudGraphicsScreen);   <span class="highlight-comment">// HUD</span>
GraphicsService.Screens.Add(guiGraphicsScreen);   <span class="highlight-comment">// GUI (main menu, options dialog, ...)</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADADAAA");</script><p>
                    The graphics service updates and renders all registered screens back to front. The output
                    of one graphics screens can optionally be passed as input to the next graphics screen.
                </p><p>
                    New graphics screens can be implemented by deriving a new type from
                    <a href="e4cfb891-0b3f-fa9d-4da1-da4936f1adcc.htm">GraphicsScreen</a>.
                    Alternatively, a new graphics screen can be created by using a
                    <a href="a4562a67-f8a5-0bfe-320c-a6cd610e4858.htm">DelegateGraphicsScreen</a>
                    and providing <strong>Update</strong> and <strong>Render</strong> callbacks.
                </p><p>
                    DigitalRune Graphics does not provide a predefined rendering pipeline. The rendering
                    pipeline is up to the application. The sample applications demonstrate how to implement
                    different rendering pipelines. For example, the <em>DeferredLightingSample</em>
                    demonstrates how to write a light pre-pass renderer ("deferred lighting").
                </p></div><div class="collapsibleAreaRegion" id="GraphicsScreen"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />GraphicsScreen</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    The <a href="e4cfb891-0b3f-fa9d-4da1-da4936f1adcc.htm">GraphicsScreen</a>
                    is the base class of all graphics screens. It mainly consists of an <a href="4bf3b962-1e24-c0ee-1ea0-381143b6cc52.htm">Update</a>
                    and a <a href="05b357f2-90ab-bd9e-427f-37631751ff09.htm">Render</a>
                    method.
                </p><p>
                    A new graphics screen is created by deriving a new class and implementing <a href="3fa2274a-c3de-7230-614f-fb81bcd91987.htm">OnUpdate</a>
                    and <a href="552dce78-3a36-9a53-1c1f-a0484cafbad0.htm">OnRender</a>.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAEACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAEACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAEACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAEACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGraphicsScreen : GraphicsScreen
{
  <span class="highlight-keyword">public</span> MyGraphicsScreen(IGraphicsService graphicsService)
    : <span class="highlight-keyword">base</span>(graphicsService)
  {
    Name = <span class="highlight-literal">"MyScreen"</span>; <span class="highlight-comment">// Useful for debugging.</span>

    <span class="highlight-comment">// TODO: Create any renderers or resources here.</span>
  }

  <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUpdate(TimeSpan deltaTime)
  {
    <span class="highlight-comment">// TODO: Implement update logic here.</span>
  }

  <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnRender(RenderContext context)
  {
    <span class="highlight-keyword">var</span> graphicsService = context.GraphicsService;
    <span class="highlight-keyword">var</span> graphicsDevice = graphicsService.GraphicsDevice;

    <span class="highlight-comment">// TODO: Implement rendering pipeline here.</span>
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAEACAAA");</script><p>
                    The property <a href="5217e4c3-c7b5-dc64-2313-70f16df40d20.htm">Coverage</a>
                    can be set by the derived graphics screen. It determines whether screens in the
                    background are fully covered or not. For example, the 3D world usually covers the entire screen
                    whereas a HUD only covers parts of the screens. The graphics service reads the property to
                    decide whether graphics screens in the background need to be rendered. If screens are completely
                    hidden, they won't be updated or rendered.
                </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Tip" /> Tip</th></tr><tr><td><p>
                        Always set <a href="5217e4c3-c7b5-dc64-2313-70f16df40d20.htm">Coverage</a>
                        to <a href="0edccc57-d585-18e0-dd6c-9f29a20d2675.htm">Full</a>
                        if the graphics screens covers the entire screen. This improves performance if multiple
                        graphics screens are registered in the graphics service.
                    </p></td></tr></table></div><p>
                    The property <a href="9642c5a6-c05b-e935-16c8-baad7239b79b.htm">IsVisible</a>
                    can be used enable/disable a graphics screens.
                </p><p>
                    The properties <a href="6dd20f84-90ee-ad76-f070-807d69a02f92.htm">RenderPreviousScreensToTexture</a>
                    and <a href="32c47d5b-474e-ed24-4655-5f573756a96d.htm">SourceTextureFormat</a>
                    can be set to render the output of the previous graphics screens into a temporary render target.
                    The output can be read as an input texture by the current graphics screen (see property
                    <a href="a79b5836-820d-ace2-7ff1-7a8f4f3710a6.htm">RenderContext<span id="LST714E4FE5_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST714E4FE5_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>SourceTexture</a>).
                </p></div><div class="collapsibleAreaRegion" id="DelegateGraphicsScreen"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />DelegateGraphicsScreen</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
                    The <a href="a4562a67-f8a5-0bfe-320c-a6cd610e4858.htm">DelegateGraphicsScreen</a>
                    offers a quick and easy way to add a new graphics screen without implementing a new class.
                    All that is required is an
                    <a href="057a07e2-37b3-b35d-a4d4-fe3523f7c012.htm">UpdateCallback</a>
                    and a <a href="07511cb8-a7b5-40e8-e756-82ed3d47d4d8.htm">RenderCallback</a>.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Add a new graphics screen using callbacks.</span>
<span class="highlight-keyword">var</span> delegateGraphicsScreen = <span class="highlight-keyword">new</span> DelegateGraphicsScreen(GraphicsService)
{
  UpdateCallback = <span class="highlight-keyword">delegate</span>(GraphicsScreen screen, TimeSpan deltaTime)
  {
    <span class="highlight-comment">// TODO: Implement update logic here.</span>
  },
  RenderCallback = <span class="highlight-keyword">delegate</span>(RenderContext context) 
  { 
    <span class="highlight-keyword">var</span> graphicsService = context.GraphicsService;
    <span class="highlight-keyword">var</span> graphicsDevice = graphicsService.GraphicsDevice;

    <span class="highlight-comment">// TODO: Implement rendering pipeline here.</span>
  }
};

<span class="highlight-comment">// Register graphics screen in graphics service.</span>
GraphicsService.Screens.Add(delegateGraphicsScreen);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABAAA");</script></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>