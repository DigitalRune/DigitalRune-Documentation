<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ISceneQuery Interface</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="ISceneQuery interface" /><meta name="System.Keywords" content="DigitalRune.Graphics.SceneGraph.ISceneQuery interface" /><meta name="System.Keywords" content="ISceneQuery interface, about ISceneQuery interface" /><meta name="Microsoft.Help.F1" content="DigitalRune.Graphics.SceneGraph.ISceneQuery" /><meta name="Microsoft.Help.Id" content="T:DigitalRune.Graphics.SceneGraph.ISceneQuery" /><meta name="Description" content="Represents a query that can be executed against a scene." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="DigitalRune.Graphics.SceneGraph" /><meta name="file" content="8928eaec-020b-00ed-4ad7-12f83aa1338a" /><meta name="guid" content="8928eaec-020b-00ed-4ad7-12f83aa1338a" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d75eb659-6335-53f6-af7a-81814a21ab7f.htm" title="Class Library Reference" tocid="d75eb659-6335-53f6-af7a-81814a21ab7f">Class Library Reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="fdc51854-e071-5830-fa8e-d34ae26246bf.htm" title="DigitalRune.Graphics.SceneGraph" tocid="fdc51854-e071-5830-fa8e-d34ae26246bf">DigitalRune.Graphics.SceneGraph</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="8928eaec-020b-00ed-4ad7-12f83aa1338a.htm" title="ISceneQuery Interface" tocid="8928eaec-020b-00ed-4ad7-12f83aa1338a">ISceneQuery Interface</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="fe165f22-7a0b-fad5-4ece-811f39017f46.htm" title="ISceneQuery Methods" tocid="fe165f22-7a0b-fad5-4ece-811f39017f46">ISceneQuery Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="64076ded-1d53-37fd-939f-ce5f020232aa.htm" title="ISceneQuery Properties" tocid="64076ded-1d53-37fd-939f-ce5f020232aa">ISceneQuery Properties</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">ISceneQuery Interface</td></tr></table><span class="introStyle"></span><div class="summary">
             Represents a query that can be executed against a scene.
             </div><p> </p><strong>Namespace:</strong> <a href="fdc51854-e071-5830-fa8e-d34ae26246bf.htm">DigitalRune.Graphics.SceneGraph</a><br /><strong>Assembly:</strong> DigitalRune.Graphics (in DigitalRune.Graphics.dll) Version: 1.2.0.0 (1.2.1.14562)<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EDCA_tab1" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cs','1','4');return false;">C#</a></div><div id="ID0EDCA_tab2" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','vb','2','4');return false;">VB</a></div><div id="ID0EDCA_tab3" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','cpp','3','4');return false;">C++</a></div><div id="ID0EDCA_tab4" class="codeSnippetContainerTab"><a href="#" onclick="javascript:ChangeTab('ID0EDCA','fs','4','4');return false;">F#</a></div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EDCA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EDCA');return false;" title="Copy">Copy</a></div></div><div id="ID0EDCA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="identifier">ISceneQuery</span></pre></div><div id="ID0EDCA_code_Div2" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">Public</span> <span class="keyword">Interface</span> <span class="identifier">ISceneQuery</span></pre></div><div id="ID0EDCA_code_Div3" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface class</span> <span class="identifier">ISceneQuery</span></pre></div><div id="ID0EDCA_code_Div4" class="codeSnippetContainerCode" style="display: none"><pre xml:space="preserve"><span class="keyword">type</span> <span class="identifier">ISceneQuery</span> =  <span class="keyword">interface</span> <span class="keyword">end</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EDCA");</script></div><p>The <span class="selflink">ISceneQuery</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID2RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="10d69649-06fe-aa2f-8058-0b434c344731.htm">Reset</a></td><td><div class="summary">
            Resets this query.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="fa4d4c9f-f260-80e0-c2f9-305123bb6c5e.htm">Set</a></td><td><div class="summary">
            Sets the query result. 
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID3RBSection" class="collapsibleSection"><table id="memberList" class="members"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="c77f89c6-2fb9-ffcd-5c2a-f35623e23eb3.htm">ReferenceNode</a></td><td><div class="summary">
            Gets the reference node.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
             A scene query returns all scene nodes that touch a given reference node. Queries can be 
             performed by calling <a href="37c07613-e89b-1421-2947-71255d94933b.htm">Query<span id="LST5ED6F12E_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5ED6F12E_0?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LST5ED6F12E_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5ED6F12E_1?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script>(SceneNode, RenderContext)</a> of a <a href="6e2214b1-b299-2ebf-112c-20cf5510185c.htm">IScene</a>. Here are a few 
             examples of scene queries: 
             <ul><li>
             A <a href="1ff2917c-a904-f22e-287c-3d9fd58a3116.htm">CameraFrustumQuery</a> gets all scene nodes within the camera frustum. The 
             reference node in this query is (usually) a camera node.
             </li><li>
             A <a href="b7e22d31-64a8-6eb3-d0f3-1edd5084c1c2.htm">LightQuery</a> gets all lights that shine light on the reference node.
             </li><li>
             A <a href="b128b7ca-72bc-2c14-c91c-5bb56232ce21.htm">ShadowCasterQuery</a> gets all shadow casters near a light source. The reference
             node in this query is the light node.
             </li></ul></p><p>
             Scene nodes where <a href="9c6350a1-2d01-de65-43fe-b990190b282f.htm">IsEnabled</a> is <span class="keyword"><span id="LST5ED6F12E_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5ED6F12E_2?vb=False|nu=false");</script></span> are ignored and
             do not show up in the query results.
             </p><p><strong>Notes to Implementors:</strong> Classes that implement <span class="selflink">ISceneQuery</span> must 
             have a parameterless constructor.
             </p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID5RBSection" class="collapsibleSection"><p>
             The following examples demonstrates how to create a scene query that collects 
             <a href="150b5feb-ef12-d0be-cd27-0a32759af0ba.htm">MeshNode</a>s.
             </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFDBA_tab1" class="codeSnippetContainerTabSingle">MeshQuery</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFDBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFDBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFDBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> DigitalRune.Graphics;
<span class="highlight-keyword">using</span> DigitalRune.Graphics.SceneGraph;

<span class="highlight-keyword">namespace</span> Samples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MeshQuery : ISceneQuery
  {
    <span class="highlight-keyword">public</span> SceneNode ReferenceNode { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> List&lt;SceneNode&gt; Meshes { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }

    <span class="highlight-keyword">public</span> MeshQuery()
    {
      Meshes = <span class="highlight-keyword">new</span> List&lt;SceneNode&gt;();
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Reset()
    {
      ReferenceNode = <span class="highlight-keyword">null</span>;
      Meshes.Clear();
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Set(SceneNode referenceNode, IList&lt;SceneNode&gt; nodes, RenderContext context)
    {
      Reset();
      ReferenceNode = referenceNode;

      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; nodes.Count; i++)
      {
        <span class="highlight-keyword">var</span> node = nodes[i];
        <span class="highlight-keyword">if</span> (node <span class="highlight-keyword">is</span> MeshNode)
          Meshes.Add(node);
      }
    }
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFDBA");</script><p>
             The query can, for example, be used to get all meshes within the camera frustum.
             <div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAEDBA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAEDBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAEDBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAEDBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">ISceneQuery query = myScene.Query&lt;MeshQuery&gt;(cameraNode, renderContext);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAEDBA");</script></p><p><strong>Distance Culling:</strong><br />
             The following example shows how to implement a scene query that performs <i>distance 
             culling</i> of scene nodes.
             </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACDBA_tab1" class="codeSnippetContainerTabSingle">Scene Query with Distance Culling</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACDBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACDBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACDBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> DigitalRune.Graphics;
<span class="highlight-keyword">using</span> DigitalRune.Graphics.SceneGraph;
<span class="highlight-keyword">using</span> DigitalRune.Mathematics;

<span class="highlight-keyword">namespace</span> Samples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> SceneQueryWithDistanceCulling : ISceneQuery
  {
    <span class="highlight-keyword">public</span> SceneNode ReferenceNode { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> List&lt;SceneNode&gt; Nodes { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }

    <span class="highlight-keyword">public</span> SceneQueryWithDistanceCulling()
    {
      Nodes = <span class="highlight-keyword">new</span> List&lt;SceneNode&gt;();
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Reset()
    {
      ReferenceNode = <span class="highlight-keyword">null</span>;
      Nodes.Clear();
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Set(SceneNode referenceNode, IList&lt;SceneNode&gt; nodes, RenderContext context)
    {
      Reset();
      ReferenceNode = referenceNode;

      <span class="highlight-keyword">var</span> cameraNode = context.LodCameraNode;
      <span class="highlight-keyword">if</span> (cameraNode == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> GraphicsException(<span class="highlight-literal">"LOD camera node needs to be set in render context."</span>);

      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; nodes.Count; i++)
      {
        <span class="highlight-keyword">var</span> node = nodes[i];

        <span class="highlight-comment">// Calculate view-normalized distance of scene node.</span>
        <span class="highlight-keyword">float</span> distance = GraphicsHelper.GetViewNormalizedDistance(node, cameraNode);
        distance *= cameraNode.LodBias * context.LodBias;

        <span class="highlight-comment">// Distance Culling: Check whether scene node is within MaxDistance.</span>
        <span class="highlight-keyword">if</span> (Numeric.IsPositiveFinite(node.MaxDistance) &amp;&amp; distance &gt;= node.MaxDistance)
          <span class="highlight-keyword">continue</span>;   <span class="highlight-comment">// Ignore scene node.</span>

        Nodes.Add(node);
      }
    }
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACDBA");</script><p><strong>Level of Detail:</strong><br />
             Level of detail (see <a href="3245d6a2-5855-981a-7118-5eef2136de75.htm">LodGroupNode</a>) needs to be evaluated by the scene query. The 
             following example implements distance culling and LOD selection.
             </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAADBA_tab1" class="codeSnippetContainerTabSingle">Scene Query with Level Of Detail</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAADBA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAADBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAADBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System.Collections.Generic;
<span class="highlight-keyword">using</span> DigitalRune.Graphics;
<span class="highlight-keyword">using</span> DigitalRune.Graphics.SceneGraph;
<span class="highlight-keyword">using</span> DigitalRune.Mathematics;

<span class="highlight-keyword">namespace</span> Samples
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> SceneQueryWithLod : ISceneQuery
  {
    <span class="highlight-keyword">public</span> SceneNode ReferenceNode { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }
    <span class="highlight-keyword">public</span> List&lt;SceneNode&gt; Nodes { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }

    <span class="highlight-keyword">public</span> SceneQueryWithLod()
    {
      Nodes = <span class="highlight-keyword">new</span> List&lt;SceneNode&gt;();
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Reset()
    {
      ReferenceNode = <span class="highlight-keyword">null</span>;
      Nodes.Clear();
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Set(SceneNode referenceNode, IList&lt;SceneNode&gt; nodes, RenderContext context)
    {
      Reset();
      ReferenceNode = referenceNode;

      <span class="highlight-keyword">if</span> (context.LodCameraNode == <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> GraphicsException(<span class="highlight-literal">"LOD camera node needs to be set in render context."</span>);

      <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; nodes.Count; i++)
        AddNode(nodes[i], context);
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> AddNode(SceneNode node, RenderContext context)
    {
      <span class="highlight-keyword">var</span> cameraNode = context.LodCameraNode;

      <span class="highlight-comment">// Calculate view-normalized distance.</span>
      <span class="highlight-keyword">float</span> distance = GraphicsHelper.GetViewNormalizedDistance(node, cameraNode);
      distance *= cameraNode.LodBias * context.LodBias;

      <span class="highlight-comment">// Distance Culling: Check whether scene node is within MaxDistance.</span>
      <span class="highlight-keyword">if</span> (Numeric.IsPositiveFinite(node.MaxDistance) &amp;&amp; distance &gt;= node.MaxDistance)
        <span class="highlight-keyword">return</span>;   <span class="highlight-comment">// Ignore scene node.</span>

      <span class="highlight-keyword">var</span> lodGroupNode = node <span class="highlight-keyword">as</span> LodGroupNode;
      <span class="highlight-keyword">if</span> (lodGroupNode != <span class="highlight-keyword">null</span>)
      {
        <span class="highlight-comment">// Evaluate LOD group.</span>
        <span class="highlight-keyword">var</span> lodSelection = lodGroupNode.SelectLod(context, distance);
        AddSubtree(lodSelection.Current, context);
      }
      <span class="highlight-keyword">else</span>
      {
        Nodes.Add(node);
      }
    }

    <span class="highlight-keyword">private</span> <span class="highlight-keyword">void</span> AddSubtree(SceneNode node, RenderContext context)
    {
      <span class="highlight-keyword">if</span> (node.IsEnabled)
      {
        AddNode(node, context);

        <span class="highlight-keyword">if</span> (node.Children != <span class="highlight-keyword">null</span>)
        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> childNode <span class="highlight-keyword">in</span> node.Children)
          AddSubtree(childNode, context);
      }
    }
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAADBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID6RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="fdc51854-e071-5830-fa8e-d34ae26246bf.htm">DigitalRune.Graphics.SceneGraph Namespace</a></div><div class="seeAlsoStyle"><a href="6e2214b1-b299-2ebf-112c-20cf5510185c.htm">DigitalRune.Graphics.SceneGraph<span id="LST5ED6F12E_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5ED6F12E_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>IScene</a></div><div class="seeAlsoStyle"><a href="e79b2fa4-d731-66fe-ba4f-d8e58e557e32.htm">DigitalRune.Graphics.SceneGraph<span id="LST5ED6F12E_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5ED6F12E_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Scene</a></div><div class="seeAlsoStyle"><a href="206bf836-6510-1c9d-02d4-c0c9a30a75a0.htm">DigitalRune.Graphics.SceneGraph<span id="LST5ED6F12E_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST5ED6F12E_5?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>SceneNode</a></div></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>