<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Step 11: Physics</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="dd394bdc-c9ec-442a-929d-7141f7b301ae" /><meta name="Description" content="In this step we will add the physics simulation." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d94d3673-de15-47f9-a122-70b4d97b5920.htm" title="General" tocid="d94d3673-de15-47f9-a122-70b4d97b5920">General</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="4d7ccf95-54e8-4b4c-950f-9420947b4e24.htm" title="Tutorials" tocid="4d7ccf95-54e8-4b4c-950f-9420947b4e24">Tutorials</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6ce9b230-eed2-419d-92df-3e3e4a03d27e.htm" title="Tutorial 01: Adding DigitalRune Engine to an XNA Game" tocid="6ce9b230-eed2-419d-92df-3e3e4a03d27e">Tutorial 01: Adding DigitalRune Engine to an XNA Game</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8befb151-f7b6-4884-936b-530458b13860.htm" title="Step 1: Setup" tocid="8befb151-f7b6-4884-936b-530458b13860">Step 1: Setup</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="25418622-e634-4741-8d17-efc9fb44fba7.htm" title="Step 2: Empty game" tocid="25418622-e634-4741-8d17-efc9fb44fba7">Step 2: Empty game</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="0c04e065-a5fb-4045-bc09-7cce47c63d4e.htm" title="Step 3: Input service" tocid="0c04e065-a5fb-4045-bc09-7cce47c63d4e">Step 3: Input service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="26ebc8f3-4778-4979-a217-1d85e2c5ae31.htm" title="Step 4: Graphics service" tocid="26ebc8f3-4778-4979-a217-1d85e2c5ae31">Step 4: Graphics service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="efe7ad45-ea74-4e57-810d-93bc3ef3a28f.htm" title="Step 5: Debug rendering" tocid="efe7ad45-ea74-4e57-810d-93bc3ef3a28f">Step 5: Debug rendering</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="da752ba9-7056-4485-9b90-d6070cb7c1e8.htm" title="Step 6: Game object service" tocid="da752ba9-7056-4485-9b90-d6070cb7c1e8">Step 6: Game object service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5.htm" title="Step 7: Model content" tocid="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5">Step 7: Model content</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="253857cc-d401-4788-ae6e-4ca12a94a21e.htm" title="Step 8: Rendering models" tocid="253857cc-d401-4788-ae6e-4ca12a94a21e">Step 8: Rendering models</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="cdc88d41-dcb6-4464-be17-46d29a15d25a.htm" title="Step 9: Animated Model" tocid="cdc88d41-dcb6-4464-be17-46d29a15d25a">Step 9: Animated Model</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="a1c6f3cc-8a48-4c68-9401-421d36f67eba.htm" title="Step 10: More debug rendering" tocid="a1c6f3cc-8a48-4c68-9401-421d36f67eba">Step 10: More debug rendering</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="dd394bdc-c9ec-442a-929d-7141f7b301ae.htm" title="Step 11: Physics" tocid="dd394bdc-c9ec-442a-929d-7141f7b301ae">Step 11: Physics</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="aa0a6f8f-d355-4188-9d4a-7041160411d1.htm" title="Step 12: Particles" tocid="aa0a6f8f-d355-4188-9d4a-7041160411d1">Step 12: Particles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="c060be3d-f85f-4551-838c-6969ab45b0b4.htm" title="Step 13: Sky box" tocid="c060be3d-f85f-4551-838c-6969ab45b0b4">Step 13: Sky box</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="68c9f201-aa9c-4b7f-bf96-a57893faddfe.htm" title="Step 14: Post-processing" tocid="68c9f201-aa9c-4b7f-bf96-a57893faddfe">Step 14: Post-processing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="b035aaae-87fb-48c6-86de-e30024ec9a89.htm" title="Step 15: Add DigitalRune Graphics content" tocid="b035aaae-87fb-48c6-86de-e30024ec9a89">Step 15: Add DigitalRune Graphics content</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="77f82858-2022-41f9-9325-9a4d97b5450d.htm" title="Step 16: GUI" tocid="77f82858-2022-41f9-9325-9a4d97b5450d">Step 16: GUI</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="7f0f5338-019d-4ef1-a579-3d99df4e1aa2.htm" title="Step 17: Deferred lighting" tocid="7f0f5338-019d-4ef1-a579-3d99df4e1aa2">Step 17: Deferred lighting</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">Step 11: Physics</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
                In this step we will add the physics simulation.
            </p></div><div class="collapsibleAreaRegion" id="Physics"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Add physics service</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    Let's add the physics service to the game:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACAFAAA_tab1" class="codeSnippetContainerTabSingle">Game1.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">using</span> DigitalRune.Physics;                                                              <span class="highlight-comment">// NEW</span>
…

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Game1 : Microsoft.Xna.Framework.Game
    {
        …
        <span class="highlight-keyword">private</span> Simulation _simulation;                                                 <span class="highlight-comment">// NEW</span>
        …

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Initialize()
        {
            …
            _animationManager = <span class="highlight-keyword">new</span> AnimationManager();
            _services.Register(<span class="highlight-keyword">typeof</span>(IAnimationService), <span class="highlight-keyword">null</span>, _animationManager);

            _simulation = <span class="highlight-keyword">new</span> Simulation();                                             <span class="highlight-comment">// NEW</span>
            _simulation.ForceEffects.Add(<span class="highlight-keyword">new</span> Gravity());                                <span class="highlight-comment">// NEW</span>
            _simulation.ForceEffects.Add(<span class="highlight-keyword">new</span> Damping());                                <span class="highlight-comment">// NEW</span>
            _services.Register(<span class="highlight-keyword">typeof</span>(Simulation), <span class="highlight-keyword">null</span>, _simulation);                  <span class="highlight-comment">// NEW</span>

            Components.Add(<span class="highlight-keyword">new</span> MyGameComponent(<span class="highlight-keyword">this</span>));

            <span class="highlight-keyword">base</span>.Initialize();
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Update(GameTime gameTime)
        {
            _inputManager.Update(gameTime.ElapsedGameTime);

            <span class="highlight-keyword">base</span>.Update(gameTime);

            _gameObjectManager.Update(gameTime.ElapsedGameTime);

            _simulation.Update(gameTime.ElapsedGameTime);                               <span class="highlight-comment">// NEW</span>

            _animationManager.Update(gameTime.ElapsedGameTime);
            _animationManager.ApplyAnimations();
        }
        …</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAFAAA");</script><p>
                    The physics service is represented by the class <strong>Simulation</strong>.
                    (The physics library was one of our first products. If we redesign the physics library
                    in the future we will probably rename <strong>Simulation</strong> to
                    <strong>IPhysicsService</strong> and <strong>PhysicsManager</strong>
                    to use the same naming convention as the other libraries.)
                </p><p>
                    After we create the simulation, we immediately add two force effects:
                    <strong>Gravity</strong> and <strong>Damping</strong>. Unless you
                    make a game in space, you will need these force effects.
                </p></div><div class="collapsibleAreaRegion" id="Ground"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />
                Add a rigid body to the GroundObject
            </span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    So far the ground plane does not have a physical representation. Let's add a rigid
                    body which represents the ground in <em>GroundObject.cs</em>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAEAAA_tab1" class="codeSnippetContainerTabSingle">GroundObject.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">using</span> DigitalRune.Geometry.Shapes;                                              <span class="highlight-comment">// NEW</span>
<span class="highlight-keyword">using</span> DigitalRune.Physics;                                                      <span class="highlight-comment">// NEW</span>
…

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> GroundObject : GameObject
    {
        <span class="highlight-keyword">private</span> ModelNode _modelNode;
        <span class="highlight-keyword">private</span> RigidBody _rigidBody;                                           <span class="highlight-comment">// NEW</span>

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnLoad()
        {
            <span class="highlight-keyword">var</span> game = ServiceLocator.Current.GetInstance&lt;Game&gt;();
            <span class="highlight-keyword">var</span> scene = ServiceLocator.Current.GetInstance&lt;IScene&gt;();
            <span class="highlight-keyword">var</span> simulation = ServiceLocator.Current.GetInstance&lt;Simulation&gt;();  <span class="highlight-comment">// NEW</span>

            _modelNode = game.Content.Load&lt;ModelNode&gt;(<span class="highlight-literal">"Ground/Ground"</span>).Clone();
            _modelNode.ScaleLocal = <span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">0.5</span>f);
            scene.Children.Add(_modelNode);

            _rigidBody = <span class="highlight-keyword">new</span> RigidBody(<span class="highlight-keyword">new</span> PlaneShape(Vector3F.UnitY, <span class="highlight-number">0</span>))       <span class="highlight-comment">// NEW</span>
            {                                                                   <span class="highlight-comment">// NEW</span>
                MotionType = MotionType.Static,                                 <span class="highlight-comment">// NEW</span>
            };                                                                  <span class="highlight-comment">// NEW</span>
          simulation.RigidBodies.Add(_rigidBody);
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUnload()
        {
            _modelNode.Parent.Children.Remove(_modelNode);
            _modelNode.Dispose(<span class="highlight-keyword">false</span>);
            _modelNode = <span class="highlight-keyword">null</span>;

            _rigidBody.Simulation.RigidBodies.Remove(_rigidBody);               <span class="highlight-comment">// NEW</span>
            _rigidBody = <span class="highlight-keyword">null</span>;                                                  <span class="highlight-comment">// NEW</span>
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUpdate(TimeSpan deltaTime)
        {
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAEAAA");</script><p>
                    Now the ground is represented in the physics simulation as an infinite plane.
                    The <strong>MotionType</strong> of the ground is <strong>Static</strong>.
                    This means, that it will never move.
                </p></div><div class="collapsibleAreaRegion" id="Crate"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Add a dynamic crate</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
                    Next, we add a physics object which moves using a new game object:
                    <em>CrateObject.cs</em></p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAHADAAA_tab1" class="codeSnippetContainerTabSingle">CrateObject.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAHADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAHADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAHADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> DigitalRune.Game;
<span class="highlight-keyword">using</span> DigitalRune.Geometry;
<span class="highlight-keyword">using</span> DigitalRune.Geometry.Shapes;
<span class="highlight-keyword">using</span> DigitalRune.Graphics.SceneGraph;
<span class="highlight-keyword">using</span> DigitalRune.Mathematics.Algebra;
<span class="highlight-keyword">using</span> DigitalRune.Mathematics.Statistics;
<span class="highlight-keyword">using</span> DigitalRune.Physics;
<span class="highlight-keyword">using</span> Microsoft.Practices.ServiceLocation;
<span class="highlight-keyword">using</span> Microsoft.Xna.Framework;

<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CrateObject : GameObject
    {
        <span class="highlight-keyword">private</span> ModelNode _modelNode;
        <span class="highlight-keyword">private</span> RigidBody _rigidBody;

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnLoad()
        {
            <span class="highlight-keyword">var</span> game = ServiceLocator.Current.GetInstance&lt;Game&gt;();
            <span class="highlight-keyword">var</span> scene = ServiceLocator.Current.GetInstance&lt;IScene&gt;();
            <span class="highlight-keyword">var</span> simulation = ServiceLocator.Current.GetInstance&lt;Simulation&gt;();

            _modelNode = game.Content.Load&lt;ModelNode&gt;(<span class="highlight-literal">"MetalGrateBox/MetalGrateBox"</span>).Clone();
            scene.Children.Add(_modelNode);

            _rigidBody = <span class="highlight-keyword">new</span> RigidBody(<span class="highlight-keyword">new</span> BoxShape(<span class="highlight-number">1</span>, <span class="highlight-number">1</span>, <span class="highlight-number">1</span>));
            _rigidBody.Pose = <span class="highlight-keyword">new</span> Pose(<span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">2</span>, <span class="highlight-number">2</span>, <span class="highlight-number">-2</span>), RandomHelper.Random.NextQuaternionF());
            simulation.RigidBodies.Add(_rigidBody);
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUnload()
        {
            _modelNode.Parent.Children.Remove(_modelNode);
            _modelNode.Dispose(<span class="highlight-keyword">false</span>);
            _modelNode = <span class="highlight-keyword">null</span>;

            _rigidBody.Simulation.RigidBodies.Remove(_rigidBody);
            _rigidBody = <span class="highlight-keyword">null</span>;
        }

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnUpdate(TimeSpan deltaTime)
        {
            _modelNode.SetLastPose(<span class="highlight-keyword">true</span>);
            _modelNode.PoseWorld = _rigidBody.Pose;
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAHADAAA");</script><p>
                    The crate object uses the <em>MetalGrateBox.fbx</em> model. It also
                    creates a rigid body which has a box shape. The shape of the box must match size of
                    the graphics model.
                </p><p>
                    The <strong>ModelNode</strong> is handled by the graphics service. The
                    <strong>RigidBody</strong> is handled by the physics service. In our case,
                    the model should always have the same pose (position and orientation) as the physics
                    body. To do this, we copy the pose of the rigid body to the pose of the model in
                    <strong>OnUpdate</strong>.
                </p><p>
                    But before we override the pose of the model, we call
                    <strong>SetLastPose(recursive = true)</strong>. This method stores the current
                    <strong>SceneNode.PoseWorld</strong> in <strong>SceneNode.LastPoseWorld</strong>.
                    This is done recursively for the <strong>ModelNode</strong> and all child
                    nodes. <strong>LastPoseWorld</strong> may be required later by certain effects,
                    such as motion blur.
                </p><p>
                    In <strong>MyGameComponent</strong> we create an instance of
                    <strong>CrateObject</strong>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACADAAA_tab1" class="codeSnippetContainerTabSingle">Game1.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGameComponent : Microsoft.Xna.Framework.GameComponent
    {
        …

        <span class="highlight-keyword">public</span> MyGameComponent(Game game)
            : <span class="highlight-keyword">base</span>(game)
        {
            …

            gameObjectService.Objects.Add(<span class="highlight-keyword">new</span> GroundObject());
            gameObjectService.Objects.Add(<span class="highlight-keyword">new</span> LightsObject());
            gameObjectService.Objects.Add(<span class="highlight-keyword">new</span> DudeObject());
            gameObjectService.Objects.Add(<span class="highlight-keyword">new</span> CrateObject());                       <span class="highlight-comment">// NEW</span>

            _myGraphicsScreen.DebugRenderer.DrawText(<span class="highlight-literal">"MyGame"</span>);
            _myGraphicsScreen.DebugRenderer.DrawAxes(Pose.Identity, <span class="highlight-number">1</span>, <span class="highlight-keyword">false</span>);
        }
        …</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACADAAA");</script><p>
                    Current state of the game:
                </p><div class="mediaNear"><img alt="Tutorial-01-19" src="../media/Tutorial-01-19.jpg" /></div></div><div class="collapsibleAreaRegion" id="GameEngineDesign"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Interlude: Game engine design – Game logic and services</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
                    The <strong>CrateObject</strong> demonstrates an important aspect of our
                    game engine design:
                </p><ul><li>
                        Game logic is encapsulated in reusable game objects (e.g. <strong>CreateObject</strong>).
                    </li><li>
                        The game object creates objects in the different services (e.g. graphics and physics).
                    </li><li>
                        Services can be discovered through the service provider.
                    </li><li>
                        Services are separated: Each service (e.g. graphics and physics) is designed and
                        optimized independently. Both services could be executed in parallel (in case
                        you want to create a multithreaded game).
                    </li><li>
                        The game object is used to exchange data between the different services. In this
                        example, it copies the pose of the physics object to the pose of the graphics
                        object. In other instances it might be the other way around. This kind of code is the
                        <span class="term">glue logic</span> that connects different services.
                    </li></ul></div><div class="collapsibleAreaRegion" id="Next"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Next</span></div><div id="ID5RBSection" class="collapsibleSection"><p><a href="aa0a6f8f-d355-4188-9d4a-7041160411d1.htm">Step 12: Particles</a></p></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>