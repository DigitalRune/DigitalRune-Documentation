<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Scene Graph</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="c6170a88-b013-46b8-9183-d2efe06b9fc4" /><meta name="Description" content="A scene (interface T:DigitalRune.Graphics.SceneGraph.IScene) manages a collection of scene nodes. A scene node (base class T:DigitalRune.Graphics.SceneGraph.SceneNode) usually represents an instance of a graphics object (a mesh, a camera, a light, etc.)." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="0a8eb9ca-74ae-4746-9289-93d909b07e22.htm" title="DigitalRune Graphics" tocid="0a8eb9ca-74ae-4746-9289-93d909b07e22">DigitalRune Graphics</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="7d5a0abe-8231-452c-895c-e6dbab83822b.htm" title="Graphics Programming" tocid="7d5a0abe-8231-452c-895c-e6dbab83822b">Graphics Programming</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="4d8c922f-60cb-4b92-a22c-03c9e8816712.htm" title="Scene Management" tocid="4d8c922f-60cb-4b92-a22c-03c9e8816712">Scene Management</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="c6170a88-b013-46b8-9183-d2efe06b9fc4.htm" title="Scene Graph" tocid="c6170a88-b013-46b8-9183-d2efe06b9fc4">Scene Graph</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="52bcba79-48f5-45f4-a5e8-288b0ca34d0c.htm" title="Scene Queries" tocid="52bcba79-48f5-45f4-a5e8-288b0ca34d0c">Scene Queries</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">Scene Graph</td></tr></table><span class="introStyle"></span><div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Scene">Scene</a></li><li class="outlineSectionEntry"><a href="#SceneNodes">Scene nodes</a></li><li class="outlineSectionEntry"><a href="#CloneAndDispose">Cloning and disposal</a></li></ul></div><div class="collapsibleAreaRegion" id="Scene"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Scene</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
                    A <span class="term">scene</span> (interface
                    <a href="6e2214b1-b299-2ebf-112c-20cf5510185c.htm">IScene</a>)
                    manages a collection of scene nodes. A scene node (base class
                    <a href="206bf836-6510-1c9d-02d4-c0c9a30a75a0.htm">SceneNode</a>)
                    usually represents an instance of a graphics object (a mesh, a camera, a light, etc.).
                </p><p>
                    A scene has two important purposes:
                </p><ul><li><p><strong>Scene Graph</strong> -
                            The main purpose is to organize the objects in a 3D scene. Graphics objects (such
                            as meshes, cameras, lights, etc.) are represented by scene nodes. Scene nodes are
                            organized in a hierarchy: Each scene node can have a
                            <a href="6e6f3a7a-7797-b817-6bbb-6e7c5b5fab3d.htm">Parent</a>
                            and zero or more <a href="5b800ed7-5fe6-36a9-d734-46cc787ee217.htm">Children</a>.
                            The resulting hierarchy is a tree (a graph without cycles) - usually called the
                            "scene graph".
                        </p></li><li><p><strong>Scene Queries</strong> -
                            The second purpose is to execute queries against the scene. For example, when
                            rendering a scene it is important to quickly access all scene nodes that are within
                            the camera frustum. When an object is lit, it is important to quickly get all lights
                            that affect the object. A scene query is run by calling
                            <a href="37c07613-e89b-1421-2947-71255d94933b.htm">Query<span id="LST95946009_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST95946009_0?cs=&lt;|vb=(Of |cpp=&lt;|fs=&lt;'|nu=(");</script>T<span id="LST95946009_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST95946009_1?cs=&gt;|vb=)|cpp=&gt;|fs=&gt;|nu=)");</script></a>.
                            The generic type parameter of the method specifies the type of the query.
                            See <a href="52bcba79-48f5-45f4-a5e8-288b0ca34d0c.htm">Scene Queries</a> for more information.
                        </p></li></ul><p>
                    The default implementation (class <a href="e79b2fa4-d731-66fe-ba4f-d8e58e557e32.htm">Scene</a>)
                    is derived from <a href="206bf836-6510-1c9d-02d4-c0c9a30a75a0.htm">SceneNode</a>.
                    That means the <a href="e79b2fa4-d731-66fe-ba4f-d8e58e557e32.htm">Scene</a>
                    is always the root node of a scene graph.
                </p><p>
                    The scene graph is the organization of the scene nodes that is visible to the application logic.
                    But internally, a scene can organize scene nodes in a way which is optimal for rendering.
                    Different types of scenes might require different implementations: For example, indoor
                    levels, outdoor levels, top-down views, side-scrolling games, etc. might require different
                    data structures in order to enable efficient queries. Therefore, different applications
                    can use different implementations of
                    <a href="6e2214b1-b299-2ebf-112c-20cf5510185c.htm">IScene</a>.
                </p><p>
                    The default implementation <a href="e79b2fa4-d731-66fe-ba4f-d8e58e557e32.htm">Scene</a>
                    internally uses a <a href="06292c81-16ba-c53c-3f55-a5a6d6eaa59c.htm">CollisionDomain</a>
                    with a <a href="c3982186-96d8-a0ef-85aa-5a3518afc512.htm">DualPartition<span id="LST95946009_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST95946009_2?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LST95946009_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST95946009_3?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                    to accelerate scene queries.
                </p></div><div class="collapsibleAreaRegion" id="SceneNodes"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Scene nodes</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    A <a href="206bf836-6510-1c9d-02d4-c0c9a30a75a0.htm">SceneNode</a>
                    usually represents an instance of a graphics object. Derived classes are for example:
                    <a href="76d2cb68-3a81-7642-6112-bc72db9bf90c.htm">ModelNode</a>,
                    <a href="150b5feb-ef12-d0be-cd27-0a32759af0ba.htm">MeshNode</a>,
                    <a href="6f7dfd61-f6ec-e574-446d-2a0396a95bad.htm">CameraNode</a>,
                    <a href="100df524-cf31-0d95-6828-c31c838355cd.htm">LightNode</a>,
                    <a href="ef131956-986e-03e9-174e-4fb72c98e4e3.htm">LensFlareNode</a>,
                    <a href="31eb8e3a-cbe8-dbda-b533-77e3979ecf41.htm">DecalNode</a>,
                    <a href="73900bd2-e82a-5119-cf0a-871340cf9d24.htm">BillboardNode</a>,
                    <a href="cc97eb93-8e8a-820b-81ca-c1e6e4880a79.htm">ParticleSystemNode</a>,
                    <a href="8223d312-17c5-525c-754b-16af9602cb15.htm">SpriteNode</a>,
                    <a href="95061be1-9b75-db4c-38ef-4693cffb9714.htm">FigureNode</a>,
                    <a href="544084de-0768-fe4d-0730-91f75b29542a.htm">FogNode</a>,
                    etc. (see namespace <a href="fdc51854-e071-5830-fa8e-d34ae26246bf.htm">DigitalRune.Graphics.SceneGraph</a>).
                </p><p>
                    The scene node hierarchy, defined by the properties
                    <a href="6e6f3a7a-7797-b817-6bbb-6e7c5b5fab3d.htm">Parent</a>
                    and <a href="5b800ed7-5fe6-36a9-d734-46cc787ee217.htm">Children</a>,
                    is a tree (a graph without cycles). A scene node can only have zero or one parent - it
                    cannot be the child of multiple nodes.
                </p><p>
                    Scene nodes implement <a href="14f1e616-5c53-aac7-dd8d-1a21f76ea472.htm">IGeometricObject</a>,
                    which means that scene nodes have a bounding shape (property
                    <a href="4e08b9f3-d665-250d-bcd6-0e77f1c478d3.htm">Shape</a>)
                    and a transformation (properties <a href="dbb416ca-05b2-4171-ebbf-2c2c4e49d658.htm">ScaleLocal</a>
                    and <a href="cbb849da-7087-f43d-fbbf-470377a6db96.htm">PoseLocal</a>/<a href="aee2bd37-52a8-5e1c-1201-54360cf58dbf.htm">PoseWorld</a>).
                </p><p>
                    The bounding shape of the scene node is used by the scene for frustum culling and other
                    optimizations. Be aware that the bounding shape of a scene node is <strong>not</strong>
                    a hierarchical bounding shape. It defines only the bounds of the current node. The bounding
                    shape does not include the bounds of the children! Some scene nodes have an
                    <a href="0897835b-dca2-734d-d71a-eb21dd884aa9.htm">Empty</a>
                    bounding shape. These scene nodes are ignored in scene queries, i.e. they do not show up
                    in the query results.
                </p><p>
                    Transformations can be specified in world space or local space (relative to the parent node).
                    Scene nodes are attached to their parent: When the parent node is transformed (scaled,
                    rotated or translated), all descendant nodes move together with the parent node.
                </p><p>
                    A scene node has two additional properties, which store the pose and scale of the last frame:
                    <a href="bf6742ff-5630-2385-ea78-2b9916256b2c.htm">LastPoseWorld</a>
                    and
                    <a href="23f8b820-1622-6533-7941-62db3e7b62a2.htm">LastScaleWorld</a>.
                    These properties are usually only read by advanced effects, e.g. post-process motion blur.
                    Both properties are not set automatically - they must be set manually! That means, you typically
                    call the helper methods
                    <a href="79c41050-44d7-f00a-7440-60d0b76fde32.htm">SetLastPose</a>
                    or
                    <a href="27ee4eaf-bb6a-2d89-a918-a843b627716e.htm">SetLastScale</a>
                    before changing the pose or scale. For example:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAEACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAEACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAEACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAEACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Set LastPoseWorld of the model node and all child nodes to the current pose.</span>
myModelNode.SetLastPose(<span class="highlight-keyword">true</span>);
<span class="highlight-comment">// Update the pose.</span>
myModelNode.PoseWorld = pose;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAEACAAA");</script><p>
                    See class documentation <a href="206bf836-6510-1c9d-02d4-c0c9a30a75a0.htm">SceneNode</a>
                    for more information.
                </p><p>
                    The <a href="092aa476-d30d-33ec-bf60-51bcf2b11e17.htm">SceneHelper</a>
                    provides useful extension methods for scene nodes. (For example: Scene nodes can be
                    traversed using LINQ.)
                </p><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Important note" /> Important</th></tr><tr><td><p>
                        It is necessary to point out that the scene graph in DigitalRune Graphics is <strong>not</strong>
                        a traditional scene graph: The sole purpose of a scene is to define the hierarchical
                        and spatial relationship of graphics objects. The scene graph does not
                        implement game logic. That means the scene graph does not have an <span class="term">update traversal</span>
                        and the scene nodes do not have an Update method.
                    </p><p>
                        It is important to distinguish between scene nodes and game objects ("entities").
                        Game objects implement game logic. See <a href="fe8ccefb-7bce-4290-be56-81bd38ba86fe.htm">DigitalRune Game</a>
                        for more information on game objects.
                    </p></td></tr></table></div><div class="alert"><table><tr><th><img src="../icons/AlertCaution.png" alt="Caution note" /> Caution</th></tr><tr><td><p><strong>Non-uniform  scaling and rotated scene nodes:</strong>
                        Scene nodes support scaling. When a parent scene node is scaled, all children are
                        also scaled. If a child is rotated, the scaling can result in a <em>shearing</em>
                        transformation. - Shearing is not supported. DigitalRune Graphics will automatically
                        use a plausible non-sheared transformation for bounding shapes instead of the specified
                        transformation.
                        <em>In general, it is recommended to avoid non-uniform scaling.</em></p><p>
                        The reason for avoiding shearing is that DigitalRune Graphics uses optimized collision
                        detection algorithms for basic shapes, like boxes or spheres. These algorithms do
                        not support shearing. Sheared shapes require slower collision algorithms.
                    </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="CloneAndDispose"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Cloning and disposal</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
                    Scene nodes are cloneable (see method
                    <a href="142c722a-0230-5b1e-480e-62e8746fb75a.htm">Clone</a>).
                    When a scene node is cloned, the instance data is duplicated. But the data objects (e.g.
                    the <a href="b1b2cda7-1f81-a790-0b6c-c448def1f775.htm">Camera</a>
                    or the <a href="33929aa1-dcdb-8034-19be-28782fc06ab9.htm">Mesh</a>)
                    are copied by reference. Cloning can be used to quickly create multiple instances of an object
                    in a scene.
                </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Tip" /> Tip</th></tr><tr><td><p>
                        It is recommended to create a clone when loading a model using the XNA ContentManager.
                        This ensures that the original instance is not modified.
                    </p></td></tr></table></div><p>
                    Scene nodes implement the interface <a href="http://msdn2.microsoft.com/en-us/library/aax125c9" target="_blank">IDisposable</a>.
                    The <a href="84f5abdd-3ea4-599c-2ed1-12975677837d.htm">Dispose</a>
                    method should be called when the scene node is no longer needed. This is necessary in order
                    to prevent potential memory leaks. Once the method has been called, the scene node
                    is no longer usable. Reusing a previously disposed scene node may result in undefined
                    behavior.
                </p><p>
                    The parameter of the <a href="84f5abdd-3ea4-599c-2ed1-12975677837d.htm">Dispose</a>
                    method determines whether data objects (e.g. the <a href="b1b2cda7-1f81-a790-0b6c-c448def1f775.htm">Camera</a>,
                    or the <a href="33929aa1-dcdb-8034-19be-28782fc06ab9.htm">Mesh</a>)
                    are disposed as well. In most cases the data objects need to be kept intact because
                    they might be shared between scene nodes.
                </p><p><a href="84f5abdd-3ea4-599c-2ed1-12975677837d.htm">Dispose</a>
                    is a recursive method: It is applied to the current scene node and all descendant scene
                    nodes. I.e. if the entire scene should be disposed, it is sufficient to call
                    <span class="code">scene.Dispose(false)</span>.
                </p><p>
                    The following example demonstrates cloning and disposal of a model.
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID1EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Load and clone a model, which was processed using the DigitalRune Model Processor.</span>
<span class="highlight-comment">// Cloning ensures that the original instance stored by the XNA ContentMananger is </span>
<span class="highlight-comment">// not modified.</span>
ModelNode model = game.Content.Load&lt;ModelNode&gt;(<span class="highlight-literal">"tank"</span>).Clone();

<span class="highlight-comment">// Position the model in a scene.</span>
model.ScaleLocal = <span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">0.8</span>f);
model.PoseWorld = <span class="highlight-keyword">new</span> Pose(<span class="highlight-keyword">new</span> Vector3F(<span class="highlight-number">0</span>, <span class="highlight-number">0</span>, <span class="highlight-number">-2</span>), Matrix33F.CreateRotationY(<span class="highlight-number">-0.3</span>f));
scene.Children.Add(model);

...

<span class="highlight-comment">// Don't forget to dispose the model if it is no longer needed.</span>
scene.Children.Remove(model);
model.Dispose(<span class="highlight-keyword">false</span>);  <span class="highlight-comment">// Disposes the model and all descendant nodes!</span>
                       <span class="highlight-comment">// (Data objects are not disposed.)</span>
model = <span class="highlight-keyword">null</span>;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABAAA");</script></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>