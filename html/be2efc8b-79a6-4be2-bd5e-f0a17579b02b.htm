<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>How To: Create Ragdolls</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="be2efc8b-79a6-4be2-bd5e-f0a17579b02b" /><meta name="Description" content="This article discusses how to manually create ragdoll in code without a physics editor. It contains several tips for creating stable ragdolls." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="79a8677d-9460-4118-b27b-cef353dfbd92.htm" title="DigitalRune Physics" tocid="79a8677d-9460-4118-b27b-cef353dfbd92">DigitalRune Physics</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="61ea0a18-fef3-4e46-be80-e146b5e00d80.htm" title="Articles" tocid="61ea0a18-fef3-4e46-be80-e146b5e00d80">Articles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="3862d6f1-13c0-4ad9-8e4a-5edfa265bf8a.htm" title="How To: Add DigitalRune Physics to a Project" tocid="3862d6f1-13c0-4ad9-8e4a-5edfa265bf8a">How To: Add DigitalRune Physics to a Project</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="4473ac4f-06c0-4ebb-8eb5-fd6891df21b6.htm" title="How To: Setup and Run a Simulation" tocid="4473ac4f-06c0-4ebb-8eb5-fd6891df21b6">How To: Setup and Run a Simulation</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="920ac165-5f26-4bf1-a1b7-d0ecb308b14c.htm" title="How To: Create a Composite Rigid Body" tocid="920ac165-5f26-4bf1-a1b7-d0ecb308b14c">How To: Create a Composite Rigid Body</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="660bd2ec-5313-4d7b-8431-388e3ae6fc9d.htm" title="How To: Visualize Ragdoll Joints" tocid="660bd2ec-5313-4d7b-8431-388e3ae6fc9d">How To: Visualize Ragdoll Joints</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="be2efc8b-79a6-4be2-bd5e-f0a17579b02b.htm" title="How To: Create Ragdolls" tocid="be2efc8b-79a6-4be2-bd5e-f0a17579b02b">How To: Create Ragdolls</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="cb1a3d03-4603-4086-aaea-f91de81e7d8a.htm" title="Smooth Movement over Triangle Mesh" tocid="cb1a3d03-4603-4086-aaea-f91de81e7d8a">Smooth Movement over Triangle Mesh</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="5406f8ea-ffac-480c-9e98-ee3fa8eb741b.htm" title="External Articles" tocid="5406f8ea-ffac-480c-9e98-ee3fa8eb741b">External Articles</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">How To: Create Ragdolls</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
                This article discusses how to manually create ragdoll in code without a physics editor.
                It contains several tips for creating stable ragdolls.
            </p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Prerequisites">Prerequisites</a></li><li class="outlineSectionEntry"><a href="#Environment">Test environment</a></li><li class="outlineSectionEntry"><a href="#Bodies">Rigid bodies</a></li><li class="outlineSectionEntry"><a href="#Mass">Rigid body mass</a></li><li class="outlineSectionEntry"><a href="#VelocityMotors">Velocity motors</a></li><li class="outlineSectionEntry"><a href="#Joints">Joints</a></li><li class="outlineSectionEntry"><a href="#Filtering">Additional collision filtering</a></li><li class="outlineSectionEntry"><a href="#Softness">Constraint softness and error reduction</a></li><li class="outlineSectionEntry"><a href="#ConstraintMotors">Constraint motors</a></li><li class="outlineSectionEntry"><a href="#Limits">Limits</a></li></ul></div><div class="collapsibleAreaRegion" id="Prerequisites"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Prerequisites</span></div><div id="ID0RBSection" class="collapsibleSection"><p>
                    To create stable ragdolls and to use ragdolls efficiently, we recommend that you have
                    good understanding of skeletal animation and game physics. Before creating a custom
                    ragdoll, play with the existing ragdoll samples and check out the sample source code.
                </p></div><div class="collapsibleAreaRegion" id="Environment"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Test environment</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    Before you start to create a ragdoll, make sure to have a good test environment.
                    The test environment should provide the following features
                </p><ul><li>
                        Visualize rigid bodies.
                    </li><li>
                        Visualize joints.
                    </li><li>
                        Grab rigid bodies and move them with the mouse.
                    </li><li>
                        Shoot rigid bodies with a mouse click.
                    </li></ul><p>
                    In this article we assume that you use the ragdoll samples (see
                    <a href="dde51686-4f07-4c54-95d4-756ec929cb57.htm">Samples</a>) as a starting point.
                </p></div><div class="collapsibleAreaRegion" id="Bodies"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Rigid bodies</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    Start with the
                    <em>CollisionDetectionOnlyRagdollSample</em>.
                    In this sample, a ragdoll is created for collision detection. Joints, limits, or
                    motors are not used.
                </p><p>
                    As a first step we only define the rigid bodies and the offsets (see properties
                    <a href="dcd6034c-5802-949b-1c5c-547f2f75082d.htm">Ragdoll<span id="LSTCEC13015_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTCEC13015_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Bodies</a>
                    and
                    <a href="b7507409-b71a-ed8b-53f2-0cddc242160c.htm">Ragdoll<span id="LSTCEC13015_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTCEC13015_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>BodyOffsets</a>):
                </p><p>
                    First, replace the dude model with your own model. Comment out the dude-ragdoll
                    specific code until you can run the sample.
                </p><p>
                    Then add the debug rendering of the skeleton from the
                    <em>BindPoseSample</em>. 
                    Run the sample and get familiar with the bone structure of the model.
                    (While the sample is running, you can press <strong>Space</strong> to see the
                    model in its bind pose.)
                </p><p>
                    The dude ragdoll is created in
                    <em>DudeRagdollCreator.cs</em>. We suggest that you also
                    encapsulate the creation of your ragdoll in a separate class (or replace the code in
                    this class).
                </p><p>
                    Next, define the rigid bodies and the body offsets (similar to the code in the
                    <em>DudeRagdollCreator</em>). Run the sample to control the shapes
                    and the offsets of the rigid bodies. (Choosing the right mass is discussed below.)
                </p><p>
                    Tweak the rigid bodies and offsets until you are satisfied with the result. At the end
                    of this step you should have defined all rigid bodies of the ragdoll and they should
                    move correctly with the animated model.
                </p></div><div class="collapsibleAreaRegion" id="Mass"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Rigid body mass</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
                    So far, the rigid body mass properties are not relevant – because the ragdoll is not yet
                    used in a dynamic simulation. The mass will take effect when we use the ragdoll in the
                    <em>PassiveRagdollSample</em>.
                </p><p>
                    Choosing the right mass properties is important because: Game physics engines have
                    difficulties with large mass differences. Ideally, the mass of the heaviest dynamic
                    object in a game is no more than 10 times the mass of the lightest dynamic object
                    in the game.
                </p><p>
                    If we do not explicitly specify the mass of a rigid body, then the physics engine
                    computes the mass properties automatically based on the shape. This is not optimal:
                    A small box for a hand will be much lighter than a box from the ragdoll torso.
                </p><p>
                    And game physics engines also have troubles with long thin objects, like capsules.
                    Capsules have a low rotational inertia about the capsule axis and a much higher
                    rotational inertia about all axes normal to the capsule axis. (Rotational inertia
                    is the analog of mass for rotational movement.) This is again a problem of mass
                    differences.
                </p><p>
                    To start with mass properties that are better for the simulation, we suggest to treat
                    each body of the ragdoll as if they are all spheres of equal size. The
                    <em>DudeRagdollCreator.cs</em>
                    uses code like this:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID3EABAHAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID3EABAHAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID3EABAHAAA');return false;" title="Copy">Copy</a></div></div><div id="ID3EABAHAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">float</span> totalMass = <span class="highlight-number">80</span>; 
<span class="highlight-keyword">int</span> numberOfBodies = <span class="highlight-number">17</span>;

<span class="highlight-keyword">int</span> head = skeleton.GetIndex(<span class="highlight-literal">"Head"</span>);
<span class="highlight-keyword">int</span> footLeft = skeleton.GetIndex(<span class="highlight-literal">"L_Ankle1"</span>);
<span class="highlight-keyword">var</span> headPosition = skeletonPose.GetBonePoseAbsolute(head).Translation;
<span class="highlight-keyword">var</span> footPosition = skeletonPose.GetBonePoseAbsolute(footLeft).Translation;
<span class="highlight-keyword">var</span> headToFootDistance = (headPosition - footPosition).Length;

<span class="highlight-keyword">var</span> massFrame = MassFrame.FromShapeAndMass(<span class="highlight-keyword">new</span> SphereShape(headToFootDistance / <span class="highlight-number">8</span>), 
Vector3F.One, totalMass / numberOfBodies, <span class="highlight-number">0.1</span>f, <span class="highlight-number">1</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID3EABAHAAA");</script><p>
                    The height of the model is estimated using the distance between the head and the
                    ankle. Then a
                    <a href="1d1b0d80-5502-0dd0-1978-3d645eafbb22.htm">MassFrame</a>
                    is computed that is used for each body in the ragdoll. The total mass of 80 kg is
                    evenly distributed over all bodies.
                    This is not realistic, but this trick helps to prevent problems caused by large
                    mass ratios. Later we can still tweak the masses and try more realistic values.
                </p></div><div class="collapsibleAreaRegion" id="VelocityMotors"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Velocity motors</span></div><div id="ID5RBSection" class="collapsibleSection"><p>
                    For the next step, use the
                    <em>KinematicRagdollSample</em>. Replace the dude
                    model/ragdoll with your own model/ragdoll and start the sample. The bodies should be
                    in place, but they are not moving because the ragdoll motors are missing.
                    The
                    <em>CollisionDetectionOnlyRagdollSample</em>
                    moves the bodies manually in each frame, whereas the
                    <em>KinematicRagdollSample</em>
                    uses motors to move the bodies.
                </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td><p>
                        Note: When a ragdoll should interact with other rigid bodies, it is important to use
                        motors. Motors move the rigid bodies by setting a velocity and let the physics simulation
                        compute the movement.
                    </p></td></tr></table></div><p>
                    Adding motors is easy, as you can see in
                    <em>DudeRagdollCreator.cs</em>.
                    After you have added motors, run the sample. The rigid bodies should now move together
                    with the animated model.
                </p></div><div class="collapsibleAreaRegion" id="Joints"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Joints</span></div><div id="ID6RBSection" class="collapsibleSection"><p>
                    Now, switch to
                    <em>PassiveRagdollSample</em>.
                    Replace the dude model/ragdoll with your own model/ragdoll and start the sample:
                    The ragdoll will fall apart because the bodies are not connect.
                </p><p>
                    In this step, the joints will be added. First, set the
                    <a href="a41c1c04-53c1-97d0-044c-cbc3705538e4.htm">MotionType</a>
                    of all rigid bodies to
                    <a href="a41c1c04-53c1-97d0-044c-cbc3705538e4.htm">Kinematic</a>.
                    For example:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID3EAJAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID3EAJAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID3EAJAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID3EAJAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> body <span class="highlight-keyword">in</span> _ragdoll.Bodies)  
  <span class="highlight-keyword">if</span> (body != <span class="highlight-keyword">null</span>)    
    body.MotionType = MotionType.Kinematic;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID3EAJAFAAA");</script><p>
                    Also disable all ragdoll motors.
                </p><p>
                    Run the sample: All bodies will stay in place.
                </p><p>
                    Next, make the hand body
                    <a href="a41c1c04-53c1-97d0-044c-cbc3705538e4.htm">Dynamic</a>
                    again. For example:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID3EAFAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID3EAFAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID3EAFAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID3EAFAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">_ragdoll.Bodies[skeleton.GetIndex(<span class="highlight-literal">"L_Hand"</span>)].MotionType = MotionType.Dynamic;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID3EAFAFAAA");</script><p>
                    Run the sample again: The hand body will fall to the floor.
                </p><p>
                    Add a
                    <a href="aad43c5b-d890-ba55-de1a-72097b8833cf.htm">BallJoint</a>
                    between the lower arm and the hand (as in the
                    <em>DudeRagdollCreator.cs</em>).
                </p><p>
                    Run the sample again: Now, the hand is connected to the lower arm. While the sample is
                    running, you can grab the hand body or shoot a ball at the hand body to test the joint.
                    The hand rotation is not limited yet – we will take care of that later.
                </p><p>
                    After that, add joints for all other bodies. Make the lower arm body dynamic, add a
                    joint between lower arm and upper arm and test it. And so on. Work from the
                    extremities (hand, feet, head) to the pelvis.
                </p><p>
                    Finally, set all bodies to dynamic again and test the ragdoll. The limbs will rotate
                    like crazy, but otherwise the ragdoll should be stable before you start to add joint
                    limits.
                    (<em>Stable</em> means that the ragdoll does not jitter or shake
                    a lot and all bodies come to rest when the ragdoll lies on the floor.)
                </p></div><div class="collapsibleAreaRegion" id="Filtering"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Additional collision filtering</span></div><div id="ID7RBSection" class="collapsibleSection"><p>
                    In this phase of your ragdoll, instability could be caused by bodies that constantly
                    collide with other bodies.
                </p><p>
                    When two limbs are connected by a
                    <a href="aad43c5b-d890-ba55-de1a-72097b8833cf.htm">BallJoint</a>,
                    the collisions between the connected bodies are disabled (if
                    <a href="3942ad56-71a7-c964-bc48-e34ee9aea32d.htm">CollisionEnabled</a>
                    is set to false). But often you need to disable additional collisions between limbs that
                    are too close to each other. For example: In the dude ragdoll, the head is too close to
                    the upper back body, the arms are too close to the torso and the upper legs are too
                    close to each other. Therefore, collisions between these body pairs should
                    be disabled in the
                    <a href="6f010999-bd89-ecee-641b-ced624e0e70c.htm">CollisionFilter</a>
                    of the
                    <a href="34c3f9ce-54ab-b65e-7652-aaf491c08633.htm">Simulation</a>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID3EABAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID3EABAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID3EABAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID3EABAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> filter = (CollisionFilter)simulation.CollisionDomain.CollisionDetection.CollisionFilter;
filter.Set(ragdoll.Bodies[backUpper].CollisionObject, ragdoll.Bodies[head].CollisionObject, <span class="highlight-keyword">false</span>);
filter.Set(ragdoll.Bodies[armUpperRight].CollisionObject, ragdoll.Bodies[backLower].CollisionObject, <span class="highlight-keyword">false</span>);
filter.Set(ragdoll.Bodies[armUpperLeft].CollisionObject, ragdoll.Bodies[backLower].CollisionObject, <span class="highlight-keyword">false</span>);
filter.Set(ragdoll.Bodies[legUpperLeft].CollisionObject, ragdoll.Bodies[legUpperRight].CollisionObject, <span class="highlight-keyword">false</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID3EABAEAAA");</script><p>
                    In general: If two bodies penetrate each other during normal animations or in the bind
                    pose, then it is best to disable collision between them.
                </p></div><div class="collapsibleAreaRegion" id="Softness"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constraint softness and error reduction</span></div><div id="ID8RBSection" class="collapsibleSection"><p>
                    Constraints
                    have two parameter called
                    <span class="term">ErrorReduction</span>
                    and
                    <span class="term">Softness</span>.
                    Choosing the right values for these properties must be done by experimentation:
                    Tweak the values
                    <a href="a0a78c17-d2b3-a844-22a1-dbb3af4ec669.htm">BallJoint<span id="LSTCEC13015_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTCEC13015_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ErrorReduction</a>
                    and
                    <a href="45a56559-a8e0-c054-549d-db88d2e0fac4.htm">BallJoint<span id="LSTCEC13015_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTCEC13015_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Softness</a>
                    and see what happens.
                </p><p>
                    If you set the error reduction to 0, then the joints do not recover from errors. If
                    you set the error reduction to 1, the error correction is very aggressive and can
                    cause instability. Values like 0.2 - 0.4 are usually fine.
                </p><p>
                    If you set the softness to 0, the ragdoll can become unstable because the joints are
                    hard constraints that do not allow any constraint violation. If you set a higher value
                    like 0.1, the joints become very soft and act like rubber bands. Use a small positive
                    value for the softness, e.g. 0.0001.
                </p></div><div class="collapsibleAreaRegion" id="ConstraintMotors"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID9RB')" onkeypress="SectionExpandCollapse_CheckKey('ID9RB', event)" tabindex="0"><img id="ID9RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constraint motors</span></div><div id="ID9RBSection" class="collapsibleSection"><p>
                    After the joints are added, enable the motors again:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID3EAEACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID3EAEACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID3EAEACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID3EAEACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">foreach</span> (RagdollMotor motor <span class="highlight-keyword">in</span> _ragdoll.Motors)
{   
  <span class="highlight-keyword">if</span> (motor != <span class="highlight-keyword">null</span>)   
  {     
    motor.Mode = RagdollMotorMode.Constraint;     
    motor.ConstraintDamping = <span class="highlight-number">5</span>;     
    motor.ConstraintSpring = <span class="highlight-number">0</span>;   
  }
}
_ragdoll.EnableMotors();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID3EAEACAAA");</script><p>
                    This time we use
                    <span class="term">constraint motors</span> instead of
                    <span class="term">velocity motors</span>. This type of motor adds a damping to
                    the joint movement.
                </p><p>
                    Next, try to set higher damping and spring values, like
                    <a href="8d9eed6b-bfff-bd73-421a-e6314bc09ee7.htm">ConstraintSpring</a> = 1000 and
                    <a href="b34d1c46-75d2-fdbf-560b-81d88f31b145.htm">ConstraintDamping</a> = 100.
                    After the ragdoll was added to the simulation with
                    <a href="dfdfbcd5-c404-c745-33ec-f028f7bd27b8.htm">Ragdoll<span id="LSTCEC13015_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTCEC13015_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>AddToSimulation</a>,
                    call
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID3EABACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID3EABACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID3EABACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID3EABACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">_ragdoll.DriveToPose(_skeletonPose, <span class="highlight-number">0</span>);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID3EABACAAA");</script><p>
                    once to set the target orientation of the motors. Now, you should have a springy ragdoll
                    that tries to stay in its bind pose.
                </p></div><div class="collapsibleAreaRegion" id="Limits"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID10RB')" onkeypress="SectionExpandCollapse_CheckKey('ID10RB', event)" tabindex="0"><img id="ID10RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Limits</span></div><div id="ID10RBSection" class="collapsibleSection"><p>
                    Disable the motors again. Make all bodies kinematic again – except one hand. Add the
                    debug visualization of the skeleton and add constraint limit visualization.
                </p><p>
                    Like in the
                    <em>DudeRagdollCreator</em>
                    class, add a
                    <a href="b9ecaf45-efa6-b87d-b7ca-02614ec83186.htm">TwistSwingLimit</a>
                    between the hand and the lower arm. (Use
                    <a href="f0c57aca-7f8c-33ba-49bb-c08079189061.htm">AngularLimit</a>s
                    if you need hinge joints.)
                </p><p>
                    Choosing the correct constraint anchor orientation is the most difficult part. You
                    need to understand what the constraint anchor orientation means. Therefore, take
                    a good look at the articles <a href="a91cc376-dcbf-4b86-af7b-869fae861146.htm">Constraints, Contacts and Joints</a>
                    and the
                    <a href="b9ecaf45-efa6-b87d-b7ca-02614ec83186.htm">TwistSwingLimit</a>
                    and
                    <a href="f0c57aca-7f8c-33ba-49bb-c08079189061.htm">AngularLimit</a>
                    descriptions.
                </p><p>
                    The debug rendering of the bones (and bone coordinate spaces) and the constraints should
                    help you on your way. Choosing the correct constraint anchor orientation matrices might
                    require some experimentation and patience.
                </p><p>
                    It helps a lot to make only those bodies dynamic that you are currently testing. Another
                    tip is to set the minimum and maximum angles of a limit to 0. This will show the relative
                    limb orientation at which the constraint angle is 0.
                </p><p>
                    Add one limit after the other. Test each limit and only add the next limit if you are
                    satisfied with the current limits, and only if the ragdoll is stable.
                </p><p>
                    Also experiment with the softness and error reduction of the limits. Giving limits
                    a higher softness is okay because it makes the ragdoll appear more natural. (Joint
                    limits in real humans are also soft.)
                </p><p>
                    At the end make all bodies dynamic again and test your final ragdoll.
                </p></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>