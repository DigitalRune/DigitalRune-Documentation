<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>How To: Enable Resource Pooling for an Object</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="ea2eddc5-2628-4671-83cd-33fe38daaf4e" /><meta name="Description" content="The resource pool implementation in the DigitalRune Base (see T:DigitalRune.ResourcePool`1) can be used to create a pool of objects that can be reused at runtime." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="dc44c3a5-8545-4253-9da1-62258a00607c.htm" title="DigitalRune Base Library" tocid="dc44c3a5-8545-4253-9da1-62258a00607c">DigitalRune Base Library</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="3b7ea45b-f13c-49b3-961b-42899323a477.htm" title="&quot;How To&quot; Articles" tocid="3b7ea45b-f13c-49b3-961b-42899323a477">"How To" Articles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8710717f-74c1-449a-aae7-c7c22c53b159.htm" title="How To: Add DigitalRune Helper Library to a Project" tocid="8710717f-74c1-449a-aae7-c7c22c53b159">How To: Add DigitalRune Helper Library to a Project</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="ea2eddc5-2628-4671-83cd-33fe38daaf4e.htm" title="How To: Enable Resource Pooling for an Object" tocid="ea2eddc5-2628-4671-83cd-33fe38daaf4e">How To: Enable Resource Pooling for an Object</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">How To: Enable Resource Pooling for an Object</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
                The resource pool implementation in the DigitalRune Base (see
                <a href="c66285dd-f24e-3c3f-9beb-0fd1e564475e.htm">ResourcePool<span id="LSTA0EFCA58_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA0EFCA58_0?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTA0EFCA58_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA0EFCA58_1?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>)
                can be used to create a pool of objects that can be reused at runtime.
            </p><p>
                When we start to design a class library we usually don’t care about
                resource pooling. Only when the major parts of the API and the internal
                algorithms are done we start to measure performance and profile memory
                usage. When we started optimizing DigitalRune Geometry and Physics we
                realized that some objects needed to be pooled in order to avoid garbage
                on Xbox 360 and Windows Phone 7. So a few types had to be made reusable.
            </p><p>
                The following pattern has proven very handy for turning a normal object
                into a pooled object.
            </p></div><div class="collapsibleAreaRegion" id="Reusable"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Making an object reusable</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    Let’s assume we have the following type:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAMABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAMABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAMABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAMABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyObject
{
  <span class="highlight-keyword">public</span> MyObject(<span class="highlight-keyword">object</span> param1, <span class="highlight-keyword">object</span> param2)
  {
    <span class="highlight-comment">// Initialize instance.</span>
    ...
  }

  <span class="highlight-comment">// Field, properties, methods, etc.</span>
  ...
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAMABAAA");</script><p>
                    To make the type reusable we add a local resource pool and add
                    <strong>Create</strong>/<strong>Recycle</strong> methods:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAKABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAKABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAKABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAKABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyObject
{
  <span class="highlight-keyword">private</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">readonly</span> ResourcePool&lt;MyObject&gt; Pool =
    <span class="highlight-keyword">new</span> ResourcePool&lt;MyObject&gt;(() =&gt; <span class="highlight-keyword">new</span> MyObject(), <span class="highlight-keyword">null</span>, <span class="highlight-keyword">null</span>);

  <span class="highlight-keyword">private</span> MyObject()
  {
  }

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> MyObject Create(<span class="highlight-keyword">object</span> param1, <span class="highlight-keyword">object</span> param2)
  {
    <span class="highlight-keyword">var</span> obj = Pool.Obtain();

    <span class="highlight-comment">// Initialize instance.</span>
    ...

    <span class="highlight-keyword">return</span> obj;
  }

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Recycle()
  {
    <span class="highlight-comment">// Clean up instance.</span>
    ...

    Pool.Recycle(<span class="highlight-keyword">this</span>);
  }

  <span class="highlight-comment">// Field, properties, methods, etc.</span>
  ...
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAKABAAA");</script><p>
                    The new version is very similar to the first version. The original
                    constructor is removed. This way we automatically get compiler errors
                    in all places where the type is used. That’s great because now we know
                    where we need to add the <strong>Create</strong>/<strong>Recycle</strong> calls.
                </p><p>
                    Instead of creating an object with
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAHABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAHABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAHABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAHABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> myObject = <span class="highlight-keyword">new</span> MyObject(param1, param2);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAHABAAA");</script><p>
                    we now need to write
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> myObject = MyObject.Create(param1, param2);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFABAAA");</script><p>
                    That’s not too bad - the usage is very similar. The caller does not need
                    to have a reference to the resource pool from where the object is taken.
                    Note also that the default constructor is private. This prevents others
                    (or ourselves) from accidentally creating new instances and bypassing
                    the resource pooling.
                </p><p>
                    The owner of the new object can at some point call
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">myObject.Recycle();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABAAA");</script><p>
                    to reset and recycle the instance. Again, the caller does not need to
                    have a reference to the actual resource pool which is very handy.
                </p><p>
                    So overall, this pattern has proven to be very useful. The object is
                    now reusable and the impact on existing code is minimal.
                </p></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="c66285dd-f24e-3c3f-9beb-0fd1e564475e.htm">DigitalRune<span id="LSTA0EFCA58_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA0EFCA58_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ResourcePool<span id="LSTA0EFCA58_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA0EFCA58_3?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTA0EFCA58_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTA0EFCA58_4?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a></div><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="9e2a4144-69e9-4bf2-8cea-79713eb91490.htm">Resource Pooling</a></div></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>