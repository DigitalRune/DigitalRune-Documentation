<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>FAQ</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="c12eca22-95ea-48f4-95ee-91239af553fc" /><meta name="Description" content="Here is a collection of frequently asked questions, common problems and solutions." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="79a8677d-9460-4118-b27b-cef353dfbd92.htm" title="DigitalRune Physics" tocid="79a8677d-9460-4118-b27b-cef353dfbd92">DigitalRune Physics</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="6e0b9a08-b1d8-41a3-9ab4-ebf6235abe19.htm" title="Definitions and Conventions" tocid="6e0b9a08-b1d8-41a3-9ab4-ebf6235abe19">Definitions and Conventions</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="258f6a2c-e513-40c6-ab5b-848d130dc3b0.htm" title="Rigid Bodies" tocid="258f6a2c-e513-40c6-ab5b-848d130dc3b0">Rigid Bodies</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="bc000d5a-cac9-49f1-9a18-a26b17faa8e9.htm" title="The Simulation" tocid="bc000d5a-cac9-49f1-9a18-a26b17faa8e9">The Simulation</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="1e6a58ee-1cfd-4e71-8afc-afff720bb53d.htm" title="Forces, Force Effects and Force Fields" tocid="1e6a58ee-1cfd-4e71-8afc-afff720bb53d">Forces, Force Effects and Force Fields</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="576be7e1-f56c-4c5d-a0a6-22f67bde0379.htm" title="Materials" tocid="576be7e1-f56c-4c5d-a0a6-22f67bde0379">Materials</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="a91cc376-dcbf-4b86-af7b-869fae861146.htm" title="Constraints, Contacts and Joints" tocid="a91cc376-dcbf-4b86-af7b-869fae861146">Constraints, Contacts and Joints</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="dc07e943-fc57-4c45-bcc2-3dbc1f436272.htm" title="Best Practices and Recommended Literature" tocid="dc07e943-fc57-4c45-bcc2-3dbc1f436272">Best Practices and Recommended Literature</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="3e1b091b-d795-4f67-a390-67648a3e5465.htm" title="Specialized Modules" tocid="3e1b091b-d795-4f67-a390-67648a3e5465">Specialized Modules</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="81a6e7ab-bdd3-43d6-b20c-5322ff3f936a.htm" title="Advanced Topics" tocid="81a6e7ab-bdd3-43d6-b20c-5322ff3f936a">Advanced Topics</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="61ea0a18-fef3-4e46-be80-e146b5e00d80.htm" title="Articles" tocid="61ea0a18-fef3-4e46-be80-e146b5e00d80">Articles</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="c12eca22-95ea-48f4-95ee-91239af553fc.htm" title="FAQ" tocid="c12eca22-95ea-48f4-95ee-91239af553fc">FAQ</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="3734bae3-9f7f-4154-b120-4adfa4fc53e5.htm" title="Class Diagrams" tocid="3734bae3-9f7f-4154-b120-4adfa4fc53e5">Class Diagrams</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">FAQ</td></tr></table><span class="introStyle"></span><div class="introduction"><p>Here is a collection of frequently asked questions, common problems and solutions.</p><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#General">General</a></li><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#VariableFrameRate">How can I use a variable time step?</a></li><li class="outlineSectionEntry"><a href="#TwoD">Can I use DigitalRune Physics for 2D games?</a></li><li class="outlineSectionEntry"><a href="#KinematicPush">Bodies pushed by kinematic bodies are not moving correctly</a></li><li class="outlineSectionEntry"><a href="#ProceduralNotMoving">Procedurally controlled bodies are not moving</a></li><li class="outlineSectionEntry"><a href="#LargeNotMoving">Large, heavy body is not moving</a></li><li class="outlineSectionEntry"><a href="#CheckMoving">How can I check if a dynamic body has stopped moving?</a></li><li class="outlineSectionEntry"><a href="#MoveBody">How can I move a body to a target position over several frames?</a></li><li class="outlineSectionEntry"><a href="#ManyStatic">How should I handle a large number of static bodies?</a></li></ul><li class="outlineSectionEntry"><a href="#Forces">Forces and Force Effects</a></li><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#ForceNoMove">Body controlled by force is not moving</a></li><li class="outlineSectionEntry"><a href="#DampAxis">How to damp only a single axis of a moving body</a></li><li class="outlineSectionEntry"><a href="#BuoyancySleep">Buoyancy: Bodies do not move fluently. Instead, they move, stop, move, stop, and so on.</a></li><li class="outlineSectionEntry"><a href="#Shoot">
                        I want to shoot a body so that it hits a certain target. Which force/impulse do I have to
                        apply?
                    </a></li><li class="outlineSectionEntry"><a href="#GlobalAreaOfEffectExclude">
                        How to use GlobalAreaOfEffect.Exclude
                    </a></li><li class="outlineSectionEntry"><a href="#IAreaOfEffect">
                        How can I create a custom IAreaOfEffect implementation?
                    </a></li><li class="outlineSectionEntry"><a href="#Slower">Why do bodies seem to fall a bit slower than in reality?</a></li></ul><li class="outlineSectionEntry"><a href="#CC">Character Controllers</a></li><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#CCVel">How can I get the velocity of the KinematicCharacterController?</a></li><li class="outlineSectionEntry"><a href="#ComplexCC">
                        How I can I create a complex character controller where individual limbs can collide
                        with objects (instead of using one capsule shape for the whole character)?
                    </a></li></ul><li class="outlineSectionEntry"><a href="#Ragdolls">Ragdolls</a></li><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#Motors">What is the difference between velocity motors vs. quaternion motors?</a></li><li class="outlineSectionEntry"><a href="#Rotation">How can I rotate the ragdoll bodies around the model origin?</a></li><li class="outlineSectionEntry"><a href="#Transition">How to transition from an animated model to a ragdoll-controlled model?</a></li></ul><li class="outlineSectionEntry"><a href="#Vehicle">Vehicle physics</a></li><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#LimitVehicleSpeed">How to limit the speed of the vehicle?</a></li></ul></ul></div><div class="collapsibleAreaRegion" id="General"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />General</span></div><div id="ID1RBSection" class="collapsibleSection"><h4 class="subHeading" id="VariableFrameRate">How can I use a variable time step?</h4><div class="subsection"><p>
                            If, for some reason, you want to force the simulation to use a variable time step, then
                            you have to update
                            <a href="90ffca37-a52c-c514-7804-e85ad89fde16.htm">FixedTimeStep</a>
                            before each
                            <a href="c527e0b6-d9ea-a908-47f6-1181cbcf5744.htm">Simulation<span id="LSTBD6E36FC_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Update</a>
                            call:
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAHAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAHAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAHAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAHAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">mySimulation.Settings.Timing.FixedTimeStep = variableTime;
mySimulation.Update(variableTime);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAHAFAAA");</script></div><h4 class="subHeading" id="TwoD">Can I use DigitalRune Physics for 2D games?</h4><div class="subsection"><p>
                            The
                            <a href="45d87f0c-570b-1672-5d65-1a7ba131e533.htm">RigidBody</a>
                            class has flags which let you disable rotations about certain axes (e.g,
                            <a href="79ef5b44-3144-3b7a-7f1d-9f5cc27957a4.htm">LockRotationX</a>).
                            And you can use constraints like a
                            <a href="de5ff630-3b9a-5197-31ee-4447d8b77dbc.htm">PointOnPlaneConstraint</a>
                            to keep all movement in the 2D plane.
                            But: A 3D physics engine is more complex than a 2D engine and it has to do additional work
                            to keep objects in a 2D plane. A dedicated 2D engine would be more efficient for pure
                            2D games.
                        </p></div><h4 class="subHeading" id="KinematicPush">Bodies pushed by kinematic bodies are not moving correctly</h4><div class="subsection"><p>
                            If you use a moving kinematic object, do not change the
                            <a href="de8e72ae-12e7-e083-b217-c54cb4bfd848.htm">Pose</a>
                            directly in each frame.
                            Instead, set the velocity
                            (<a href="496fbfc6-0275-1a71-843a-57a0f830b9aa.htm">LinearVelocity</a>
                            and
                            <a href="527c4af7-e3d0-47be-c902-77ebc0922313.htm">AngularVelocity</a>)
                            in each frame and let the simulation compute the new pose.
                        </p><p>
                            If you change the pose of a rigid body directly, the simulation "teleports" the body to
                            the new position and does not treat it as a moving body with a non-zero velocity.
                            Collision response between a kinematic and a dynamic body will only be smooth if you use
                            <a href="496fbfc6-0275-1a71-843a-57a0f830b9aa.htm">LinearVelocity</a>
                            and
                            <a href="527c4af7-e3d0-47be-c902-77ebc0922313.htm">AngularVelocity</a>,
                            and let the simulation move the body.
                        </p></div><h4 class="subHeading" id="ProceduralNotMoving">Procedurally controlled bodies are not moving</h4><div class="subsection"><p>
                            You may have to disable "sleeping" for the body:
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAEAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAEAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABAEAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAEAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">myRigidBody.CanSleep = <span class="highlight-keyword">false</span>;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAEAFAAA");</script><p>
                            "Sleeping" means: The simulation is allowed to deactivate slow moving bodies to improve
                            performance and stability. If you apply a velocity which is less than the sleeping
                            threshold, the body does not wake up. See
                            <a href="8769ece0-17f1-2585-5a71-fda9d4a1b897.htm">SleepingSettings</a>.
                        </p></div><h4 class="subHeading" id="LargeNotMoving">Large, heavy body is not moving</h4><div class="subsection"><p>
                            The
                            <a href="1d1b0d80-5502-0dd0-1978-3d645eafbb22.htm">MassFrame</a>
                            has a limit
                            (<a href="a7e45ddc-581b-41c8-27dc-fc4e3aceaa23.htm">MassFrame<span id="LSTBD6E36FC_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>MassLimit</a>,
                            which, is around 1e10 per default). If an object has a mass beyond this limit, it will
                            be treated like a kinematic body that is not affected by forces or collisions.
                            <a href="a7e45ddc-581b-41c8-27dc-fc4e3aceaa23.htm">MassFrame<span id="LSTBD6E36FC_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>MassLimit</a>
                            is static property that can be changed.
                        </p></div><h4 class="subHeading" id="CheckMoving">How can I check if a dynamic body has stopped moving?</h4><div class="subsection"><p>
                            To find out if a body is done moving, you could check the
                            <a href="28afcb4e-8b83-ca7a-a0bc-3fe8e8feea96.htm">RigidBody<span id="LSTBD6E36FC_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>IsSleeping</a>
                            flag. The simulation sets this flag if a body has stopped moving. See
                            <a href="059ddf90-e473-470c-a59c-ee26feff7d12.htm">Sleeping</a>.
                            Please note that it is possible that "sleeping"  is disabled for a rigid body or that the
                            sleeping settings of the simulation are not suitable for your purpose (e.g. the sleeping
                            time threshold is too large).
                        </p><p>
                            You could also manually check if a body is not moving. There are several options, for example:
                        </p><ol><li>
                                Choose three points on the body and check if their movement is under a threshold over
                                several frames.
                            </li><li>
                                Check if linear and angular velocity is very low for several frames.
                            </li><li>
                                Check if kinetic energy of the body is very low for several frames.
                            </li></ol><p>
                            Usually, option 2 is used. Please note, that small simulation errors can cause bodies to
                            jitter a bit, therefore these test need to use tolerance values. To get more robust
                            results you could add additional conditions, e.g. "the linear velocity must not be rising".
                        </p></div><h4 class="subHeading" id="MoveBody">How can I move a body to a target position over several frames?</h4><div class="subsection"><p>
                            There are several options:
                        </p><ol><li>
                                Simply change
                                <a href="de8e72ae-12e7-e083-b217-c54cb4bfd848.htm">Pose</a>
                                manually step-by-step over several frames. - But be aware that bodies moved this way
                                do not properly push other bodies.
                            </li><li>
                                Set a
                                <a href="496fbfc6-0275-1a71-843a-57a0f830b9aa.htm">RigidBody<span id="LSTBD6E36FC_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>LinearVelocity</a>
                                and
                                <a href="527c4af7-e3d0-47be-c902-77ebc0922313.htm">RigidBody<span id="LSTBD6E36FC_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_5?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>AngularVelocity</a>
                                which moves the body to the target position. - Bodies moved this way properly
                                interact with other bodies. But if they hit another heavy body the other body might
                                block them.
                            </li><li>
                                Like option 2 but set the
                                <a href="39777d89-674c-9d2e-09d0-265395d2cd05.htm">RigidBody<span id="LSTBD6E36FC_6"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_6?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>MotionType</a>
                                to
                                <a href="a41c1c04-53c1-97d0-044c-cbc3705538e4.htm">Kinematic</a>.
                                Kinematic bodies push other dynamic bodies - but there movement is
                                not blocked by other bodies.
                            </li><li>
                                Apply forces
                                (<a href="9ca96202-6882-5c2d-2dd6-cb77ba64e0f4.htm">AddForce</a>,
                                <a href="22462ef2-e643-5351-2113-cf0964c6e5e0.htm">AddTorque</a>)
                                or use a custom
                                <a href="4a8b523c-ddfa-0247-7c27-be3bd6bf4bb4.htm">ForceEffect</a>.
                            </li><li>
                                Use one of the predefined
                                <a href="664d4dc9-af08-fe5a-6435-ae1644b1aa60.htm">Constraint</a>s
                                or a custom constraint to move the body. Constraints are more stable than using forces.
                            </li></ol><p>
                            The solution depends on your requirements and your game physics experience. Constraints
                            provide the most sophisticated solution, but you need more experience to get them right.
                        </p></div><h4 class="subHeading" id="ManyStatic">How should I handle a large number of static bodies?</h4><div class="subsection"><p>
                            First, if not already done, set a broad-phase collision filter that
                            disables collision computation for static vs. static.
                            See the code example in
                            <a href="dc07e943-fc57-4c45-bcc2-3dbc1f436272.htm">Best Practices and Recommended Literature</a>.
                            Per default, the physics engine computes collisions between two
                            static bodies. The collision info is computed only once - but if you
                            have many static bodies, many
                            contact sets an be generated which needlessly clog the system.
                        </p><p><strong>
                                Tip 1: Use a CompositeShape
                            </strong></p><p>
                            The broad-phase of the collision detection already uses spatial
                            partitioning to manage all rigid bodies. But each rigid body has an
                            overhead: It can be enabled/disabled, could have individual collision
                            filtering, individual material, etc.. So it is better to reduce the
                            number of rigid bodies and combine them if possible.
                        </p><p>
                            Try to create a single rigid body with a
                            <a href="467bd69b-e7ce-490d-fedd-a9495832769c.htm">CompositeShape</a>
                            that contains all static parts. And set an
                            <a href="f4683187-36cf-0bfe-729a-35f5e86e72f3.htm">AabbTree<span id="LSTBD6E36FC_7"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_7?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTBD6E36FC_8"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_8?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                            as the spatial partition for this composite shape, for example:
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAGAAAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAGAAAFAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAGAAAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAGAAAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">compositeShape.Partition = <span class="highlight-keyword">new</span> AabbTree&lt;<span class="highlight-keyword">int</span>&gt;();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAGAAAFAAA");</script><p>
                            This should give you a significant speedup.
                        </p><p>
                            The
                            <a href="f4683187-36cf-0bfe-729a-35f5e86e72f3.htm">AabbTree<span id="LSTBD6E36FC_9"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_9?cs=&lt;|vb=(Of |cpp=&lt;|nu=(|fs=&lt;'");</script>T<span id="LSTBD6E36FC_10"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_10?cs=&gt;|vb=)|cpp=&gt;|nu=)|fs=&gt;");</script></a>
                            has a property
                            <a href="1969a112-38d8-fe8b-aac3-c65406845576.htm">BottomUpBuildThreshold</a>
                            which you can set to a lower value if the building of the tree takes too long.
                            (In our test-suite, we have a test-level with a composite shape with
                            80 000 boxes (on PC). The level building takes quite some time, but
                            after creation it runs in real-time.)
                        </p><p><strong>
                                Tip 2: Use several CompositeShapes
                            </strong></p><p>
                            One extreme is: A single rigid bodies with a composite shape of N parts.
                            The other extreme is: N individual rigid bodies. 
                            The optimal case could lie between those extremes, for example:
                            10 rigid bodies with 100 parts each. That depends on your level
                            geometry and should be determined by experimentation.
                        </p><p><strong>
                                Tip 3: TriangleMeshShape
                            </strong></p><p>
                            Using a
                            <a href="2701ba79-cac5-5865-eb8f-1da98af75b2b.htm">TriangleMeshShape</a>
                            could be even faster because you only need a vertex and index buffer
                            to define the mesh containing all the parts.
                            The disadvantage of a triangle mesh is that it is sometimes less stable
                            than composite shapes of convex bodies:
                            The triangles are "thin" and that can lead to tunneling and other
                            simulation problems.
                        </p></div></div><div class="collapsibleAreaRegion" id="Forces"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Forces and Force Effects</span></div><div id="ID2RBSection" class="collapsibleSection"><h4 class="subHeading" id="ForceNoMove">Body controlled by force is not moving</h4><div class="subsection"><p>
                            Perhaps you call
                            <a href="9ca96202-6882-5c2d-2dd6-cb77ba64e0f4.htm">RigidBody<span id="LSTBD6E36FC_11"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_11?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>AddForce</a>
                            only once. In this case the force is applied only for a single time step.
                            To apply a permanent force, the method needs to be called every frame.
                        </p></div><h4 class="subHeading" id="DampAxis">How to damp only a single axis of a moving body</h4><div class="subsection"><p>
                            Damping is really simple. Damping can be done using a force effect which directly reduces
                            the velocity (without applying any forces). Here is the gist of a damping class:
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACAFAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAFAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACAFAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAFAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> Damping : ForceField  
{  
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">float</span> LinearDamping { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }  
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">float</span> AngularDamping { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }  
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Apply(RigidBody body)  
  {  
    <span class="highlight-keyword">float</span> fixedTimeStep = Simulation.Settings.Timing.FixedTimeStep;  
    body.LinearVelocity = (<span class="highlight-number">1</span> - LinearDamping * fixedTimeStep) * body.LinearVelocity;  
    body.AngularVelocity = (<span class="highlight-number">1</span> - AngularDamping * fixedTimeStep) * body.AngularVelocity;  
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAFAEAAA");</script><p>
                            Following article describes the used damping formula:
                            <a href="http://www.digitalrune.com/Support/Blog/tabid/719/EntryId/78/Damping-in-Computer-Games.aspx" target="_blank">Damping in Computer Games</a>.
                            You don't even need to use the "exact" formulas or a force effect. Try to simply
                            reduce the angular velocity manually between
                            <a href="c527e0b6-d9ea-a908-47f6-1181cbcf5744.htm">Simulation<span id="LSTBD6E36FC_12"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_12?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Update</a>
                            calls (or at
                            <a href="cb85956f-ab84-9b91-5a30-7532153cbc3c.htm">Simulation<span id="LSTBD6E36FC_13"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_13?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>SubTimeStepFinished</a>
                            events if your simulation is sub-stepping):
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAFAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAFAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAFAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAFAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> localVelocity = body.Pose.ToLocalDirection(body.AngularVelocity); 
localVelocity.X *= <span class="highlight-number">0.9</span>f;        <span class="highlight-comment">// Damp on a single axis. </span>
body.AngularVelocity = body.Pose.ToWorldDirection(localVelocity);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAFAEAAA");</script></div><h4 class="subHeading" id="BuoyancySleep">Buoyancy: Bodies do not move fluently. Instead, they move, stop, move, stop, and so on.</h4><div class="subsection"><p>
                            This could be caused by the rigid body sleeping. Please disable sleeping and
                            check if the problem disappears. (To disable sleeping you just have to set
                            <a href="9d832598-7b83-a624-9e3e-94e0a025626f.htm">SleepingSettings<span id="LSTBD6E36FC_14"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_14?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>TimeThreshold</a>
                            to a large value.)
                        </p><p>
                            If sleeping is the culprit, you can create your own Buoyancy effect which wakes
                            up all rigid bodies in the water. Something like:
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAEAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAEAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAEAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAEAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">class</span> MyBuoyancy : Buoyancy
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Apply(RigidBody body)
  {
    body.WakeUp();
    <span class="highlight-keyword">base</span>.Apply(body);
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAEAEAAA");</script></div><h4 class="subHeading" id="Shoot">
                        I want to shoot a body so that it hits a certain target. Which force/impulse do I have to
                        apply?
                    </h4><div class="subsection"><p>
                            This link should cover what your looking for:
                            <a href="http://en.wikipedia.org/wiki/Trajectory_of_a_projectile" target="_blank">Trajectory of a projectile</a>.
                            Look at the vacuum based formulas.
                            These formulas are also explained in detail in the book "Game Programming Gems 2",
                            chapter "Inverse Trajectory Determination".
                        </p><p>
                            When using this formulas in the physics simulation, you will probably not hit the target
                            exactly for two main reasons:
                        </p><ul><li>
                                The numerical integration used in the simulation is not exact.
                            </li><li>
                                If the simulation uses a
                                <a href="5ced507b-a9c1-36ba-8491-29036f236edb.htm">Damping</a>
                                effect: Vacuum-based formulas do not consider damping (a.k.a. drag).
                                You might want to remove damping globally
                                or maybe only for the projectiles (while they are flying).
                            </li></ul><p>
                            A quick note on impulses and velocities:
                            If you want to shoot an object, you can apply an impulse. Or you simply set the start
                            velocity of the projectile body directly - without worrying about impulse formulas.
                        </p></div><h4 class="subHeading" id="GlobalAreaOfEffectExclude">
                        How to use GlobalAreaOfEffect.Exclude
                    </h4><div class="subsection"><p>
                            The predicate
                            <a href="18eb8439-91b3-1ce8-d1f6-f515cf5c8b93.htm">GlobalAreaOfEffect<span id="LSTBD6E36FC_15"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_15?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Exclude</a>
                            is a simple callback function. That means you can implement any kind of logic. For example:
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAACAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAACAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAACAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAACAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Create a global list of excluded bodies in your game.</span>
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> List&lt;RigidBody&gt; ExcludedRigidBodies = <span class="highlight-keyword">new</span> List&lt;RigidBody&gt;(); 
... 
<span class="highlight-comment">// The Exclude-predicate checks whether a rigid body is in the list. </span>
globalAreaOfEffect.Exclude = rigidBody =&gt; ExcludedRigidBodies.Contains(rigidBody);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAACAEAAA");</script></div><h4 class="subHeading" id="IAreaOfEffect">
                        How can I create a custom IAreaOfEffect implementation?
                    </h4><div class="subsection"><p>
                            For example:
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABABAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABABAEAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EABABAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABABAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> CustomGlobalAreaOfEffect : IAreaOfEffect 
{
  <span class="highlight-keyword">public</span> List&lt;RigidBody&gt; ExcludedRigidBodies { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">private</span> <span class="highlight-keyword">set</span>; }

  <span class="highlight-keyword">public</span> CustomGlobalAreaOfEffect()
  {
    ExcludedRigidBodies = <span class="highlight-keyword">new</span> List&lt;RigidBody&gt;();
  }

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Apply(ForceField forceField)
  {
    <span class="highlight-keyword">var</span> simulation = forceField.Simulation;
    <span class="highlight-keyword">if</span> (simulation != <span class="highlight-keyword">null</span>)
    {
      <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> body <span class="highlight-keyword">in</span> simulation.RigidBodies)
        <span class="highlight-keyword">if</span> (body.MotionType == MotionType.Dynamic &amp;&amp; !ExcludedRigidBodies.Contains(body))
          forceField.Apply(body);
    }
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABABAEAAA");</script><p>
                            Notes: If the number of excluded rigid bodies is large, List&lt;T&gt;.Contains() might
                            be too expensive. You can for example store a flag in
                            <a href="946deb6f-c1e5-3567-85b9-82aa13a06699.htm">RigidBody<span id="LSTBD6E36FC_16"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_16?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>UserData</a>
                            and check the flag in the Exclude-predicate. Or you can check
                            <strong>RigidBody.CollisionObject.CollisionGroup</strong>.
                        </p></div><h4 class="subHeading" id="Slower">Why do bodies seem to fall a bit slower than in reality?</h4><div class="subsection"><p>
                            If the game objects are large, you might have the feeling that the objects fall a
                            bit slower than you would expect in reality - especially if the scene is abstract
                            with no reference objects. This is caused by the scale of the objects - in the real
                            world we observe small falling objects more frequently than huge falling object.
                            For example: Bodies in the samples are usually around 1 m in size, like a big rock
                            or crate in a game. If the bodies would be 1 cm, the falling velocity of the bodies
                            relative to their size would be much higher and feel different.
                        </p><p>
                            So the simulation speed is correct - as long as the simulation can keep up with the
                            target frame rate. If the simulation is too slow for the target frame rate, it
                            will drop some simulation time to avoid freezing the game. That means, if the frame
                            rate drops significantly below the target frame rate, the
                            bodies will appear to move in slow-motion.
                            (See also <a href="c4a491c9-bc08-48fa-b85f-7bac2e78e295.htm">Timing</a>)
                        </p></div></div><div class="collapsibleAreaRegion" id="CC"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Character Controllers</span></div><div id="ID3RBSection" class="collapsibleSection"><h4 class="subHeading" id="CCVel">How can I get the velocity of the KinematicCharacterController?</h4><div class="subsection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABADAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> velocity = (myCharacterController.Position - oldPosition) / deltaTime;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABADAAA");</script></div><h4 class="subHeading" id="ComplexCC">
                        How I can I create a complex character controller where individual limbs can collide
                        with objects (instead of using one capsule shape for the whole character)?
                    </h4><div class="subsection"><p>
                            A common approach is to have the character controller capsule that handles the
                            movement and a ragdoll for detailed collision detection with the limbs. You need to
                            disable collisions between the character controller body and the ragdoll bodies
                            (e.g. using
                            <a href="de17643a-be23-0b6a-41e3-568059f8a17c.htm">CollisionGroup</a>).
                        </p><p>
                            If you want to have a very detailed character, you can combine the character
                            controller with a ragdoll and configure collision filters to do this:
                        </p><ul><li>
                                The capsule collides only with the landscape and big objects, like big crates.
                            </li><li>
                                Big objects are pushed by the character controller.
                            </li><li>
                                The capsule does not collide with small objects, like small rocks.
                            </li><li>
                                The ragdoll collides with the small objects, e.g. to kick small rocks when walking through.
                            </li><li>
                                The ragdoll collides with the raycasts for arrows and bullets.
                            </li><li>
                                ...
                            </li></ul></div></div><div class="collapsibleAreaRegion" id="Ragdolls"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Ragdolls</span></div><div id="ID4RBSection" class="collapsibleSection"><h4 class="subHeading" id="Motors">What is the difference between velocity motors vs. quaternion motors?</h4><div class="subsection"><p>
                            Velocity motors simply set the linear and angular velocities of the
                            bodies in each frame to move the bodies to the target positions. If such
                            motors are used, the ragdoll follows the target animation very closely, and
                            the ragdoll is kept upright.
                            Forces and impacts acting on the bodies have minimal impact because the
                            velocity motors override the bodies' velocities in each frame.
                        </p><p>
                            Constraint motors use physics constraints (like
                            <a href="ff7458d4-5cdb-b858-a5cb-63825559908a.htm">QuaternionMotor</a>)
                            to control the relative orientation of the bodies. This is used in the
                            <em>ActiveRagdollSample</em> of the
                            <a href="dde51686-4f07-4c54-95d4-756ec929cb57.htm">Samples</a>.
                            Since only the relative orientation is controlled, the ragdoll falls to
                            the floor but keeps playing the animation. Bodies controlled by
                            constraints react to impacts.
                        </p></div><h4 class="subHeading" id="Rotation">How can I rotate the ragdoll bodies around the model origin?</h4><div class="subsection"><p>
                            Given:
                        </p><ul><li>
                                The current pose of the rigid body (RigidBody.Pose). Let's call it pWB.
                            </li><li>
                                The pose of the character/model. Let's call it pWM.
                            </li><li>
                                A pose which rotates a vector by 90°. Let's call it pR.
                            </li></ul><p>
                            Wanted:
                        </p><ul><li>
                                The pose of the rigid body rotated by 90° relative to model space. Let's call it pWB'.
                            </li></ul><p>
                            Solution:
                        </p><ul class="noBullet"><li>
                                pWB' = pWM * pR * pMW * pWB
                                          = pWM * pR * (pWM)^-1 * pWB

                            </li></ul><p>
                            Explanation:
                        </p><ul class="noBullet"><li>
                                In the DigitalRune Engine, transformations are applied from right to
                                left. So you have to read the equation from right to left.
                            </li><li>
                                pWB transforms a vector from the local body space (indicated by the
                                letter B) to world space (W).
                            </li><li>
                                pMW transforms from world space to model space. pMW is not given but
                                it simply is the inverse of pWM.
                            </li><li>
                                After applying pMW * pWB, we are in model space. We multiply by
                                pR to apply the rotation relative to the model.
                            </li><li>
                                Finally we use pWM to convert from model space to world space.
                            </li></ul><p>
                            Code example:
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAABACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">myBody.Pose = poseModel * <span class="highlight-keyword">new</span> Pose(Matrix33F.CreateRotationY(MathHelper.ToRadians(<span class="highlight-number">90</span>))) * poseModel.Inverse * myBody.Pose;</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABACAAA");</script></div><h4 class="subHeading" id="Transition">How to transition from an animated model to a ragdoll-controlled model?</h4><div class="subsection"><p><strong>Option A:</strong></p><p>
                            While the character is standing, the animation is played. The bodies are
                            dynamic and in each frame the position of the bodies is updated
                            from the animation using
                            <a href="46fba0ab-70e1-89f7-588a-a4ac26297226.htm">Ragdoll<span id="LSTBD6E36FC_17"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_17?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>UpdateBodiesFromSkeleton</a>
                            (as in the
                            <em>CollisionDetectionOnlyRagdollSample</em>).
                            After the hit, the bodies update the skeleton using
                            <a href="765447d1-8b39-7bd7-b01d-c5bd73a6316d.htm">Ragdoll<span id="LSTBD6E36FC_18"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_18?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>UpdateSkeletonFromBodies</a>.
                            Since the bodies are dynamic all the
                            time, they will react to the impact. The disadvantage is that while the
                            animation is active the dynamic bodies do not properly push other rigid
                            bodies. - Often this is okay because a character controller is used and
                            takes care of the pushing while the ragdoll is used only for collision
                            detection.
                        </p><p>
                            In other words: Start with a Ragdoll with disabled joints, limits and motors.
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAKAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAKAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAKAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAKAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">_ragdoll.Pose = _pose;
_ragdoll.UpdateBodiesFromSkeleton(_skeletonPose);
_ragdoll.DisableJoints();
_ragdoll.DisableLimits();
_ragdoll.DisableMotors();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAKAAACAAA");</script><p>
                            and in each frame call
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAIAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAIAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAIAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAIAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">_ragdoll.UpdateBodiesFromSkeleton(_skeletonPose);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAIAAACAAA");</script><p>
                            to move the bodies to upright or animated skeleton position.
                        </p><p>
                            Then once you have detected a hit (similar to the
                            <em>CollisionDetectionOnlyRagdollSample</em>),
                            switch to the passive ragdoll:
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">_ragdoll.EnableJoints();
_ragdoll.EnableLimits();
<span class="highlight-keyword">foreach</span> (RagdollMotor motor <span class="highlight-keyword">in</span> _ragdoll.Motors)
{
  <span class="highlight-keyword">if</span> (motor != <span class="highlight-keyword">null</span>)
  {
    motor.Mode = RagdollMotorMode.Constraint;
    motor.ConstraintDamping = <span class="highlight-number">5</span>;
    motor.ConstraintSpring = <span class="highlight-number">0</span>;
  }
}
_ragdoll.EnableMotors();</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFAAACAAA");</script><p>
                            and in each frame call
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADAAACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADAAACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADAAACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADAAACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">_ragdoll.UpdateSkeletonFromBodies(_skeletonPose);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADAAACAAA");</script><p>
                            That means: First the skeleton controls the bodies. After the hit
                            the bodies control the skeleton.
                        </p><p><strong>Option B:</strong></p><p>
                            You use kinematic bodies and motors as in the
                            <em>KinematicRagdollSample</em>. When the character
                            is hit you make all bodies dynamic and use
                            <a href="765447d1-8b39-7bd7-b01d-c5bd73a6316d.htm">Ragdoll<span id="LSTBD6E36FC_19"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_19?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>UpdateSkeletonFromBodies</a>.
                            Such a character properly pushes other objects while the animation is
                            active. But it will not react to the impact. You can then manually call
                            <a href="9a8a139d-eb9a-06fa-62d9-cb103a18e769.htm">RigidBody<span id="LSTBD6E36FC_20"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_20?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>ApplyImpulse</a>
                            to apply an impact impulse (after the bodies were set to dynamic).
                        </p></div></div><div class="collapsibleAreaRegion" id="Vehicle"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Vehicle physics</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading" id="LimitVehicleSpeed">How to limit the speed of the vehicle?</h4><div class="subsection"><p>
                            Option A) Simply clamp
                            <a href="496fbfc6-0275-1a71-843a-57a0f830b9aa.htm">LinearVelocity</a>
                            of the chassis body manually after
                            <a href="c527e0b6-d9ea-a908-47f6-1181cbcf5744.htm">Simulation<span id="LSTBD6E36FC_21"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTBD6E36FC_21?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Update</a>.
                            This can look OK with one minor problem: If there is a large instant force (like an
                            explosion), the body can have a larger velocity for one frame.
                        </p><p>
                            Option B) Create a constraint that limits the velocity. This is better because it
                            applies the velocity limit inside the simulation update. Here is an example constraint:
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EACAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">class</span> LinearSpeedLimit : Constraint
{
  <span class="highlight-keyword">public</span> <span class="highlight-keyword">float</span> MaxSpeed { <span class="highlight-keyword">get</span>; <span class="highlight-keyword">set</span>; }

  <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnSetup() { }

  <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">bool</span> OnApplyImpulse()
  {
    <span class="highlight-keyword">var</span> speed = BodyA.LinearVelocity.Length;
    <span class="highlight-keyword">if</span> (speed &lt;= MaxSpeed + Numeric.EpsilonF)
      <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;

    BodyA.LinearVelocity = BodyA.LinearVelocity * (MaxSpeed / speed);
    <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;
  }

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> Vector3F LinearConstraintImpulse
  {
    <span class="highlight-keyword">get</span> { <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> System.NotImplementedException(); }
  }

  <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> Vector3F AngularConstraintImpulse
  {
    <span class="highlight-keyword">get</span> { <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> System.NotImplementedException(); }
  }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACAAABAAA");</script><p>
                            And use it like this:
                        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAAAABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAAAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">Simulation.Constraints.Add(<span class="highlight-keyword">new</span> LinearSpeedLimit { BodyA = chassis, BodyB = chassis, MaxSpeed = <span class="highlight-number">50</span> });</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAAAABAAA");</script></div></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>