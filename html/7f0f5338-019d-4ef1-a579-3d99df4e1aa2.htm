<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Step 17: Deferred lighting</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="7f0f5338-019d-4ef1-a579-3d99df4e1aa2" /><meta name="Description" content="In this last step we will add a completely new render pipeline." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">DigitalRune Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="38bd0f53-477c-48c5-91cc-b9fb7062ceb3.htm" title="DigitalRune Documentation" tocid="roottoc">DigitalRune Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="d94d3673-de15-47f9-a122-70b4d97b5920.htm" title="General" tocid="d94d3673-de15-47f9-a122-70b4d97b5920">General</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="4d7ccf95-54e8-4b4c-950f-9420947b4e24.htm" title="Tutorials" tocid="4d7ccf95-54e8-4b4c-950f-9420947b4e24">Tutorials</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="6ce9b230-eed2-419d-92df-3e3e4a03d27e.htm" title="Tutorial 01: Adding DigitalRune Engine to an XNA Game" tocid="6ce9b230-eed2-419d-92df-3e3e4a03d27e">Tutorial 01: Adding DigitalRune Engine to an XNA Game</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="8befb151-f7b6-4884-936b-530458b13860.htm" title="Step 1: Setup" tocid="8befb151-f7b6-4884-936b-530458b13860">Step 1: Setup</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="25418622-e634-4741-8d17-efc9fb44fba7.htm" title="Step 2: Empty game" tocid="25418622-e634-4741-8d17-efc9fb44fba7">Step 2: Empty game</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="0c04e065-a5fb-4045-bc09-7cce47c63d4e.htm" title="Step 3: Input service" tocid="0c04e065-a5fb-4045-bc09-7cce47c63d4e">Step 3: Input service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="26ebc8f3-4778-4979-a217-1d85e2c5ae31.htm" title="Step 4: Graphics service" tocid="26ebc8f3-4778-4979-a217-1d85e2c5ae31">Step 4: Graphics service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="efe7ad45-ea74-4e57-810d-93bc3ef3a28f.htm" title="Step 5: Debug rendering" tocid="efe7ad45-ea74-4e57-810d-93bc3ef3a28f">Step 5: Debug rendering</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="da752ba9-7056-4485-9b90-d6070cb7c1e8.htm" title="Step 6: Game object service" tocid="da752ba9-7056-4485-9b90-d6070cb7c1e8">Step 6: Game object service</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5.htm" title="Step 7: Model content" tocid="53ee55e3-b4a5-42cc-b47d-88d18b9de2f5">Step 7: Model content</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="253857cc-d401-4788-ae6e-4ca12a94a21e.htm" title="Step 8: Rendering models" tocid="253857cc-d401-4788-ae6e-4ca12a94a21e">Step 8: Rendering models</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="cdc88d41-dcb6-4464-be17-46d29a15d25a.htm" title="Step 9: Animated Model" tocid="cdc88d41-dcb6-4464-be17-46d29a15d25a">Step 9: Animated Model</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="a1c6f3cc-8a48-4c68-9401-421d36f67eba.htm" title="Step 10: More debug rendering" tocid="a1c6f3cc-8a48-4c68-9401-421d36f67eba">Step 10: More debug rendering</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="dd394bdc-c9ec-442a-929d-7141f7b301ae.htm" title="Step 11: Physics" tocid="dd394bdc-c9ec-442a-929d-7141f7b301ae">Step 11: Physics</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="aa0a6f8f-d355-4188-9d4a-7041160411d1.htm" title="Step 12: Particles" tocid="aa0a6f8f-d355-4188-9d4a-7041160411d1">Step 12: Particles</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="c060be3d-f85f-4551-838c-6969ab45b0b4.htm" title="Step 13: Sky box" tocid="c060be3d-f85f-4551-838c-6969ab45b0b4">Step 13: Sky box</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="68c9f201-aa9c-4b7f-bf96-a57893faddfe.htm" title="Step 14: Post-processing" tocid="68c9f201-aa9c-4b7f-bf96-a57893faddfe">Step 14: Post-processing</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="b035aaae-87fb-48c6-86de-e30024ec9a89.htm" title="Step 15: Add DigitalRune Graphics content" tocid="b035aaae-87fb-48c6-86de-e30024ec9a89">Step 15: Add DigitalRune Graphics content</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="77f82858-2022-41f9-9325-9a4d97b5450d.htm" title="Step 16: GUI" tocid="77f82858-2022-41f9-9325-9a4d97b5450d">Step 16: GUI</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="7f0f5338-019d-4ef1-a579-3d99df4e1aa2.htm" title="Step 17: Deferred lighting" tocid="7f0f5338-019d-4ef1-a579-3d99df4e1aa2">Step 17: Deferred lighting</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="DigitalRune" src="../icons/DigitalRune-Logo.png" /></td><td class="titleColumn">Step 17: Deferred lighting</td></tr></table><span class="introStyle"></span><div class="introduction"><p>
                In this last step we will add a completely new render pipeline.
            </p><p>
                Here is a ZIP file with the final result of this tutorial:
            </p><ul class="noBullet"><li><a href="http://1drv.ms/1u6GLEN" target="_blank">Tutorial01-Final.zip</a></li></ul></div><div class="collapsibleAreaRegion" id="ForwardRendering"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />
                Interlude: Forward rendering
            </span></div><div id="ID1RBSection" class="collapsibleSection"><p>
                    The render pipeline is implemented in <strong>MyGraphicsScreen</strong>
                    and currently looks like this:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFACAAA_tab1" class="codeSnippetContainerTabSingle">MyGraphicsScreen.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFACAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAFACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGraphicsScreen : GraphicsScreen
    {
        …

        <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> OnRender(RenderContext context)
        {
            …
            <span class="highlight-comment">// Frustum Culling: Get all the scene nodes that intersect the camera frustum.</span>
            <span class="highlight-keyword">var</span> query = Scene.Query&lt;CameraFrustumQuery&gt;(context.CameraNode, context);

            <span class="highlight-comment">// Render opaque meshes that are visible from the camera</span>
            graphicsDevice.DepthStencilState = DepthStencilState.Default;
            graphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
            graphicsDevice.BlendState = BlendState.Opaque;
            graphicsDevice.SamplerStates[<span class="highlight-number">0</span>] = SamplerState.AnisotropicWrap;
            context.RenderPass = <span class="highlight-literal">"Default"</span>;
            _meshRenderer.Render(query.SceneNodes, context);
            context.RenderPass = <span class="highlight-keyword">null</span>;

            _skyRenderer.Render(query.SceneNodes, context);

            graphicsDevice.DepthStencilState = DepthStencilState.DepthRead;
            _billboardRenderer.Render(query.SceneNodes, context, RenderOrder.BackToFront);

            context.SourceTexture = intermediateRenderTarget;
            context.RenderTarget = screenRenderTarget;
            context.Viewport = screenViewport;
            _postProcessors.Process(context);
            context.SourceTexture = <span class="highlight-keyword">null</span>;

            DebugRenderer.Render(context);
            …
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFACAAA");</script><p>
                    The important steps are
                </p><ol><li>
                        Get the scene nodes that are visible from the camera (= <span class="term">frustum culling</span>).
                    </li><li>Render opaque meshes using the render pass "Default".</li><li>Render sky.</li><li>Render billboards and particles.</li><li>Run post-process flters.</li><li>Render debug graphics.</li></ol><p>
                    Such a render pipeline can be useful for less powerful hardware (e.g. mobile devices).
                    But several advanced features are lacking:
                </p><ol><li>High dynamic range (HDR) rendering</li><li>Better materials (e.g. normal mapping)</li><li>Rendering shadows, reflections, lens flares</li><li>Screen space ambient occlusion</li><li>etc.</li></ol><p>
                    Time to look at a more complex render pipeline.
                </p></div><div class="collapsibleAreaRegion" id="DeferredRendering"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Add deferred rendering</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
                    Let's drop a new graphics screen into the project. This graphics screen was taken
                    from the DigitalRune samples and I have made only minor modifications. I have added
                    following files to the project:
                </p><div class="mediaNear"><img alt="Tutorial-01-31" src="../media/Tutorial-01-31.png" /></div><p>
                    These files are included in the final ZIP file of this tutorial (see link above).
                </p><p>
                    The new render pipeline is implemented in <strong>DeferredGraphicsScreen</strong>.
                    To use it we make these changes to <strong>MyGameComponent</strong>:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EASABAAA_tab1" class="codeSnippetContainerTabSingle">MyGameComponent.cs</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EASABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EASABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EASABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">…
<span class="highlight-keyword">namespace</span> MyGame
{
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MyGameComponent : Microsoft.Xna.Framework.GameComponent
    {
        <span class="highlight-keyword">private</span> IInputService _inputService;
        <span class="highlight-keyword">private</span> IGraphicsService _graphicsService;
        <span class="highlight-comment">//private MyGraphicsScreen _myGraphicsScreen;                                     // Comment out</span>
        <span class="highlight-keyword">private</span> DeferredGraphicsScreen _myGraphicsScreen;                                 <span class="highlight-comment">// New</span>
        <span class="highlight-keyword">private</span> MenuWindow _menuWindow;
        
        <span class="highlight-keyword">public</span> MyGameComponent(Game game)
            : <span class="highlight-keyword">base</span>(game)
        {
            _inputService = ServiceLocator.Current.GetInstance&lt;IInputService&gt;();

            _graphicsService = ServiceLocator.Current.GetInstance&lt;IGraphicsService&gt;();
            
            <span class="highlight-comment">//_myGraphicsScreen = new MyGraphicsScreen(_graphicsService);                 // Comment out</span>
            _myGraphicsScreen = <span class="highlight-keyword">new</span> DeferredGraphicsScreen(ServiceLocator.Current);       <span class="highlight-comment">// New</span>
            _graphicsService.Screens.Add(_myGraphicsScreen);
            ((ServiceContainer)ServiceLocator.Current).Register(<span class="highlight-keyword">typeof</span>(IScene), <span class="highlight-keyword">null</span>, _myGraphicsScreen.Scene);
            …
        }
        …</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EASABAAA");</script><p>
                    When you run the game, you can see that the models are not rendered.
                </p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Tip" /> Tip</th></tr><tr><td><p>
                        Sidenote: Normally, if models are not rendered, the first thing I do is to
                        enable the debug rendering to check bounding boxes, model skeletons, etc.
                    </p></td></tr></table></div><p>
                    The reason that the models are not rendered is that they need different effects.
                    For example, the currrent material of the ground model (
                    <em>ground.drmat</em>) is:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAOABAAA_tab1" class="codeSnippetContainerTabSingle">ground.drmat</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAOABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAOABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAOABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;?</span><span class="highlight-xml-tag">xml</span> <span class="highlight-xml-attribute-name">version</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"1.0"</span> <span class="highlight-xml-attribute-name">encoding</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"utf-8"</span><span class="highlight-xml-bracket">?&gt;</span>
<span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Material</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Pass</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Default"</span> <span class="highlight-xml-attribute-name">Effect</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"BasicEffect"</span> <span class="highlight-xml-attribute-name">Profile</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Any"</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameter</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Alpha"</span> <span class="highlight-xml-attribute-name">Value</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"1"</span> <span class="highlight-xml-bracket">/&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameter</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"DiffuseColor"</span> <span class="highlight-xml-attribute-name">Value</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"0.8,0.8,0.8"</span> <span class="highlight-xml-bracket">/&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameter</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"EmissiveColor"</span> <span class="highlight-xml-attribute-name">Value</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"0,0,0"</span> <span class="highlight-xml-bracket">/&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameter</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"SpecularColor"</span> <span class="highlight-xml-attribute-name">Value</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"0,0,0"</span> <span class="highlight-xml-bracket">/&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameter</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"SpecularPower"</span> <span class="highlight-xml-attribute-name">Value</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"16"</span> <span class="highlight-xml-bracket">/&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameter</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"VertexColorEnabled"</span> <span class="highlight-xml-attribute-name">Value</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"False"</span> <span class="highlight-xml-bracket">/&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Texture</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Texture"</span> <span class="highlight-xml-attribute-name">File</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"ground.png"</span> <span class="highlight-xml-bracket">/&gt;</span>
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Pass</span><span class="highlight-xml-bracket">&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Material</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAOABAAA");</script><p>
                    There is one render pass that uses the <strong>BasicEffect</strong> of XNA.
                    This effect is used when <strong>MyGraphicsScreen </strong> renders the meshes with:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAMABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAMABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAMABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAMABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">context.RenderPass = <span class="highlight-literal">"Default"</span>;
_meshRenderer.Render(query.SceneNodes, context);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAMABAAA");</script><p>
                    The <strong>BasicEffect</strong> transforms the meshes and computes the
                    shading in one pass – this kind of rendering is called <span class="term">forward rendering</span>.
                </p><p>
                    If you look into the <strong>DeferredGraphicsScreen</strong> classes you
                    will not find a use of the render pass "Default". Several other render passes are used instead, for example:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAJABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAJABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAJABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAJABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">context.RenderPass = <span class="highlight-literal">"ShadowMap"</span>;
ShadowMapRenderer.Render(sceneQuery.Lights, context);
…
context.RenderPass = <span class="highlight-literal">"GBuffer"</span>;
graphicsDevice.DepthStencilState = DepthStencilState.Default;
graphicsDevice.RasterizerState = RasterizerState.CullCounterClockwise;
graphicsDevice.BlendState = BlendState.Opaque;
_sceneNodeRenderer.Render(sceneNodes, context);
…
context.RenderPass = <span class="highlight-literal">"Material"</span>;
MeshRenderer.Render(sceneQuery.RenderableNodes, context);</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAJABAAA");</script><p>
                    The graphics screen renders shadow maps for shadows. <span class="term">Deferred lighting</span>
                    transforms the meshes in the "GBuffer" pass. The transformed geometry is stored in
                    a render target called the
                    <a href="http://en.wikipedia.org/wiki/Deferred_shading" target="_blank">G-buffer</a>. The shading happens in a separate "Material" pass. If these
                    render passes are not present in the DRMAT file, then the meshes are not rendered
                    in the corresponding render passes. We have to update the materials of the models.
                    Here is the new material of the ground model (<em>ground.drmat</em>):
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAHABAAA_tab1" class="codeSnippetContainerTabSingle">ground.drmat</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAHABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EAHABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAHABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;?</span><span class="highlight-xml-tag">xml</span> <span class="highlight-xml-attribute-name">version</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"1.0"</span> <span class="highlight-xml-attribute-name">encoding</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"utf-8"</span><span class="highlight-xml-bracket">?&gt;</span>
<span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Material</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Pass</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Default"</span> <span class="highlight-xml-attribute-name">Effect</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"BasicEffect"</span> <span class="highlight-xml-attribute-name">Profile</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Any"</span><span class="highlight-xml-bracket">&gt;</span>
        …
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Pass</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Pass</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"ShadowMap"</span> <span class="highlight-xml-attribute-name">Effect</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"DigitalRune/Materials/ShadowMap"</span> <span class="highlight-xml-attribute-name">Profile</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"HiDef"</span> <span class="highlight-xml-bracket">/&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Pass</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"GBuffer"</span> <span class="highlight-xml-attribute-name">Effect</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"DigitalRune/Materials/GBuffer"</span> <span class="highlight-xml-attribute-name">Profile</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"HiDef"</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameter</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"SpecularPower"</span> <span class="highlight-xml-attribute-name">Value</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"10"</span> <span class="highlight-xml-bracket">/&gt;</span>
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Pass</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Pass</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Material"</span> <span class="highlight-xml-attribute-name">Effect</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"DigitalRune/Materials/Material"</span> <span class="highlight-xml-attribute-name">Profile</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"HiDef"</span><span class="highlight-xml-bracket">&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameter</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"DiffuseColor"</span> <span class="highlight-xml-attribute-name">Value</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"1,1,1"</span> <span class="highlight-xml-bracket">/&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Parameter</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"SpecularColor"</span> <span class="highlight-xml-attribute-name">Value</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"0.1,0.1,0.1"</span> <span class="highlight-xml-bracket">/&gt;</span>
        <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Texture</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"DiffuseTexture"</span> <span class="highlight-xml-attribute-name">File</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"ground.png"</span> <span class="highlight-xml-bracket">/&gt;</span>
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Pass</span><span class="highlight-xml-bracket">&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Material</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAHABAAA");</script><p>
                    The referenced effects are pre-built effects of DigitalRune Graphics – however,
                    you could also use your own effects.
                </p><p>
                    The materials of all models need to be updated. The correct materials can be found
                    in the final ZIP file of this tutorial.
                </p><p>
                    One more thing to note is: The animated model needs to use different effects that support mesh skinning:
                </p><div class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADABAAA_copyCode" href="#" onclick="javascript:CopyToClipboard('ID0EADABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-xml-bracket">&lt;?</span><span class="highlight-xml-tag">xml</span> <span class="highlight-xml-attribute-name">version</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"1.0"</span> <span class="highlight-xml-attribute-name">encoding</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"utf-8"</span><span class="highlight-xml-bracket">?&gt;</span>
<span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Material</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Pass</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Default"</span> <span class="highlight-xml-attribute-name">Effect</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"SkinnedEffect"</span> <span class="highlight-xml-attribute-name">Profile</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Any"</span><span class="highlight-xml-bracket">&gt;</span>
        …
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Pass</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Pass</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"ShadowMap"</span> <span class="highlight-xml-attribute-name">Effect</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"DigitalRune/Materials/ShadowMapSkinned"</span> <span class="highlight-xml-attribute-name">Profile</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"HiDef"</span> <span class="highlight-xml-bracket">/&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Pass</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"GBuffer"</span> <span class="highlight-xml-attribute-name">Effect</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"DigitalRune/Materials/GBufferNormalSkinned"</span> <span class="highlight-xml-attribute-name">Profile</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"HiDef"</span><span class="highlight-xml-bracket">&gt;</span>
        …
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Pass</span><span class="highlight-xml-bracket">&gt;</span>
    <span class="highlight-xml-bracket">&lt;</span><span class="highlight-xml-tag">Pass</span> <span class="highlight-xml-attribute-name">Name</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"Material"</span> <span class="highlight-xml-attribute-name">Effect</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"DigitalRune/Materials/MaterialSkinned"</span> <span class="highlight-xml-attribute-name">Profile</span><span class="highlight-xml-attribute-equal">=</span><span class="highlight-xml-attribute-value">"HiDef"</span><span class="highlight-xml-bracket">&gt;</span>
        …
    <span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Pass</span><span class="highlight-xml-bracket">&gt;</span>
<span class="highlight-xml-bracket">&lt;/</span><span class="highlight-xml-tag">Material</span><span class="highlight-xml-bracket">&gt;</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADABAAA");</script><p>
                    Once the materials are updated, you should see the final result of this tutorial:
                </p><div class="mediaNear"><img alt="Tutorial-01-01" src="../media/Tutorial-01-01.jpg" /></div><p>
                    For more information, about the deferred rendering please check out the source
                    code of the DigitalRune samples.
                </p></div></div></div><div id="pageFooter" class="pageFooter">Copyright (c) 2006-2016 DigitalRune GmbH. All rights reserved. (Last updated: 2016-03-10)<p><a href="http://www.digitalrune.com/" target="_blank">http://www.digitalrune.com/</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:office%40digitalrune.com?Subject=DigitalRune Documentation">office@digitalrune.com</a></div><script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>